/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/http-errors";
exports.ids = ["vendor-chunks/http-errors"];
exports.modules = {

/***/ "(ssr)/./node_modules/http-errors/index.js":
/*!*******************************************!*\
  !*** ./node_modules/http-errors/index.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/*!\n * http-errors\n * Copyright(c) 2014 Jonathan Ong\n * Copyright(c) 2016 Douglas Christopher Wilson\n * MIT Licensed\n */ \n/**\n * Module dependencies.\n * @private\n */ var deprecate = __webpack_require__(/*! depd */ \"(ssr)/./node_modules/http-errors/node_modules/depd/index.js\")(\"http-errors\");\nvar setPrototypeOf = __webpack_require__(/*! setprototypeof */ \"(ssr)/./node_modules/setprototypeof/index.js\");\nvar statuses = __webpack_require__(/*! statuses */ \"(ssr)/./node_modules/statuses/index.js\");\nvar inherits = __webpack_require__(/*! inherits */ \"(ssr)/./node_modules/inherits/inherits.js\");\nvar toIdentifier = __webpack_require__(/*! toidentifier */ \"(ssr)/./node_modules/toidentifier/index.js\");\n/**\n * Module exports.\n * @public\n */ module.exports = createError;\nmodule.exports.HttpError = createHttpErrorConstructor();\nmodule.exports.isHttpError = createIsHttpErrorFunction(module.exports.HttpError);\n// Populate exports for all constructors\npopulateConstructorExports(module.exports, statuses.codes, module.exports.HttpError);\n/**\n * Get the code class of a status code.\n * @private\n */ function codeClass(status) {\n    return Number(String(status).charAt(0) + \"00\");\n}\n/**\n * Create a new HTTP Error.\n *\n * @returns {Error}\n * @public\n */ function createError() {\n    // so much arity going on ~_~\n    var err;\n    var msg;\n    var status = 500;\n    var props = {};\n    for(var i = 0; i < arguments.length; i++){\n        var arg = arguments[i];\n        if (arg instanceof Error) {\n            err = arg;\n            status = err.status || err.statusCode || status;\n            continue;\n        }\n        switch(typeof arg){\n            case \"string\":\n                msg = arg;\n                break;\n            case \"number\":\n                status = arg;\n                if (i !== 0) {\n                    deprecate(\"non-first-argument status code; replace with createError(\" + arg + \", ...)\");\n                }\n                break;\n            case \"object\":\n                props = arg;\n                break;\n        }\n    }\n    if (typeof status === \"number\" && (status < 400 || status >= 600)) {\n        deprecate(\"non-error status code; use only 4xx or 5xx status codes\");\n    }\n    if (typeof status !== \"number\" || !statuses[status] && (status < 400 || status >= 600)) {\n        status = 500;\n    }\n    // constructor\n    var HttpError = createError[status] || createError[codeClass(status)];\n    if (!err) {\n        // create error\n        err = HttpError ? new HttpError(msg) : new Error(msg || statuses[status]);\n        Error.captureStackTrace(err, createError);\n    }\n    if (!HttpError || !(err instanceof HttpError) || err.status !== status) {\n        // add properties to generic error\n        err.expose = status < 500;\n        err.status = err.statusCode = status;\n    }\n    for(var key in props){\n        if (key !== \"status\" && key !== \"statusCode\") {\n            err[key] = props[key];\n        }\n    }\n    return err;\n}\n/**\n * Create HTTP error abstract base class.\n * @private\n */ function createHttpErrorConstructor() {\n    function HttpError() {\n        throw new TypeError(\"cannot construct abstract class\");\n    }\n    inherits(HttpError, Error);\n    return HttpError;\n}\n/**\n * Create a constructor for a client error.\n * @private\n */ function createClientErrorConstructor(HttpError, name, code) {\n    var className = toClassName(name);\n    function ClientError(message) {\n        // create the error object\n        var msg = message != null ? message : statuses[code];\n        var err = new Error(msg);\n        // capture a stack trace to the construction point\n        Error.captureStackTrace(err, ClientError);\n        // adjust the [[Prototype]]\n        setPrototypeOf(err, ClientError.prototype);\n        // redefine the error message\n        Object.defineProperty(err, \"message\", {\n            enumerable: true,\n            configurable: true,\n            value: msg,\n            writable: true\n        });\n        // redefine the error name\n        Object.defineProperty(err, \"name\", {\n            enumerable: false,\n            configurable: true,\n            value: className,\n            writable: true\n        });\n        return err;\n    }\n    inherits(ClientError, HttpError);\n    nameFunc(ClientError, className);\n    ClientError.prototype.status = code;\n    ClientError.prototype.statusCode = code;\n    ClientError.prototype.expose = true;\n    return ClientError;\n}\n/**\n * Create function to test is a value is a HttpError.\n * @private\n */ function createIsHttpErrorFunction(HttpError) {\n    return function isHttpError(val) {\n        if (!val || typeof val !== \"object\") {\n            return false;\n        }\n        if (val instanceof HttpError) {\n            return true;\n        }\n        return val instanceof Error && typeof val.expose === \"boolean\" && typeof val.statusCode === \"number\" && val.status === val.statusCode;\n    };\n}\n/**\n * Create a constructor for a server error.\n * @private\n */ function createServerErrorConstructor(HttpError, name, code) {\n    var className = toClassName(name);\n    function ServerError(message) {\n        // create the error object\n        var msg = message != null ? message : statuses[code];\n        var err = new Error(msg);\n        // capture a stack trace to the construction point\n        Error.captureStackTrace(err, ServerError);\n        // adjust the [[Prototype]]\n        setPrototypeOf(err, ServerError.prototype);\n        // redefine the error message\n        Object.defineProperty(err, \"message\", {\n            enumerable: true,\n            configurable: true,\n            value: msg,\n            writable: true\n        });\n        // redefine the error name\n        Object.defineProperty(err, \"name\", {\n            enumerable: false,\n            configurable: true,\n            value: className,\n            writable: true\n        });\n        return err;\n    }\n    inherits(ServerError, HttpError);\n    nameFunc(ServerError, className);\n    ServerError.prototype.status = code;\n    ServerError.prototype.statusCode = code;\n    ServerError.prototype.expose = false;\n    return ServerError;\n}\n/**\n * Set the name of a function, if possible.\n * @private\n */ function nameFunc(func, name) {\n    var desc = Object.getOwnPropertyDescriptor(func, \"name\");\n    if (desc && desc.configurable) {\n        desc.value = name;\n        Object.defineProperty(func, \"name\", desc);\n    }\n}\n/**\n * Populate the exports object with constructors for every error class.\n * @private\n */ function populateConstructorExports(exports, codes, HttpError) {\n    codes.forEach(function forEachCode(code) {\n        var CodeError;\n        var name = toIdentifier(statuses[code]);\n        switch(codeClass(code)){\n            case 400:\n                CodeError = createClientErrorConstructor(HttpError, name, code);\n                break;\n            case 500:\n                CodeError = createServerErrorConstructor(HttpError, name, code);\n                break;\n        }\n        if (CodeError) {\n            // export the constructor\n            exports[code] = CodeError;\n            exports[name] = CodeError;\n        }\n    });\n    // backwards-compatibility\n    exports[\"I'mateapot\"] = deprecate.function(exports.ImATeapot, '\"I\\'mateapot\"; use \"ImATeapot\" instead');\n}\n/**\n * Get a class name from a name identifier.\n * @private\n */ function toClassName(name) {\n    return name.substr(-5) !== \"Error\" ? name + \"Error\" : name;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/http-errors/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/http-errors/node_modules/depd/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/http-errors/node_modules/depd/index.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*!\n * depd\n * Copyright(c) 2014-2017 Douglas Christopher Wilson\n * MIT Licensed\n */ /**\n * Module dependencies.\n */ var callSiteToString = (__webpack_require__(/*! ./lib/compat */ \"(ssr)/./node_modules/http-errors/node_modules/depd/lib/compat/index.js\").callSiteToString);\nvar eventListenerCount = (__webpack_require__(/*! ./lib/compat */ \"(ssr)/./node_modules/http-errors/node_modules/depd/lib/compat/index.js\").eventListenerCount);\nvar relative = (__webpack_require__(/*! path */ \"path\").relative);\n/**\n * Module exports.\n */ module.exports = depd;\n/**\n * Get the path to base files on.\n */ var basePath = process.cwd();\n/**\n * Determine if namespace is contained in the string.\n */ function containsNamespace(str1, namespace1) {\n    var vals1 = str1.split(/[ ,]+/);\n    var ns1 = String(namespace1).toLowerCase();\n    for(var i1 = 0; i1 < vals1.length; i1++){\n        var val1 = vals1[i1];\n        // namespace contained\n        if (val1 && (val1 === \"*\" || val1.toLowerCase() === ns1)) {\n            return true;\n        }\n    }\n    return false;\n}\n/**\n * Convert a data descriptor to accessor descriptor.\n */ function convertDataDescriptorToAccessor(obj1, prop1, message1) {\n    var descriptor1 = Object.getOwnPropertyDescriptor(obj1, prop1);\n    var value1 = descriptor1.value;\n    descriptor1.get = function getter1() {\n        return value1;\n    };\n    if (descriptor1.writable) {\n        descriptor1.set = function setter1(val1) {\n            return value1 = val1;\n        };\n    }\n    delete descriptor1.value;\n    delete descriptor1.writable;\n    Object.defineProperty(obj1, prop1, descriptor1);\n    return descriptor1;\n}\n/**\n * Create arguments string to keep arity.\n */ function createArgumentsString(arity1) {\n    var str1 = \"\";\n    for(var i1 = 0; i1 < arity1; i1++){\n        str1 += \", arg\" + i1;\n    }\n    return str1.substr(2);\n}\n/**\n * Create stack string from stack.\n */ function createStackString(stack1) {\n    var str1 = this.name + \": \" + this.namespace;\n    if (this.message) {\n        str1 += \" deprecated \" + this.message;\n    }\n    for(var i1 = 0; i1 < stack1.length; i1++){\n        str1 += \"\\n    at \" + callSiteToString(stack1[i1]);\n    }\n    return str1;\n}\n/**\n * Create deprecate for namespace in caller.\n */ function depd(namespace1) {\n    if (!namespace1) {\n        throw new TypeError(\"argument namespace is required\");\n    }\n    var stack1 = getStack();\n    var site1 = callSiteLocation(stack1[1]);\n    var file1 = site1[0];\n    function deprecate1(message1) {\n        // call to self as log\n        log.call(deprecate1, message1);\n    }\n    deprecate1._file = file1;\n    deprecate1._ignored = isignored(namespace1);\n    deprecate1._namespace = namespace1;\n    deprecate1._traced = istraced(namespace1);\n    deprecate1._warned = Object.create(null);\n    deprecate1.function = wrapfunction;\n    deprecate1.property = wrapproperty;\n    return deprecate1;\n}\n/**\n * Determine if namespace is ignored.\n */ function isignored(namespace1) {\n    /* istanbul ignore next: tested in a child processs */ if (process.noDeprecation) {\n        // --no-deprecation support\n        return true;\n    }\n    var str1 = process.env.NO_DEPRECATION || \"\";\n    // namespace ignored\n    return containsNamespace(str1, namespace1);\n}\n/**\n * Determine if namespace is traced.\n */ function istraced(namespace1) {\n    /* istanbul ignore next: tested in a child processs */ if (process.traceDeprecation) {\n        // --trace-deprecation support\n        return true;\n    }\n    var str1 = process.env.TRACE_DEPRECATION || \"\";\n    // namespace traced\n    return containsNamespace(str1, namespace1);\n}\n/**\n * Display deprecation message.\n */ function log(message1, site1) {\n    var haslisteners1 = eventListenerCount(process, \"deprecation\") !== 0;\n    // abort early if no destination\n    if (!haslisteners1 && this._ignored) {\n        return;\n    }\n    var caller1;\n    var callFile1;\n    var callSite1;\n    var depSite1;\n    var i1 = 0;\n    var seen1 = false;\n    var stack1 = getStack();\n    var file1 = this._file;\n    if (site1) {\n        // provided site\n        depSite1 = site1;\n        callSite1 = callSiteLocation(stack1[1]);\n        callSite1.name = depSite1.name;\n        file1 = callSite1[0];\n    } else {\n        // get call site\n        i1 = 2;\n        depSite1 = callSiteLocation(stack1[i1]);\n        callSite1 = depSite1;\n    }\n    // get caller of deprecated thing in relation to file\n    for(; i1 < stack1.length; i1++){\n        caller1 = callSiteLocation(stack1[i1]);\n        callFile1 = caller1[0];\n        if (callFile1 === file1) {\n            seen1 = true;\n        } else if (callFile1 === this._file) {\n            file1 = this._file;\n        } else if (seen1) {\n            break;\n        }\n    }\n    var key1 = caller1 ? depSite1.join(\":\") + \"__\" + caller1.join(\":\") : undefined;\n    if (key1 !== undefined && key1 in this._warned) {\n        // already warned\n        return;\n    }\n    this._warned[key1] = true;\n    // generate automatic message from call site\n    var msg1 = message1;\n    if (!msg1) {\n        msg1 = callSite1 === depSite1 || !callSite1.name ? defaultMessage(depSite1) : defaultMessage(callSite1);\n    }\n    // emit deprecation if listeners exist\n    if (haslisteners1) {\n        var err1 = DeprecationError(this._namespace, msg1, stack1.slice(i1));\n        process.emit(\"deprecation\", err1);\n        return;\n    }\n    // format and write message\n    var format1 = process.stderr.isTTY ? formatColor : formatPlain;\n    var output1 = format1.call(this, msg1, caller1, stack1.slice(i1));\n    process.stderr.write(output1 + \"\\n\", \"utf8\");\n}\n/**\n * Get call site location as array.\n */ function callSiteLocation(callSite1) {\n    var file1 = callSite1.getFileName() || \"<anonymous>\";\n    var line1 = callSite1.getLineNumber();\n    var colm1 = callSite1.getColumnNumber();\n    if (callSite1.isEval()) {\n        file1 = callSite1.getEvalOrigin() + \", \" + file1;\n    }\n    var site1 = [\n        file1,\n        line1,\n        colm1\n    ];\n    site1.callSite = callSite1;\n    site1.name = callSite1.getFunctionName();\n    return site1;\n}\n/**\n * Generate a default message from the site.\n */ function defaultMessage(site1) {\n    var callSite1 = site1.callSite;\n    var funcName1 = site1.name;\n    // make useful anonymous name\n    if (!funcName1) {\n        funcName1 = \"<anonymous@\" + formatLocation(site1) + \">\";\n    }\n    var context1 = callSite1.getThis();\n    var typeName1 = context1 && callSite1.getTypeName();\n    // ignore useless type name\n    if (typeName1 === \"Object\") {\n        typeName1 = undefined;\n    }\n    // make useful type name\n    if (typeName1 === \"Function\") {\n        typeName1 = context1.name || typeName1;\n    }\n    return typeName1 && callSite1.getMethodName() ? typeName1 + \".\" + funcName1 : funcName1;\n}\n/**\n * Format deprecation message without color.\n */ function formatPlain(msg1, caller1, stack1) {\n    var timestamp1 = new Date().toUTCString();\n    var formatted1 = timestamp1 + \" \" + this._namespace + \" deprecated \" + msg1;\n    // add stack trace\n    if (this._traced) {\n        for(var i1 = 0; i1 < stack1.length; i1++){\n            formatted1 += \"\\n    at \" + callSiteToString(stack1[i1]);\n        }\n        return formatted1;\n    }\n    if (caller1) {\n        formatted1 += \" at \" + formatLocation(caller1);\n    }\n    return formatted1;\n}\n/**\n * Format deprecation message with color.\n */ function formatColor(msg1, caller1, stack1) {\n    var formatted1 = \"\\x1b[36;1m\" + this._namespace + \"\\x1b[22;39m\" + // bold cyan\n    \" \\x1b[33;1mdeprecated\\x1b[22;39m\" + // bold yellow\n    \" \\x1b[0m\" + msg1 + \"\\x1b[39m\" // reset\n    ;\n    // add stack trace\n    if (this._traced) {\n        for(var i1 = 0; i1 < stack1.length; i1++){\n            formatted1 += \"\\n    \\x1b[36mat \" + callSiteToString(stack1[i1]) + \"\\x1b[39m\" // cyan\n            ;\n        }\n        return formatted1;\n    }\n    if (caller1) {\n        formatted1 += \" \\x1b[36m\" + formatLocation(caller1) + \"\\x1b[39m\" // cyan\n        ;\n    }\n    return formatted1;\n}\n/**\n * Format call site location.\n */ function formatLocation(callSite1) {\n    return relative(basePath, callSite1[0]) + \":\" + callSite1[1] + \":\" + callSite1[2];\n}\n/**\n * Get the stack as array of call sites.\n */ function getStack() {\n    var limit1 = Error.stackTraceLimit;\n    var obj1 = {};\n    var prep1 = Error.prepareStackTrace;\n    Error.prepareStackTrace = prepareObjectStackTrace;\n    Error.stackTraceLimit = Math.max(10, limit1);\n    // capture the stack\n    Error.captureStackTrace(obj1);\n    // slice this function off the top\n    var stack1 = obj1.stack.slice(1);\n    Error.prepareStackTrace = prep1;\n    Error.stackTraceLimit = limit1;\n    return stack1;\n}\n/**\n * Capture call site stack from v8.\n */ function prepareObjectStackTrace(obj1, stack1) {\n    return stack1;\n}\n/**\n * Return a wrapped function in a deprecation message.\n */ function wrapfunction(fn, message) {\n    if (typeof fn !== \"function\") {\n        throw new TypeError(\"argument fn must be a function\");\n    }\n    var args = createArgumentsString(fn.length);\n    var deprecate = this // eslint-disable-line no-unused-vars\n    ;\n    var stack = getStack();\n    var site = callSiteLocation(stack[1]);\n    site.name = fn.name;\n    // eslint-disable-next-line no-eval\n    var deprecatedfn = eval(\"(function (\" + args + \") {\\n\" + '\"use strict\"\\n' + \"log.call(deprecate, message, site)\\n\" + \"return fn.apply(this, arguments)\\n\" + \"})\");\n    return deprecatedfn;\n}\n/**\n * Wrap property in a deprecation message.\n */ function wrapproperty(obj1, prop1, message1) {\n    if (!obj1 || typeof obj1 !== \"object\" && typeof obj1 !== \"function\") {\n        throw new TypeError(\"argument obj must be object\");\n    }\n    var descriptor1 = Object.getOwnPropertyDescriptor(obj1, prop1);\n    if (!descriptor1) {\n        throw new TypeError(\"must call property on owner object\");\n    }\n    if (!descriptor1.configurable) {\n        throw new TypeError(\"property must be configurable\");\n    }\n    var deprecate1 = this;\n    var stack1 = getStack();\n    var site1 = callSiteLocation(stack1[1]);\n    // set site name\n    site1.name = prop1;\n    // convert data descriptor\n    if (\"value\" in descriptor1) {\n        descriptor1 = convertDataDescriptorToAccessor(obj1, prop1, message1);\n    }\n    var get1 = descriptor1.get;\n    var set1 = descriptor1.set;\n    // wrap getter\n    if (typeof get1 === \"function\") {\n        descriptor1.get = function getter1() {\n            log.call(deprecate1, message1, site1);\n            return get1.apply(this, arguments);\n        };\n    }\n    // wrap setter\n    if (typeof set1 === \"function\") {\n        descriptor1.set = function setter1() {\n            log.call(deprecate1, message1, site1);\n            return set1.apply(this, arguments);\n        };\n    }\n    Object.defineProperty(obj1, prop1, descriptor1);\n}\n/**\n * Create DeprecationError for deprecation\n */ function DeprecationError(namespace1, message1, stack1) {\n    var error1 = new Error();\n    var stackString1;\n    Object.defineProperty(error1, \"constructor\", {\n        value: DeprecationError\n    });\n    Object.defineProperty(error1, \"message\", {\n        configurable: true,\n        enumerable: false,\n        value: message1,\n        writable: true\n    });\n    Object.defineProperty(error1, \"name\", {\n        enumerable: false,\n        configurable: true,\n        value: \"DeprecationError\",\n        writable: true\n    });\n    Object.defineProperty(error1, \"namespace\", {\n        configurable: true,\n        enumerable: false,\n        value: namespace1,\n        writable: true\n    });\n    Object.defineProperty(error1, \"stack\", {\n        configurable: true,\n        enumerable: false,\n        get: function() {\n            if (stackString1 !== undefined) {\n                return stackString1;\n            }\n            // prepare stack trace\n            return stackString1 = createStackString.call(this, stack1);\n        },\n        set: function setter1(val1) {\n            stackString1 = val1;\n        }\n    });\n    return error1;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/http-errors/node_modules/depd/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/http-errors/node_modules/depd/lib/compat/callsite-tostring.js":
/*!************************************************************************************!*\
  !*** ./node_modules/http-errors/node_modules/depd/lib/compat/callsite-tostring.js ***!
  \************************************************************************************/
/***/ ((module) => {

"use strict";
eval("/*!\n * depd\n * Copyright(c) 2014 Douglas Christopher Wilson\n * MIT Licensed\n */ \n/**\n * Module exports.\n */ module.exports = callSiteToString;\n/**\n * Format a CallSite file location to a string.\n */ function callSiteFileLocation(callSite) {\n    var fileName;\n    var fileLocation = \"\";\n    if (callSite.isNative()) {\n        fileLocation = \"native\";\n    } else if (callSite.isEval()) {\n        fileName = callSite.getScriptNameOrSourceURL();\n        if (!fileName) {\n            fileLocation = callSite.getEvalOrigin();\n        }\n    } else {\n        fileName = callSite.getFileName();\n    }\n    if (fileName) {\n        fileLocation += fileName;\n        var lineNumber = callSite.getLineNumber();\n        if (lineNumber != null) {\n            fileLocation += \":\" + lineNumber;\n            var columnNumber = callSite.getColumnNumber();\n            if (columnNumber) {\n                fileLocation += \":\" + columnNumber;\n            }\n        }\n    }\n    return fileLocation || \"unknown source\";\n}\n/**\n * Format a CallSite to a string.\n */ function callSiteToString(callSite) {\n    var addSuffix = true;\n    var fileLocation = callSiteFileLocation(callSite);\n    var functionName = callSite.getFunctionName();\n    var isConstructor = callSite.isConstructor();\n    var isMethodCall = !(callSite.isToplevel() || isConstructor);\n    var line = \"\";\n    if (isMethodCall) {\n        var methodName = callSite.getMethodName();\n        var typeName = getConstructorName(callSite);\n        if (functionName) {\n            if (typeName && functionName.indexOf(typeName) !== 0) {\n                line += typeName + \".\";\n            }\n            line += functionName;\n            if (methodName && functionName.lastIndexOf(\".\" + methodName) !== functionName.length - methodName.length - 1) {\n                line += \" [as \" + methodName + \"]\";\n            }\n        } else {\n            line += typeName + \".\" + (methodName || \"<anonymous>\");\n        }\n    } else if (isConstructor) {\n        line += \"new \" + (functionName || \"<anonymous>\");\n    } else if (functionName) {\n        line += functionName;\n    } else {\n        addSuffix = false;\n        line += fileLocation;\n    }\n    if (addSuffix) {\n        line += \" (\" + fileLocation + \")\";\n    }\n    return line;\n}\n/**\n * Get constructor name of reviver.\n */ function getConstructorName(obj) {\n    var receiver = obj.receiver;\n    return receiver.constructor && receiver.constructor.name || null;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaHR0cC1lcnJvcnMvbm9kZV9tb2R1bGVzL2RlcGQvbGliL2NvbXBhdC9jYWxsc2l0ZS10b3N0cmluZy5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7OztDQUlDLEdBRUQ7QUFFQTs7Q0FFQyxHQUVEQSxPQUFPQyxPQUFPLEdBQUdDO0FBRWpCOztDQUVDLEdBRUQsU0FBU0MscUJBQXNCQyxRQUFRO0lBQ3JDLElBQUlDO0lBQ0osSUFBSUMsZUFBZTtJQUVuQixJQUFJRixTQUFTRyxRQUFRLElBQUk7UUFDdkJELGVBQWU7SUFDakIsT0FBTyxJQUFJRixTQUFTSSxNQUFNLElBQUk7UUFDNUJILFdBQVdELFNBQVNLLHdCQUF3QjtRQUM1QyxJQUFJLENBQUNKLFVBQVU7WUFDYkMsZUFBZUYsU0FBU00sYUFBYTtRQUN2QztJQUNGLE9BQU87UUFDTEwsV0FBV0QsU0FBU08sV0FBVztJQUNqQztJQUVBLElBQUlOLFVBQVU7UUFDWkMsZ0JBQWdCRDtRQUVoQixJQUFJTyxhQUFhUixTQUFTUyxhQUFhO1FBQ3ZDLElBQUlELGNBQWMsTUFBTTtZQUN0Qk4sZ0JBQWdCLE1BQU1NO1lBRXRCLElBQUlFLGVBQWVWLFNBQVNXLGVBQWU7WUFDM0MsSUFBSUQsY0FBYztnQkFDaEJSLGdCQUFnQixNQUFNUTtZQUN4QjtRQUNGO0lBQ0Y7SUFFQSxPQUFPUixnQkFBZ0I7QUFDekI7QUFFQTs7Q0FFQyxHQUVELFNBQVNKLGlCQUFrQkUsUUFBUTtJQUNqQyxJQUFJWSxZQUFZO0lBQ2hCLElBQUlWLGVBQWVILHFCQUFxQkM7SUFDeEMsSUFBSWEsZUFBZWIsU0FBU2MsZUFBZTtJQUMzQyxJQUFJQyxnQkFBZ0JmLFNBQVNlLGFBQWE7SUFDMUMsSUFBSUMsZUFBZSxDQUFFaEIsQ0FBQUEsU0FBU2lCLFVBQVUsTUFBTUYsYUFBWTtJQUMxRCxJQUFJRyxPQUFPO0lBRVgsSUFBSUYsY0FBYztRQUNoQixJQUFJRyxhQUFhbkIsU0FBU29CLGFBQWE7UUFDdkMsSUFBSUMsV0FBV0MsbUJBQW1CdEI7UUFFbEMsSUFBSWEsY0FBYztZQUNoQixJQUFJUSxZQUFZUixhQUFhVSxPQUFPLENBQUNGLGNBQWMsR0FBRztnQkFDcERILFFBQVFHLFdBQVc7WUFDckI7WUFFQUgsUUFBUUw7WUFFUixJQUFJTSxjQUFjTixhQUFhVyxXQUFXLENBQUMsTUFBTUwsZ0JBQWdCTixhQUFhWSxNQUFNLEdBQUdOLFdBQVdNLE1BQU0sR0FBRyxHQUFHO2dCQUM1R1AsUUFBUSxVQUFVQyxhQUFhO1lBQ2pDO1FBQ0YsT0FBTztZQUNMRCxRQUFRRyxXQUFXLE1BQU9GLENBQUFBLGNBQWMsYUFBWTtRQUN0RDtJQUNGLE9BQU8sSUFBSUosZUFBZTtRQUN4QkcsUUFBUSxTQUFVTCxDQUFBQSxnQkFBZ0IsYUFBWTtJQUNoRCxPQUFPLElBQUlBLGNBQWM7UUFDdkJLLFFBQVFMO0lBQ1YsT0FBTztRQUNMRCxZQUFZO1FBQ1pNLFFBQVFoQjtJQUNWO0lBRUEsSUFBSVUsV0FBVztRQUNiTSxRQUFRLE9BQU9oQixlQUFlO0lBQ2hDO0lBRUEsT0FBT2dCO0FBQ1Q7QUFFQTs7Q0FFQyxHQUVELFNBQVNJLG1CQUFvQkksR0FBRztJQUM5QixJQUFJQyxXQUFXRCxJQUFJQyxRQUFRO0lBQzNCLE9BQU8sU0FBVUMsV0FBVyxJQUFJRCxTQUFTQyxXQUFXLENBQUNDLElBQUksSUFBSztBQUNoRSIsInNvdXJjZXMiOlsid2VicGFjazovL2ktYW0tbmVhcmJ5Ly4vbm9kZV9tb2R1bGVzL2h0dHAtZXJyb3JzL25vZGVfbW9kdWxlcy9kZXBkL2xpYi9jb21wYXQvY2FsbHNpdGUtdG9zdHJpbmcuanM/ODQ5MiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIGRlcGRcbiAqIENvcHlyaWdodChjKSAyMDE0IERvdWdsYXMgQ2hyaXN0b3BoZXIgV2lsc29uXG4gKiBNSVQgTGljZW5zZWRcbiAqL1xuXG4ndXNlIHN0cmljdCdcblxuLyoqXG4gKiBNb2R1bGUgZXhwb3J0cy5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGNhbGxTaXRlVG9TdHJpbmdcblxuLyoqXG4gKiBGb3JtYXQgYSBDYWxsU2l0ZSBmaWxlIGxvY2F0aW9uIHRvIGEgc3RyaW5nLlxuICovXG5cbmZ1bmN0aW9uIGNhbGxTaXRlRmlsZUxvY2F0aW9uIChjYWxsU2l0ZSkge1xuICB2YXIgZmlsZU5hbWVcbiAgdmFyIGZpbGVMb2NhdGlvbiA9ICcnXG5cbiAgaWYgKGNhbGxTaXRlLmlzTmF0aXZlKCkpIHtcbiAgICBmaWxlTG9jYXRpb24gPSAnbmF0aXZlJ1xuICB9IGVsc2UgaWYgKGNhbGxTaXRlLmlzRXZhbCgpKSB7XG4gICAgZmlsZU5hbWUgPSBjYWxsU2l0ZS5nZXRTY3JpcHROYW1lT3JTb3VyY2VVUkwoKVxuICAgIGlmICghZmlsZU5hbWUpIHtcbiAgICAgIGZpbGVMb2NhdGlvbiA9IGNhbGxTaXRlLmdldEV2YWxPcmlnaW4oKVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBmaWxlTmFtZSA9IGNhbGxTaXRlLmdldEZpbGVOYW1lKClcbiAgfVxuXG4gIGlmIChmaWxlTmFtZSkge1xuICAgIGZpbGVMb2NhdGlvbiArPSBmaWxlTmFtZVxuXG4gICAgdmFyIGxpbmVOdW1iZXIgPSBjYWxsU2l0ZS5nZXRMaW5lTnVtYmVyKClcbiAgICBpZiAobGluZU51bWJlciAhPSBudWxsKSB7XG4gICAgICBmaWxlTG9jYXRpb24gKz0gJzonICsgbGluZU51bWJlclxuXG4gICAgICB2YXIgY29sdW1uTnVtYmVyID0gY2FsbFNpdGUuZ2V0Q29sdW1uTnVtYmVyKClcbiAgICAgIGlmIChjb2x1bW5OdW1iZXIpIHtcbiAgICAgICAgZmlsZUxvY2F0aW9uICs9ICc6JyArIGNvbHVtbk51bWJlclxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmaWxlTG9jYXRpb24gfHwgJ3Vua25vd24gc291cmNlJ1xufVxuXG4vKipcbiAqIEZvcm1hdCBhIENhbGxTaXRlIHRvIGEgc3RyaW5nLlxuICovXG5cbmZ1bmN0aW9uIGNhbGxTaXRlVG9TdHJpbmcgKGNhbGxTaXRlKSB7XG4gIHZhciBhZGRTdWZmaXggPSB0cnVlXG4gIHZhciBmaWxlTG9jYXRpb24gPSBjYWxsU2l0ZUZpbGVMb2NhdGlvbihjYWxsU2l0ZSlcbiAgdmFyIGZ1bmN0aW9uTmFtZSA9IGNhbGxTaXRlLmdldEZ1bmN0aW9uTmFtZSgpXG4gIHZhciBpc0NvbnN0cnVjdG9yID0gY2FsbFNpdGUuaXNDb25zdHJ1Y3RvcigpXG4gIHZhciBpc01ldGhvZENhbGwgPSAhKGNhbGxTaXRlLmlzVG9wbGV2ZWwoKSB8fCBpc0NvbnN0cnVjdG9yKVxuICB2YXIgbGluZSA9ICcnXG5cbiAgaWYgKGlzTWV0aG9kQ2FsbCkge1xuICAgIHZhciBtZXRob2ROYW1lID0gY2FsbFNpdGUuZ2V0TWV0aG9kTmFtZSgpXG4gICAgdmFyIHR5cGVOYW1lID0gZ2V0Q29uc3RydWN0b3JOYW1lKGNhbGxTaXRlKVxuXG4gICAgaWYgKGZ1bmN0aW9uTmFtZSkge1xuICAgICAgaWYgKHR5cGVOYW1lICYmIGZ1bmN0aW9uTmFtZS5pbmRleE9mKHR5cGVOYW1lKSAhPT0gMCkge1xuICAgICAgICBsaW5lICs9IHR5cGVOYW1lICsgJy4nXG4gICAgICB9XG5cbiAgICAgIGxpbmUgKz0gZnVuY3Rpb25OYW1lXG5cbiAgICAgIGlmIChtZXRob2ROYW1lICYmIGZ1bmN0aW9uTmFtZS5sYXN0SW5kZXhPZignLicgKyBtZXRob2ROYW1lKSAhPT0gZnVuY3Rpb25OYW1lLmxlbmd0aCAtIG1ldGhvZE5hbWUubGVuZ3RoIC0gMSkge1xuICAgICAgICBsaW5lICs9ICcgW2FzICcgKyBtZXRob2ROYW1lICsgJ10nXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGxpbmUgKz0gdHlwZU5hbWUgKyAnLicgKyAobWV0aG9kTmFtZSB8fCAnPGFub255bW91cz4nKVxuICAgIH1cbiAgfSBlbHNlIGlmIChpc0NvbnN0cnVjdG9yKSB7XG4gICAgbGluZSArPSAnbmV3ICcgKyAoZnVuY3Rpb25OYW1lIHx8ICc8YW5vbnltb3VzPicpXG4gIH0gZWxzZSBpZiAoZnVuY3Rpb25OYW1lKSB7XG4gICAgbGluZSArPSBmdW5jdGlvbk5hbWVcbiAgfSBlbHNlIHtcbiAgICBhZGRTdWZmaXggPSBmYWxzZVxuICAgIGxpbmUgKz0gZmlsZUxvY2F0aW9uXG4gIH1cblxuICBpZiAoYWRkU3VmZml4KSB7XG4gICAgbGluZSArPSAnICgnICsgZmlsZUxvY2F0aW9uICsgJyknXG4gIH1cblxuICByZXR1cm4gbGluZVxufVxuXG4vKipcbiAqIEdldCBjb25zdHJ1Y3RvciBuYW1lIG9mIHJldml2ZXIuXG4gKi9cblxuZnVuY3Rpb24gZ2V0Q29uc3RydWN0b3JOYW1lIChvYmopIHtcbiAgdmFyIHJlY2VpdmVyID0gb2JqLnJlY2VpdmVyXG4gIHJldHVybiAocmVjZWl2ZXIuY29uc3RydWN0b3IgJiYgcmVjZWl2ZXIuY29uc3RydWN0b3IubmFtZSkgfHwgbnVsbFxufVxuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJjYWxsU2l0ZVRvU3RyaW5nIiwiY2FsbFNpdGVGaWxlTG9jYXRpb24iLCJjYWxsU2l0ZSIsImZpbGVOYW1lIiwiZmlsZUxvY2F0aW9uIiwiaXNOYXRpdmUiLCJpc0V2YWwiLCJnZXRTY3JpcHROYW1lT3JTb3VyY2VVUkwiLCJnZXRFdmFsT3JpZ2luIiwiZ2V0RmlsZU5hbWUiLCJsaW5lTnVtYmVyIiwiZ2V0TGluZU51bWJlciIsImNvbHVtbk51bWJlciIsImdldENvbHVtbk51bWJlciIsImFkZFN1ZmZpeCIsImZ1bmN0aW9uTmFtZSIsImdldEZ1bmN0aW9uTmFtZSIsImlzQ29uc3RydWN0b3IiLCJpc01ldGhvZENhbGwiLCJpc1RvcGxldmVsIiwibGluZSIsIm1ldGhvZE5hbWUiLCJnZXRNZXRob2ROYW1lIiwidHlwZU5hbWUiLCJnZXRDb25zdHJ1Y3Rvck5hbWUiLCJpbmRleE9mIiwibGFzdEluZGV4T2YiLCJsZW5ndGgiLCJvYmoiLCJyZWNlaXZlciIsImNvbnN0cnVjdG9yIiwibmFtZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/http-errors/node_modules/depd/lib/compat/callsite-tostring.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/http-errors/node_modules/depd/lib/compat/event-listener-count.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/http-errors/node_modules/depd/lib/compat/event-listener-count.js ***!
  \***************************************************************************************/
/***/ ((module) => {

"use strict";
eval("/*!\n * depd\n * Copyright(c) 2015 Douglas Christopher Wilson\n * MIT Licensed\n */ \n/**\n * Module exports.\n * @public\n */ module.exports = eventListenerCount;\n/**\n * Get the count of listeners on an event emitter of a specific type.\n */ function eventListenerCount(emitter, type) {\n    return emitter.listeners(type).length;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaHR0cC1lcnJvcnMvbm9kZV9tb2R1bGVzL2RlcGQvbGliL2NvbXBhdC9ldmVudC1saXN0ZW5lci1jb3VudC5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7OztDQUlDLEdBRUQ7QUFFQTs7O0NBR0MsR0FFREEsT0FBT0MsT0FBTyxHQUFHQztBQUVqQjs7Q0FFQyxHQUVELFNBQVNBLG1CQUFvQkMsT0FBTyxFQUFFQyxJQUFJO0lBQ3hDLE9BQU9ELFFBQVFFLFNBQVMsQ0FBQ0QsTUFBTUUsTUFBTTtBQUN2QyIsInNvdXJjZXMiOlsid2VicGFjazovL2ktYW0tbmVhcmJ5Ly4vbm9kZV9tb2R1bGVzL2h0dHAtZXJyb3JzL25vZGVfbW9kdWxlcy9kZXBkL2xpYi9jb21wYXQvZXZlbnQtbGlzdGVuZXItY291bnQuanM/M2Q3ZiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIGRlcGRcbiAqIENvcHlyaWdodChjKSAyMDE1IERvdWdsYXMgQ2hyaXN0b3BoZXIgV2lsc29uXG4gKiBNSVQgTGljZW5zZWRcbiAqL1xuXG4ndXNlIHN0cmljdCdcblxuLyoqXG4gKiBNb2R1bGUgZXhwb3J0cy5cbiAqIEBwdWJsaWNcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGV2ZW50TGlzdGVuZXJDb3VudFxuXG4vKipcbiAqIEdldCB0aGUgY291bnQgb2YgbGlzdGVuZXJzIG9uIGFuIGV2ZW50IGVtaXR0ZXIgb2YgYSBzcGVjaWZpYyB0eXBlLlxuICovXG5cbmZ1bmN0aW9uIGV2ZW50TGlzdGVuZXJDb3VudCAoZW1pdHRlciwgdHlwZSkge1xuICByZXR1cm4gZW1pdHRlci5saXN0ZW5lcnModHlwZSkubGVuZ3RoXG59XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImV2ZW50TGlzdGVuZXJDb3VudCIsImVtaXR0ZXIiLCJ0eXBlIiwibGlzdGVuZXJzIiwibGVuZ3RoIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/http-errors/node_modules/depd/lib/compat/event-listener-count.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/http-errors/node_modules/depd/lib/compat/index.js":
/*!************************************************************************!*\
  !*** ./node_modules/http-errors/node_modules/depd/lib/compat/index.js ***!
  \************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/*!\n * depd\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\n * MIT Licensed\n */ \n/**\n * Module dependencies.\n * @private\n */ var EventEmitter = (__webpack_require__(/*! events */ \"events\").EventEmitter);\n/**\n * Module exports.\n * @public\n */ lazyProperty(module.exports, \"callSiteToString\", function callSiteToString() {\n    var limit = Error.stackTraceLimit;\n    var obj = {};\n    var prep = Error.prepareStackTrace;\n    function prepareObjectStackTrace(obj, stack) {\n        return stack;\n    }\n    Error.prepareStackTrace = prepareObjectStackTrace;\n    Error.stackTraceLimit = 2;\n    // capture the stack\n    Error.captureStackTrace(obj);\n    // slice the stack\n    var stack = obj.stack.slice();\n    Error.prepareStackTrace = prep;\n    Error.stackTraceLimit = limit;\n    return stack[0].toString ? toString : __webpack_require__(/*! ./callsite-tostring */ \"(ssr)/./node_modules/http-errors/node_modules/depd/lib/compat/callsite-tostring.js\");\n});\nlazyProperty(module.exports, \"eventListenerCount\", function eventListenerCount() {\n    return EventEmitter.listenerCount || __webpack_require__(/*! ./event-listener-count */ \"(ssr)/./node_modules/http-errors/node_modules/depd/lib/compat/event-listener-count.js\");\n});\n/**\n * Define a lazy property.\n */ function lazyProperty(obj, prop, getter) {\n    function get() {\n        var val = getter();\n        Object.defineProperty(obj, prop, {\n            configurable: true,\n            enumerable: true,\n            value: val\n        });\n        return val;\n    }\n    Object.defineProperty(obj, prop, {\n        configurable: true,\n        enumerable: true,\n        get: get\n    });\n}\n/**\n * Call toString() on the obj\n */ function toString(obj) {\n    return obj.toString();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaHR0cC1lcnJvcnMvbm9kZV9tb2R1bGVzL2RlcGQvbGliL2NvbXBhdC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7OztDQUlDLEdBRUQ7QUFFQTs7O0NBR0MsR0FFRCxJQUFJQSxlQUFlQywwREFBOEI7QUFFakQ7OztDQUdDLEdBRURDLGFBQWFDLE9BQU9DLE9BQU8sRUFBRSxvQkFBb0IsU0FBU0M7SUFDeEQsSUFBSUMsUUFBUUMsTUFBTUMsZUFBZTtJQUNqQyxJQUFJQyxNQUFNLENBQUM7SUFDWCxJQUFJQyxPQUFPSCxNQUFNSSxpQkFBaUI7SUFFbEMsU0FBU0Msd0JBQXlCSCxHQUFHLEVBQUVJLEtBQUs7UUFDMUMsT0FBT0E7SUFDVDtJQUVBTixNQUFNSSxpQkFBaUIsR0FBR0M7SUFDMUJMLE1BQU1DLGVBQWUsR0FBRztJQUV4QixvQkFBb0I7SUFDcEJELE1BQU1PLGlCQUFpQixDQUFDTDtJQUV4QixrQkFBa0I7SUFDbEIsSUFBSUksUUFBUUosSUFBSUksS0FBSyxDQUFDRSxLQUFLO0lBRTNCUixNQUFNSSxpQkFBaUIsR0FBR0Q7SUFDMUJILE1BQU1DLGVBQWUsR0FBR0Y7SUFFeEIsT0FBT08sS0FBSyxDQUFDLEVBQUUsQ0FBQ0csUUFBUSxHQUFHQSxXQUFXZixtQkFBT0EsQ0FBQztBQUNoRDtBQUVBQyxhQUFhQyxPQUFPQyxPQUFPLEVBQUUsc0JBQXNCLFNBQVNhO0lBQzFELE9BQU9qQixhQUFha0IsYUFBYSxJQUFJakIsbUJBQU9BLENBQUM7QUFDL0M7QUFFQTs7Q0FFQyxHQUVELFNBQVNDLGFBQWNPLEdBQUcsRUFBRVUsSUFBSSxFQUFFQyxNQUFNO0lBQ3RDLFNBQVNDO1FBQ1AsSUFBSUMsTUFBTUY7UUFFVkcsT0FBT0MsY0FBYyxDQUFDZixLQUFLVSxNQUFNO1lBQy9CTSxjQUFjO1lBQ2RDLFlBQVk7WUFDWkMsT0FBT0w7UUFDVDtRQUVBLE9BQU9BO0lBQ1Q7SUFFQUMsT0FBT0MsY0FBYyxDQUFDZixLQUFLVSxNQUFNO1FBQy9CTSxjQUFjO1FBQ2RDLFlBQVk7UUFDWkwsS0FBS0E7SUFDUDtBQUNGO0FBRUE7O0NBRUMsR0FFRCxTQUFTTCxTQUFVUCxHQUFHO0lBQ3BCLE9BQU9BLElBQUlPLFFBQVE7QUFDckIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pLWFtLW5lYXJieS8uL25vZGVfbW9kdWxlcy9odHRwLWVycm9ycy9ub2RlX21vZHVsZXMvZGVwZC9saWIvY29tcGF0L2luZGV4LmpzPzlmYzciXSwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBkZXBkXG4gKiBDb3B5cmlnaHQoYykgMjAxNC0yMDE1IERvdWdsYXMgQ2hyaXN0b3BoZXIgV2lsc29uXG4gKiBNSVQgTGljZW5zZWRcbiAqL1xuXG4ndXNlIHN0cmljdCdcblxuLyoqXG4gKiBNb2R1bGUgZGVwZW5kZW5jaWVzLlxuICogQHByaXZhdGVcbiAqL1xuXG52YXIgRXZlbnRFbWl0dGVyID0gcmVxdWlyZSgnZXZlbnRzJykuRXZlbnRFbWl0dGVyXG5cbi8qKlxuICogTW9kdWxlIGV4cG9ydHMuXG4gKiBAcHVibGljXG4gKi9cblxubGF6eVByb3BlcnR5KG1vZHVsZS5leHBvcnRzLCAnY2FsbFNpdGVUb1N0cmluZycsIGZ1bmN0aW9uIGNhbGxTaXRlVG9TdHJpbmcgKCkge1xuICB2YXIgbGltaXQgPSBFcnJvci5zdGFja1RyYWNlTGltaXRcbiAgdmFyIG9iaiA9IHt9XG4gIHZhciBwcmVwID0gRXJyb3IucHJlcGFyZVN0YWNrVHJhY2VcblxuICBmdW5jdGlvbiBwcmVwYXJlT2JqZWN0U3RhY2tUcmFjZSAob2JqLCBzdGFjaykge1xuICAgIHJldHVybiBzdGFja1xuICB9XG5cbiAgRXJyb3IucHJlcGFyZVN0YWNrVHJhY2UgPSBwcmVwYXJlT2JqZWN0U3RhY2tUcmFjZVxuICBFcnJvci5zdGFja1RyYWNlTGltaXQgPSAyXG5cbiAgLy8gY2FwdHVyZSB0aGUgc3RhY2tcbiAgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2Uob2JqKVxuXG4gIC8vIHNsaWNlIHRoZSBzdGFja1xuICB2YXIgc3RhY2sgPSBvYmouc3RhY2suc2xpY2UoKVxuXG4gIEVycm9yLnByZXBhcmVTdGFja1RyYWNlID0gcHJlcFxuICBFcnJvci5zdGFja1RyYWNlTGltaXQgPSBsaW1pdFxuXG4gIHJldHVybiBzdGFja1swXS50b1N0cmluZyA/IHRvU3RyaW5nIDogcmVxdWlyZSgnLi9jYWxsc2l0ZS10b3N0cmluZycpXG59KVxuXG5sYXp5UHJvcGVydHkobW9kdWxlLmV4cG9ydHMsICdldmVudExpc3RlbmVyQ291bnQnLCBmdW5jdGlvbiBldmVudExpc3RlbmVyQ291bnQgKCkge1xuICByZXR1cm4gRXZlbnRFbWl0dGVyLmxpc3RlbmVyQ291bnQgfHwgcmVxdWlyZSgnLi9ldmVudC1saXN0ZW5lci1jb3VudCcpXG59KVxuXG4vKipcbiAqIERlZmluZSBhIGxhenkgcHJvcGVydHkuXG4gKi9cblxuZnVuY3Rpb24gbGF6eVByb3BlcnR5IChvYmosIHByb3AsIGdldHRlcikge1xuICBmdW5jdGlvbiBnZXQgKCkge1xuICAgIHZhciB2YWwgPSBnZXR0ZXIoKVxuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwgcHJvcCwge1xuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIHZhbHVlOiB2YWxcbiAgICB9KVxuXG4gICAgcmV0dXJuIHZhbFxuICB9XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwgcHJvcCwge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZ2V0XG4gIH0pXG59XG5cbi8qKlxuICogQ2FsbCB0b1N0cmluZygpIG9uIHRoZSBvYmpcbiAqL1xuXG5mdW5jdGlvbiB0b1N0cmluZyAob2JqKSB7XG4gIHJldHVybiBvYmoudG9TdHJpbmcoKVxufVxuIl0sIm5hbWVzIjpbIkV2ZW50RW1pdHRlciIsInJlcXVpcmUiLCJsYXp5UHJvcGVydHkiLCJtb2R1bGUiLCJleHBvcnRzIiwiY2FsbFNpdGVUb1N0cmluZyIsImxpbWl0IiwiRXJyb3IiLCJzdGFja1RyYWNlTGltaXQiLCJvYmoiLCJwcmVwIiwicHJlcGFyZVN0YWNrVHJhY2UiLCJwcmVwYXJlT2JqZWN0U3RhY2tUcmFjZSIsInN0YWNrIiwiY2FwdHVyZVN0YWNrVHJhY2UiLCJzbGljZSIsInRvU3RyaW5nIiwiZXZlbnRMaXN0ZW5lckNvdW50IiwibGlzdGVuZXJDb3VudCIsInByb3AiLCJnZXR0ZXIiLCJnZXQiLCJ2YWwiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImNvbmZpZ3VyYWJsZSIsImVudW1lcmFibGUiLCJ2YWx1ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/http-errors/node_modules/depd/lib/compat/index.js\n");

/***/ })

};
;