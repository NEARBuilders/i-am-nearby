"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@near-js";
exports.ids = ["vendor-chunks/@near-js"];
exports.modules = {

/***/ "(ssr)/./node_modules/@near-js/accounts/lib/account.js":
/*!*******************************************************!*\
  !*** ./node_modules/@near-js/accounts/lib/account.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n        });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = this && this.__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.Account = void 0;\nconst crypto_1 = __webpack_require__(/*! @near-js/crypto */ \"(ssr)/./node_modules/@near-js/crypto/lib/index.js\");\nconst providers_1 = __webpack_require__(/*! @near-js/providers */ \"(ssr)/./node_modules/@near-js/providers/lib/index.js\");\nconst transactions_1 = __webpack_require__(/*! @near-js/transactions */ \"(ssr)/./node_modules/@near-js/transactions/lib/index.js\");\nconst types_1 = __webpack_require__(/*! @near-js/types */ \"(ssr)/./node_modules/@near-js/types/lib/index.js\");\nconst utils_1 = __webpack_require__(/*! @near-js/utils */ \"(ssr)/./node_modules/@near-js/utils/lib/index.js\");\nconst bn_js_1 = __importDefault(__webpack_require__(/*! bn.js */ \"(ssr)/./node_modules/bn.js/lib/bn.js\"));\nconst borsh_1 = __webpack_require__(/*! borsh */ \"(ssr)/./node_modules/borsh/lib/index.js\");\nconst { addKey, createAccount, deleteAccount, deleteKey, deployContract, fullAccessKey, functionCall, functionCallAccessKey, stake, transfer } = transactions_1.actionCreators;\n// Default number of retries with different nonce before giving up on a transaction.\nconst TX_NONCE_RETRY_NUMBER = 12;\n// Default wait until next retry in millis.\nconst TX_NONCE_RETRY_WAIT = 500;\n// Exponential back off for waiting to retry.\nconst TX_NONCE_RETRY_WAIT_BACKOFF = 1.5;\nfunction parseJsonFromRawResponse(response) {\n    return JSON.parse(Buffer.from(response).toString());\n}\nfunction bytesJsonStringify(input) {\n    return Buffer.from(JSON.stringify(input));\n}\n/**\n * This class provides common account related RPC calls including signing transactions with a {@link utils/key_pair!KeyPair}.\n *\n * @hint Use {@link walletAccount!WalletConnection} in the browser to redirect to [NEAR Wallet](https://wallet.near.org/) for Account/key management using the {@link key_stores/browser_local_storage_key_store!BrowserLocalStorageKeyStore}.\n * @see [https://docs.near.org/docs/develop/front-end/naj-quick-reference#account](https://docs.near.org/tools/near-api-js/quick-reference#account)\n * @see [Account Spec](https://nomicon.io/DataStructures/Account.html)\n */ class Account {\n    constructor(connection, accountId){\n        /** @hidden */ this.accessKeyByPublicKeyCache = {};\n        this.connection = connection;\n        this.accountId = accountId;\n    }\n    /**\n     * Returns basic NEAR account information via the `view_account` RPC query method\n     * @see [https://docs.near.org/api/rpc/contracts#view-account](https://docs.near.org/api/rpc/contracts#view-account)\n     */ state() {\n        return __awaiter(this, void 0, void 0, function*() {\n            return this.connection.provider.query({\n                request_type: \"view_account\",\n                account_id: this.accountId,\n                finality: \"optimistic\"\n            });\n        });\n    }\n    /**\n     * Create a signed transaction which can be broadcast to the network\n     * @param receiverId NEAR account receiving the transaction\n     * @param actions list of actions to perform as part of the transaction\n     * @see {@link providers/json-rpc-provider!JsonRpcProvider#sendTransaction | JsonRpcProvider.sendTransaction}\n     */ signTransaction(receiverId, actions) {\n        return __awaiter(this, void 0, void 0, function*() {\n            const accessKeyInfo = yield this.findAccessKey(receiverId, actions);\n            if (!accessKeyInfo) {\n                throw new types_1.TypedError(`Can not sign transactions for account ${this.accountId} on network ${this.connection.networkId}, no matching key pair exists for this account`, \"KeyNotFound\");\n            }\n            const { accessKey } = accessKeyInfo;\n            const block = yield this.connection.provider.block({\n                finality: \"final\"\n            });\n            const blockHash = block.header.hash;\n            const nonce = accessKey.nonce.add(new bn_js_1.default(1));\n            return yield (0, transactions_1.signTransaction)(receiverId, nonce, actions, (0, borsh_1.baseDecode)(blockHash), this.connection.signer, this.accountId, this.connection.networkId);\n        });\n    }\n    /**\n     * Sign a transaction to preform a list of actions and broadcast it using the RPC API.\n     * @see {@link providers/json-rpc-provider!JsonRpcProvider#sendTransaction | JsonRpcProvider.sendTransaction}\n     */ signAndSendTransaction({ receiverId, actions, returnError }) {\n        return __awaiter(this, void 0, void 0, function*() {\n            let txHash, signedTx;\n            // TODO: TX_NONCE (different constants for different uses of exponentialBackoff?)\n            const result = yield (0, providers_1.exponentialBackoff)(TX_NONCE_RETRY_WAIT, TX_NONCE_RETRY_NUMBER, TX_NONCE_RETRY_WAIT_BACKOFF, ()=>__awaiter(this, void 0, void 0, function*() {\n                    [txHash, signedTx] = yield this.signTransaction(receiverId, actions);\n                    const publicKey = signedTx.transaction.publicKey;\n                    try {\n                        return yield this.connection.provider.sendTransaction(signedTx);\n                    } catch (error) {\n                        if (error.type === \"InvalidNonce\") {\n                            (0, utils_1.logWarning)(`Retrying transaction ${receiverId}:${(0, borsh_1.baseEncode)(txHash)} with new nonce.`);\n                            delete this.accessKeyByPublicKeyCache[publicKey.toString()];\n                            return null;\n                        }\n                        if (error.type === \"Expired\") {\n                            (0, utils_1.logWarning)(`Retrying transaction ${receiverId}:${(0, borsh_1.baseEncode)(txHash)} due to expired block hash`);\n                            return null;\n                        }\n                        error.context = new types_1.ErrorContext((0, borsh_1.baseEncode)(txHash));\n                        throw error;\n                    }\n                }));\n            if (!result) {\n                // TODO: This should have different code actually, as means \"transaction not submitted for sure\"\n                throw new types_1.TypedError(\"nonce retries exceeded for transaction. This usually means there are too many parallel requests with the same access key.\", \"RetriesExceeded\");\n            }\n            (0, utils_1.printTxOutcomeLogsAndFailures)({\n                contractId: signedTx.transaction.receiverId,\n                outcome: result\n            });\n            // Should be falsy if result.status.Failure is null\n            if (!returnError && typeof result.status === \"object\" && typeof result.status.Failure === \"object\" && result.status.Failure !== null) {\n                // if error data has error_message and error_type properties, we consider that node returned an error in the old format\n                if (result.status.Failure.error_message && result.status.Failure.error_type) {\n                    throw new types_1.TypedError(`Transaction ${result.transaction_outcome.id} failed. ${result.status.Failure.error_message}`, result.status.Failure.error_type);\n                } else {\n                    throw (0, utils_1.parseResultError)(result);\n                }\n            }\n            // TODO: if Tx is Unknown or Started.\n            return result;\n        });\n    }\n    /**\n     * Finds the {@link providers/provider!AccessKeyView} associated with the accounts {@link utils/key_pair!PublicKey} stored in the {@link key_stores/keystore!KeyStore}.\n     *\n     * @todo Find matching access key based on transaction (i.e. receiverId and actions)\n     *\n     * @param receiverId currently unused (see todo)\n     * @param actions currently unused (see todo)\n     * @returns `{ publicKey PublicKey; accessKey: AccessKeyView }`\n     */ // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    findAccessKey(receiverId, actions) {\n        return __awaiter(this, void 0, void 0, function*() {\n            // TODO: Find matching access key based on transaction (i.e. receiverId and actions)\n            const publicKey = yield this.connection.signer.getPublicKey(this.accountId, this.connection.networkId);\n            if (!publicKey) {\n                throw new types_1.TypedError(`no matching key pair found in ${this.connection.signer}`, \"PublicKeyNotFound\");\n            }\n            const cachedAccessKey = this.accessKeyByPublicKeyCache[publicKey.toString()];\n            if (cachedAccessKey !== undefined) {\n                return {\n                    publicKey,\n                    accessKey: cachedAccessKey\n                };\n            }\n            try {\n                const rawAccessKey = yield this.connection.provider.query({\n                    request_type: \"view_access_key\",\n                    account_id: this.accountId,\n                    public_key: publicKey.toString(),\n                    finality: \"optimistic\"\n                });\n                // store nonce as BN to preserve precision on big number\n                const accessKey = Object.assign(Object.assign({}, rawAccessKey), {\n                    nonce: new bn_js_1.default(rawAccessKey.nonce)\n                });\n                // this function can be called multiple times and retrieve the same access key\n                // this checks to see if the access key was already retrieved and cached while\n                // the above network call was in flight. To keep nonce values in line, we return\n                // the cached access key.\n                if (this.accessKeyByPublicKeyCache[publicKey.toString()]) {\n                    return {\n                        publicKey,\n                        accessKey: this.accessKeyByPublicKeyCache[publicKey.toString()]\n                    };\n                }\n                this.accessKeyByPublicKeyCache[publicKey.toString()] = accessKey;\n                return {\n                    publicKey,\n                    accessKey\n                };\n            } catch (e) {\n                if (e.type == \"AccessKeyDoesNotExist\") {\n                    return null;\n                }\n                throw e;\n            }\n        });\n    }\n    /**\n     * Create a new account and deploy a contract to it\n     *\n     * @param contractId NEAR account where the contract is deployed\n     * @param publicKey The public key to add to the created contract account\n     * @param data The compiled contract code\n     * @param amount of NEAR to transfer to the created contract account. Transfer enough to pay for storage https://docs.near.org/docs/concepts/storage-staking\n     */ createAndDeployContract(contractId, publicKey, data, amount) {\n        return __awaiter(this, void 0, void 0, function*() {\n            const accessKey = fullAccessKey();\n            yield this.signAndSendTransaction({\n                receiverId: contractId,\n                actions: [\n                    createAccount(),\n                    transfer(amount),\n                    addKey(crypto_1.PublicKey.from(publicKey), accessKey),\n                    deployContract(data)\n                ]\n            });\n            const contractAccount = new Account(this.connection, contractId);\n            return contractAccount;\n        });\n    }\n    /**\n     * @param receiverId NEAR account receiving Ⓝ\n     * @param amount Amount to send in yoctoⓃ\n     */ sendMoney(receiverId, amount) {\n        return __awaiter(this, void 0, void 0, function*() {\n            return this.signAndSendTransaction({\n                receiverId,\n                actions: [\n                    transfer(amount)\n                ]\n            });\n        });\n    }\n    /**\n     * @param newAccountId NEAR account name to be created\n     * @param publicKey A public key created from the masterAccount\n     */ createAccount(newAccountId, publicKey, amount) {\n        return __awaiter(this, void 0, void 0, function*() {\n            const accessKey = fullAccessKey();\n            return this.signAndSendTransaction({\n                receiverId: newAccountId,\n                actions: [\n                    createAccount(),\n                    transfer(amount),\n                    addKey(crypto_1.PublicKey.from(publicKey), accessKey)\n                ]\n            });\n        });\n    }\n    /**\n     * @param beneficiaryId The NEAR account that will receive the remaining Ⓝ balance from the account being deleted\n     */ deleteAccount(beneficiaryId) {\n        return __awaiter(this, void 0, void 0, function*() {\n            if (!process.env[\"NEAR_NO_LOGS\"]) {\n                console.log(\"Deleting an account does not automatically transfer NFTs and FTs to the beneficiary address. Ensure to transfer assets before deleting.\");\n            }\n            return this.signAndSendTransaction({\n                receiverId: this.accountId,\n                actions: [\n                    deleteAccount(beneficiaryId)\n                ]\n            });\n        });\n    }\n    /**\n     * @param data The compiled contract code\n     */ deployContract(data) {\n        return __awaiter(this, void 0, void 0, function*() {\n            return this.signAndSendTransaction({\n                receiverId: this.accountId,\n                actions: [\n                    deployContract(data)\n                ]\n            });\n        });\n    }\n    /** @hidden */ encodeJSContractArgs(contractId, method, args) {\n        return Buffer.concat([\n            Buffer.from(contractId),\n            Buffer.from([\n                0\n            ]),\n            Buffer.from(method),\n            Buffer.from([\n                0\n            ]),\n            Buffer.from(args)\n        ]);\n    }\n    /**\n     * Execute function call\n     * @returns {Promise<FinalExecutionOutcome>}\n     */ functionCall({ contractId, methodName, args = {}, gas = utils_1.DEFAULT_FUNCTION_CALL_GAS, attachedDeposit, walletMeta, walletCallbackUrl, stringify, jsContract }) {\n        return __awaiter(this, void 0, void 0, function*() {\n            this.validateArgs(args);\n            let functionCallArgs;\n            if (jsContract) {\n                const encodedArgs = this.encodeJSContractArgs(contractId, methodName, JSON.stringify(args));\n                functionCallArgs = [\n                    \"call_js_contract\",\n                    encodedArgs,\n                    gas,\n                    attachedDeposit,\n                    null,\n                    true\n                ];\n            } else {\n                const stringifyArg = stringify === undefined ? transactions_1.stringifyJsonOrBytes : stringify;\n                functionCallArgs = [\n                    methodName,\n                    args,\n                    gas,\n                    attachedDeposit,\n                    stringifyArg,\n                    false\n                ];\n            }\n            return this.signAndSendTransaction({\n                receiverId: jsContract ? this.connection.jsvmAccountId : contractId,\n                // eslint-disable-next-line prefer-spread\n                actions: [\n                    functionCall.apply(void 0, functionCallArgs)\n                ],\n                walletMeta,\n                walletCallbackUrl\n            });\n        });\n    }\n    /**\n     * @see [https://docs.near.org/concepts/basics/accounts/access-keys](https://docs.near.org/concepts/basics/accounts/access-keys)\n     * @todo expand this API to support more options.\n     * @param publicKey A public key to be associated with the contract\n     * @param contractId NEAR account where the contract is deployed\n     * @param methodNames The method names on the contract that should be allowed to be called. Pass null for no method names and '' or [] for any method names.\n     * @param amount Payment in yoctoⓃ that is sent to the contract during this function call\n     */ addKey(publicKey, contractId, methodNames, amount) {\n        return __awaiter(this, void 0, void 0, function*() {\n            if (!methodNames) {\n                methodNames = [];\n            }\n            if (!Array.isArray(methodNames)) {\n                methodNames = [\n                    methodNames\n                ];\n            }\n            let accessKey;\n            if (!contractId) {\n                accessKey = fullAccessKey();\n            } else {\n                accessKey = functionCallAccessKey(contractId, methodNames, amount);\n            }\n            return this.signAndSendTransaction({\n                receiverId: this.accountId,\n                actions: [\n                    addKey(crypto_1.PublicKey.from(publicKey), accessKey)\n                ]\n            });\n        });\n    }\n    /**\n     * @param publicKey The public key to be deleted\n     * @returns {Promise<FinalExecutionOutcome>}\n     */ deleteKey(publicKey) {\n        return __awaiter(this, void 0, void 0, function*() {\n            return this.signAndSendTransaction({\n                receiverId: this.accountId,\n                actions: [\n                    deleteKey(crypto_1.PublicKey.from(publicKey))\n                ]\n            });\n        });\n    }\n    /**\n     * @see [https://near-nodes.io/validator/staking-and-delegation](https://near-nodes.io/validator/staking-and-delegation)\n     *\n     * @param publicKey The public key for the account that's staking\n     * @param amount The account to stake in yoctoⓃ\n     */ stake(publicKey, amount) {\n        return __awaiter(this, void 0, void 0, function*() {\n            return this.signAndSendTransaction({\n                receiverId: this.accountId,\n                actions: [\n                    stake(amount, crypto_1.PublicKey.from(publicKey))\n                ]\n            });\n        });\n    }\n    /**\n     * Compose and sign a SignedDelegate action to be executed in a transaction on behalf of this Account instance\n     *\n     * @param actions Actions to be included in the meta transaction\n     * @param blockHeightTtl Number of blocks past the current block height for which the SignedDelegate action may be included in a meta transaction\n     * @param receiverId Receiver account of the meta transaction\n     */ signedDelegate({ actions, blockHeightTtl, receiverId }) {\n        return __awaiter(this, void 0, void 0, function*() {\n            const { provider, signer } = this.connection;\n            const { header } = yield provider.block({\n                finality: \"final\"\n            });\n            const { accessKey, publicKey } = yield this.findAccessKey(null, null);\n            const delegateAction = (0, transactions_1.buildDelegateAction)({\n                actions,\n                maxBlockHeight: new bn_js_1.default(header.height).add(new bn_js_1.default(blockHeightTtl)),\n                nonce: new bn_js_1.default(accessKey.nonce).add(new bn_js_1.default(1)),\n                publicKey,\n                receiverId,\n                senderId: this.accountId\n            });\n            const { signedDelegateAction } = yield (0, transactions_1.signDelegateAction)({\n                delegateAction,\n                signer: {\n                    sign: (message)=>__awaiter(this, void 0, void 0, function*() {\n                            const { signature } = yield signer.signMessage(message, delegateAction.senderId, this.connection.networkId);\n                            return signature;\n                        })\n                }\n            });\n            return signedDelegateAction;\n        });\n    }\n    /** @hidden */ validateArgs(args) {\n        const isUint8Array = args.byteLength !== undefined && args.byteLength === args.length;\n        if (isUint8Array) {\n            return;\n        }\n        if (Array.isArray(args) || typeof args !== \"object\") {\n            throw new types_1.PositionalArgsError();\n        }\n    }\n    /**\n     * Invoke a contract view function using the RPC API.\n     * @see [https://docs.near.org/api/rpc/contracts#call-a-contract-function](https://docs.near.org/api/rpc/contracts#call-a-contract-function)\n     *\n     * @param viewFunctionCallOptions.contractId NEAR account where the contract is deployed\n     * @param viewFunctionCallOptions.methodName The view-only method (no state mutations) name on the contract as it is written in the contract code\n     * @param viewFunctionCallOptions.args Any arguments to the view contract method, wrapped in JSON\n     * @param viewFunctionCallOptions.parse Parse the result of the call. Receives a Buffer (bytes array) and converts it to any object. By default result will be treated as json.\n     * @param viewFunctionCallOptions.stringify Convert input arguments into a bytes array. By default the input is treated as a JSON.\n     * @param viewFunctionCallOptions.jsContract Is contract from JS SDK, automatically encodes args from JS SDK to binary.\n     * @param viewFunctionCallOptions.blockQuery specifies which block to query state at. By default returns last \"optimistic\" block (i.e. not necessarily finalized).\n     * @returns {Promise<any>}\n     */ viewFunction({ contractId, methodName, args = {}, parse = parseJsonFromRawResponse, stringify = bytesJsonStringify, jsContract = false, blockQuery = {\n        finality: \"optimistic\"\n    } }) {\n        return __awaiter(this, void 0, void 0, function*() {\n            let encodedArgs;\n            this.validateArgs(args);\n            if (jsContract) {\n                encodedArgs = this.encodeJSContractArgs(contractId, methodName, Object.keys(args).length > 0 ? JSON.stringify(args) : \"\");\n            } else {\n                encodedArgs = stringify(args);\n            }\n            const result = yield this.connection.provider.query(Object.assign(Object.assign({\n                request_type: \"call_function\"\n            }, blockQuery), {\n                account_id: jsContract ? this.connection.jsvmAccountId : contractId,\n                method_name: jsContract ? \"view_js_contract\" : methodName,\n                args_base64: encodedArgs.toString(\"base64\")\n            }));\n            if (result.logs) {\n                (0, utils_1.printTxOutcomeLogs)({\n                    contractId,\n                    logs: result.logs\n                });\n            }\n            return result.result && result.result.length > 0 && parse(Buffer.from(result.result));\n        });\n    }\n    /**\n     * Returns the state (key value pairs) of this account's contract based on the key prefix.\n     * Pass an empty string for prefix if you would like to return the entire state.\n     * @see [https://docs.near.org/api/rpc/contracts#view-contract-state](https://docs.near.org/api/rpc/contracts#view-contract-state)\n     *\n     * @param prefix allows to filter which keys should be returned. Empty prefix means all keys. String prefix is utf-8 encoded.\n     * @param blockQuery specifies which block to query state at. By default returns last \"optimistic\" block (i.e. not necessarily finalized).\n     */ viewState(prefix, blockQuery = {\n        finality: \"optimistic\"\n    }) {\n        return __awaiter(this, void 0, void 0, function*() {\n            const { values } = yield this.connection.provider.query(Object.assign(Object.assign({\n                request_type: \"view_state\"\n            }, blockQuery), {\n                account_id: this.accountId,\n                prefix_base64: Buffer.from(prefix).toString(\"base64\")\n            }));\n            return values.map(({ key, value })=>({\n                    key: Buffer.from(key, \"base64\"),\n                    value: Buffer.from(value, \"base64\")\n                }));\n        });\n    }\n    /**\n     * Get all access keys for the account\n     * @see [https://docs.near.org/api/rpc/access-keys#view-access-key-list](https://docs.near.org/api/rpc/access-keys#view-access-key-list)\n     */ getAccessKeys() {\n        var _a;\n        return __awaiter(this, void 0, void 0, function*() {\n            const response = yield this.connection.provider.query({\n                request_type: \"view_access_key_list\",\n                account_id: this.accountId,\n                finality: \"optimistic\"\n            });\n            // Replace raw nonce into a new BN\n            return (_a = response === null || response === void 0 ? void 0 : response.keys) === null || _a === void 0 ? void 0 : _a.map((key)=>Object.assign(Object.assign({}, key), {\n                    access_key: Object.assign(Object.assign({}, key.access_key), {\n                        nonce: new bn_js_1.default(key.access_key.nonce)\n                    })\n                }));\n        });\n    }\n    /**\n     * Returns a list of authorized apps\n     * @todo update the response value to return all the different keys, not just app keys.\n     */ getAccountDetails() {\n        return __awaiter(this, void 0, void 0, function*() {\n            // TODO: update the response value to return all the different keys, not just app keys.\n            // Also if we need this function, or getAccessKeys is good enough.\n            const accessKeys = yield this.getAccessKeys();\n            const authorizedApps = accessKeys.filter((item)=>item.access_key.permission !== \"FullAccess\").map((item)=>{\n                const perm = item.access_key.permission;\n                return {\n                    contractId: perm.FunctionCall.receiver_id,\n                    amount: perm.FunctionCall.allowance,\n                    publicKey: item.public_key\n                };\n            });\n            return {\n                authorizedApps\n            };\n        });\n    }\n    /**\n     * Returns calculated account balance\n     */ getAccountBalance() {\n        return __awaiter(this, void 0, void 0, function*() {\n            const protocolConfig = yield this.connection.provider.experimental_protocolConfig({\n                finality: \"final\"\n            });\n            const state = yield this.state();\n            const costPerByte = new bn_js_1.default(protocolConfig.runtime_config.storage_amount_per_byte);\n            const stateStaked = new bn_js_1.default(state.storage_usage).mul(costPerByte);\n            const staked = new bn_js_1.default(state.locked);\n            const totalBalance = new bn_js_1.default(state.amount).add(staked);\n            const availableBalance = totalBalance.sub(bn_js_1.default.max(staked, stateStaked));\n            return {\n                total: totalBalance.toString(),\n                stateStaked: stateStaked.toString(),\n                staked: staked.toString(),\n                available: availableBalance.toString()\n            };\n        });\n    }\n    /**\n     * Returns the NEAR tokens balance and validators of a given account that is delegated to the staking pools that are part of the validators set in the current epoch.\n     *\n     * NOTE: If the tokens are delegated to a staking pool that is currently on pause or does not have enough tokens to participate in validation, they won't be accounted for.\n     * @returns {Promise<ActiveDelegatedStakeBalance>}\n     */ getActiveDelegatedStakeBalance() {\n        return __awaiter(this, void 0, void 0, function*() {\n            const block = yield this.connection.provider.block({\n                finality: \"final\"\n            });\n            const blockHash = block.header.hash;\n            const epochId = block.header.epoch_id;\n            const { current_validators, next_validators, current_proposals } = yield this.connection.provider.validators(epochId);\n            const pools = new Set();\n            [\n                ...current_validators,\n                ...next_validators,\n                ...current_proposals\n            ].forEach((validator)=>pools.add(validator.account_id));\n            const uniquePools = [\n                ...pools\n            ];\n            const promises = uniquePools.map((validator)=>this.viewFunction({\n                    contractId: validator,\n                    methodName: \"get_account_total_balance\",\n                    args: {\n                        account_id: this.accountId\n                    },\n                    blockQuery: {\n                        blockId: blockHash\n                    }\n                }));\n            const results = yield Promise.allSettled(promises);\n            const hasTimeoutError = results.some((result)=>{\n                if (result.status === \"rejected\" && result.reason.type === \"TimeoutError\") {\n                    return true;\n                }\n                return false;\n            });\n            // When RPC is down and return timeout error, throw error\n            if (hasTimeoutError) {\n                throw new Error(\"Failed to get delegated stake balance\");\n            }\n            const summary = results.reduce((result, state, index)=>{\n                const validatorId = uniquePools[index];\n                if (state.status === \"fulfilled\") {\n                    const currentBN = new bn_js_1.default(state.value);\n                    if (!currentBN.isZero()) {\n                        return Object.assign(Object.assign({}, result), {\n                            stakedValidators: [\n                                ...result.stakedValidators,\n                                {\n                                    validatorId,\n                                    amount: currentBN.toString()\n                                }\n                            ],\n                            total: result.total.add(currentBN)\n                        });\n                    }\n                }\n                if (state.status === \"rejected\") {\n                    return Object.assign(Object.assign({}, result), {\n                        failedValidators: [\n                            ...result.failedValidators,\n                            {\n                                validatorId,\n                                error: state.reason\n                            }\n                        ]\n                    });\n                }\n                return result;\n            }, {\n                stakedValidators: [],\n                failedValidators: [],\n                total: new bn_js_1.default(0)\n            });\n            return Object.assign(Object.assign({}, summary), {\n                total: summary.total.toString()\n            });\n        });\n    }\n}\nexports.Account = Account;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@near-js/accounts/lib/account.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@near-js/accounts/lib/account_2fa.js":
/*!***********************************************************!*\
  !*** ./node_modules/@near-js/accounts/lib/account_2fa.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n        });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = this && this.__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.Account2FA = void 0;\nconst crypto_1 = __webpack_require__(/*! @near-js/crypto */ \"(ssr)/./node_modules/@near-js/crypto/lib/index.js\");\nconst types_1 = __webpack_require__(/*! @near-js/types */ \"(ssr)/./node_modules/@near-js/types/lib/index.js\");\nconst providers_1 = __webpack_require__(/*! @near-js/providers */ \"(ssr)/./node_modules/@near-js/providers/lib/index.js\");\nconst transactions_1 = __webpack_require__(/*! @near-js/transactions */ \"(ssr)/./node_modules/@near-js/transactions/lib/index.js\");\nconst bn_js_1 = __importDefault(__webpack_require__(/*! bn.js */ \"(ssr)/./node_modules/bn.js/lib/bn.js\"));\nconst account_multisig_1 = __webpack_require__(/*! ./account_multisig */ \"(ssr)/./node_modules/@near-js/accounts/lib/account_multisig.js\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/@near-js/accounts/lib/constants.js\");\nconst types_2 = __webpack_require__(/*! ./types */ \"(ssr)/./node_modules/@near-js/accounts/lib/types.js\");\nconst { addKey, deleteKey, deployContract, fullAccessKey, functionCall, functionCallAccessKey } = transactions_1.actionCreators;\nclass Account2FA extends account_multisig_1.AccountMultisig {\n    constructor(connection, accountId, options){\n        super(connection, accountId, options);\n        this.helperUrl = \"https://helper.testnet.near.org\";\n        this.helperUrl = options.helperUrl || this.helperUrl;\n        this.storage = options.storage;\n        this.sendCode = options.sendCode || this.sendCodeDefault;\n        this.getCode = options.getCode || this.getCodeDefault;\n        this.verifyCode = options.verifyCode || this.verifyCodeDefault;\n        this.onConfirmResult = options.onConfirmResult;\n    }\n    /**\n     * Sign a transaction to preform a list of actions and broadcast it using the RPC API.\n     * @see {@link providers/json-rpc-provider!JsonRpcProvider#sendTransaction | JsonRpcProvider.sendTransaction}\n     */ signAndSendTransaction({ receiverId, actions }) {\n        const _super = Object.create(null, {\n            signAndSendTransaction: {\n                get: ()=>super.signAndSendTransaction\n            }\n        });\n        return __awaiter(this, void 0, void 0, function*() {\n            yield _super.signAndSendTransaction.call(this, {\n                receiverId,\n                actions\n            });\n            // TODO: Should following override onRequestResult in superclass instead of doing custom signAndSendTransaction?\n            yield this.sendCode();\n            const result = yield this.promptAndVerify();\n            if (this.onConfirmResult) {\n                yield this.onConfirmResult(result);\n            }\n            return result;\n        });\n    }\n    // default helpers for CH deployments of multisig\n    deployMultisig(contractBytes) {\n        const _super = Object.create(null, {\n            signAndSendTransactionWithAccount: {\n                get: ()=>super.signAndSendTransactionWithAccount\n            }\n        });\n        return __awaiter(this, void 0, void 0, function*() {\n            const { accountId } = this;\n            const seedOrLedgerKey = (yield this.getRecoveryMethods()).data.filter(({ kind, publicKey })=>(kind === \"phrase\" || kind === \"ledger\") && publicKey !== null).map((rm)=>rm.publicKey);\n            const fak2lak = (yield this.getAccessKeys()).filter(({ public_key, access_key: { permission } })=>permission === \"FullAccess\" && !seedOrLedgerKey.includes(public_key)).map((ak)=>ak.public_key).map(toPK);\n            const confirmOnlyKey = toPK((yield this.postSignedJson(\"/2fa/getAccessKey\", {\n                accountId\n            })).publicKey);\n            const newArgs = Buffer.from(JSON.stringify({\n                \"num_confirmations\": 2\n            }));\n            const actions = [\n                ...fak2lak.map((pk)=>deleteKey(pk)),\n                ...fak2lak.map((pk)=>addKey(pk, functionCallAccessKey(accountId, constants_1.MULTISIG_CHANGE_METHODS, null))),\n                addKey(confirmOnlyKey, functionCallAccessKey(accountId, constants_1.MULTISIG_CONFIRM_METHODS, null)),\n                deployContract(contractBytes)\n            ];\n            const newFunctionCallActionBatch = actions.concat(functionCall(\"new\", newArgs, constants_1.MULTISIG_GAS, constants_1.MULTISIG_DEPOSIT));\n            console.log(\"deploying multisig contract for\", accountId);\n            const { stateStatus: multisigStateStatus } = yield this.checkMultisigCodeAndStateStatus(contractBytes);\n            switch(multisigStateStatus){\n                case types_2.MultisigStateStatus.STATE_NOT_INITIALIZED:\n                    return yield _super.signAndSendTransactionWithAccount.call(this, accountId, newFunctionCallActionBatch);\n                case types_2.MultisigStateStatus.VALID_STATE:\n                    return yield _super.signAndSendTransactionWithAccount.call(this, accountId, actions);\n                case types_2.MultisigStateStatus.INVALID_STATE:\n                    throw new types_1.TypedError(`Can not deploy a contract to account ${this.accountId} on network ${this.connection.networkId}, the account has existing state.`, \"ContractHasExistingState\");\n                default:\n                    throw new types_1.TypedError(`Can not deploy a contract to account ${this.accountId} on network ${this.connection.networkId}, the account state could not be verified.`, \"ContractStateUnknown\");\n            }\n        });\n    }\n    disableWithFAK({ contractBytes, cleanupContractBytes }) {\n        return __awaiter(this, void 0, void 0, function*() {\n            let cleanupActions = [];\n            if (cleanupContractBytes) {\n                yield this.deleteAllRequests().catch((e)=>e);\n                cleanupActions = yield this.get2faDisableCleanupActions(cleanupContractBytes);\n            }\n            const keyConversionActions = yield this.get2faDisableKeyConversionActions();\n            const actions = [\n                ...cleanupActions,\n                ...keyConversionActions,\n                deployContract(contractBytes)\n            ];\n            const accessKeyInfo = yield this.findAccessKey(this.accountId, actions);\n            if (accessKeyInfo && accessKeyInfo.accessKey && accessKeyInfo.accessKey.permission !== \"FullAccess\") {\n                throw new types_1.TypedError(\"No full access key found in keystore. Unable to bypass multisig\", \"NoFAKFound\");\n            }\n            return this.signAndSendTransactionWithAccount(this.accountId, actions);\n        });\n    }\n    get2faDisableCleanupActions(cleanupContractBytes) {\n        return __awaiter(this, void 0, void 0, function*() {\n            const currentAccountState = yield this.viewState(\"\").catch((error)=>{\n                const cause = error.cause && error.cause.name;\n                if (cause == \"NO_CONTRACT_CODE\") {\n                    return [];\n                }\n                throw cause == \"TOO_LARGE_CONTRACT_STATE\" ? new types_1.TypedError(`Can not deploy a contract to account ${this.accountId} on network ${this.connection.networkId}, the account has existing state.`, \"ContractHasExistingState\") : error;\n            });\n            const currentAccountStateKeys = currentAccountState.map(({ key })=>key.toString(\"base64\"));\n            return currentAccountState.length ? [\n                deployContract(cleanupContractBytes),\n                functionCall(\"clean\", {\n                    keys: currentAccountStateKeys\n                }, constants_1.MULTISIG_GAS, new bn_js_1.default(\"0\"))\n            ] : [];\n        });\n    }\n    get2faDisableKeyConversionActions() {\n        return __awaiter(this, void 0, void 0, function*() {\n            const { accountId } = this;\n            const accessKeys = yield this.getAccessKeys();\n            const lak2fak = accessKeys.filter(({ access_key })=>access_key.permission !== \"FullAccess\").filter(({ access_key })=>{\n                const perm = access_key.permission.FunctionCall;\n                return perm.receiver_id === accountId && perm.method_names.length === 4 && perm.method_names.includes(\"add_request_and_confirm\");\n            });\n            const confirmOnlyKey = crypto_1.PublicKey.from((yield this.postSignedJson(\"/2fa/getAccessKey\", {\n                accountId\n            })).publicKey);\n            return [\n                deleteKey(confirmOnlyKey),\n                ...lak2fak.map(({ public_key })=>deleteKey(crypto_1.PublicKey.from(public_key))),\n                ...lak2fak.map(({ public_key })=>addKey(crypto_1.PublicKey.from(public_key), fullAccessKey()))\n            ];\n        });\n    }\n    /**\n     * This method converts LAKs back to FAKs, clears state and deploys an 'empty' contract (contractBytes param)\n     * @param [contractBytes]{@link https://github.com/near/near-wallet/blob/master/packages/frontend/src/wasm/main.wasm?raw=true}\n     * @param [cleanupContractBytes]{@link https://github.com/near/core-contracts/blob/master/state-cleanup/res/state_cleanup.wasm?raw=true}\n     */ disable(contractBytes, cleanupContractBytes) {\n        return __awaiter(this, void 0, void 0, function*() {\n            const { stateStatus } = yield this.checkMultisigCodeAndStateStatus();\n            if (stateStatus !== types_2.MultisigStateStatus.VALID_STATE && stateStatus !== types_2.MultisigStateStatus.STATE_NOT_INITIALIZED) {\n                throw new types_1.TypedError(`Can not deploy a contract to account ${this.accountId} on network ${this.connection.networkId}, the account state could not be verified.`, \"ContractStateUnknown\");\n            }\n            let deleteAllRequestsError;\n            yield this.deleteAllRequests().catch((e)=>deleteAllRequestsError = e);\n            const cleanupActions = yield this.get2faDisableCleanupActions(cleanupContractBytes).catch((e)=>{\n                if (e.type === \"ContractHasExistingState\") {\n                    throw deleteAllRequestsError || e;\n                }\n                throw e;\n            });\n            const actions = [\n                ...cleanupActions,\n                ...yield this.get2faDisableKeyConversionActions(),\n                deployContract(contractBytes)\n            ];\n            console.log(\"disabling 2fa for\", this.accountId);\n            return yield this.signAndSendTransaction({\n                receiverId: this.accountId,\n                actions\n            });\n        });\n    }\n    sendCodeDefault() {\n        return __awaiter(this, void 0, void 0, function*() {\n            const { accountId } = this;\n            const { requestId } = this.getRequest();\n            const method = yield this.get2faMethod();\n            yield this.postSignedJson(\"/2fa/send\", {\n                accountId,\n                method,\n                requestId\n            });\n            return requestId;\n        });\n    }\n    getCodeDefault() {\n        return __awaiter(this, void 0, void 0, function*() {\n            throw new Error('There is no getCode callback provided. Please provide your own in AccountMultisig constructor options. It has a parameter method where method.kind is \"email\" or \"phone\".');\n        });\n    }\n    promptAndVerify() {\n        return __awaiter(this, void 0, void 0, function*() {\n            const method = yield this.get2faMethod();\n            const securityCode = yield this.getCode(method);\n            try {\n                const result = yield this.verifyCode(securityCode);\n                // TODO: Parse error from result for real (like in normal account.signAndSendTransaction)\n                return result;\n            } catch (e) {\n                console.warn(\"Error validating security code:\", e);\n                if (e.toString().includes(\"invalid 2fa code provided\") || e.toString().includes(\"2fa code not valid\")) {\n                    return yield this.promptAndVerify();\n                }\n                throw e;\n            }\n        });\n    }\n    verifyCodeDefault(securityCode) {\n        return __awaiter(this, void 0, void 0, function*() {\n            const { accountId } = this;\n            const request = this.getRequest();\n            if (!request) {\n                throw new Error(\"no request pending\");\n            }\n            const { requestId } = request;\n            return yield this.postSignedJson(\"/2fa/verify\", {\n                accountId,\n                securityCode,\n                requestId\n            });\n        });\n    }\n    getRecoveryMethods() {\n        return __awaiter(this, void 0, void 0, function*() {\n            const { accountId } = this;\n            return {\n                accountId,\n                data: yield this.postSignedJson(\"/account/recoveryMethods\", {\n                    accountId\n                })\n            };\n        });\n    }\n    get2faMethod() {\n        return __awaiter(this, void 0, void 0, function*() {\n            let { data } = yield this.getRecoveryMethods();\n            if (data && data.length) {\n                data = data.find((m)=>m.kind.indexOf(\"2fa-\") === 0);\n            }\n            if (!data) return null;\n            const { kind, detail } = data;\n            return {\n                kind,\n                detail\n            };\n        });\n    }\n    signatureFor() {\n        return __awaiter(this, void 0, void 0, function*() {\n            const { accountId } = this;\n            const block = yield this.connection.provider.block({\n                finality: \"final\"\n            });\n            const blockNumber = block.header.height.toString();\n            const signed = yield this.connection.signer.signMessage(Buffer.from(blockNumber), accountId, this.connection.networkId);\n            const blockNumberSignature = Buffer.from(signed.signature).toString(\"base64\");\n            return {\n                blockNumber,\n                blockNumberSignature\n            };\n        });\n    }\n    postSignedJson(path, body) {\n        return __awaiter(this, void 0, void 0, function*() {\n            return yield (0, providers_1.fetchJson)(this.helperUrl + path, JSON.stringify(Object.assign(Object.assign({}, body), (yield this.signatureFor()))));\n        });\n    }\n}\nexports.Account2FA = Account2FA;\n// helpers\nconst toPK = (pk)=>crypto_1.PublicKey.from(pk);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@near-js/accounts/lib/account_2fa.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@near-js/accounts/lib/account_creator.js":
/*!***************************************************************!*\
  !*** ./node_modules/@near-js/accounts/lib/account_creator.js ***!
  \***************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n        });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.UrlAccountCreator = exports.LocalAccountCreator = exports.AccountCreator = void 0;\nconst providers_1 = __webpack_require__(/*! @near-js/providers */ \"(ssr)/./node_modules/@near-js/providers/lib/index.js\");\n/**\n * Account creator provides an interface for implementations to actually create accounts\n */ class AccountCreator {\n}\nexports.AccountCreator = AccountCreator;\nclass LocalAccountCreator extends AccountCreator {\n    constructor(masterAccount, initialBalance){\n        super();\n        this.masterAccount = masterAccount;\n        this.initialBalance = initialBalance;\n    }\n    /**\n     * Creates an account using a masterAccount, meaning the new account is created from an existing account\n     * @param newAccountId The name of the NEAR account to be created\n     * @param publicKey The public key from the masterAccount used to create this account\n     * @returns {Promise<void>}\n     */ createAccount(newAccountId, publicKey) {\n        return __awaiter(this, void 0, void 0, function*() {\n            yield this.masterAccount.createAccount(newAccountId, publicKey, this.initialBalance);\n        });\n    }\n}\nexports.LocalAccountCreator = LocalAccountCreator;\nclass UrlAccountCreator extends AccountCreator {\n    constructor(connection, helperUrl){\n        super();\n        this.connection = connection;\n        this.helperUrl = helperUrl;\n    }\n    /**\n     * Creates an account using a helperUrl\n     * This is [hosted here](https://helper.nearprotocol.com) or set up locally with the [near-contract-helper](https://github.com/nearprotocol/near-contract-helper) repository\n     * @param newAccountId The name of the NEAR account to be created\n     * @param publicKey The public key from the masterAccount used to create this account\n     * @returns {Promise<void>}\n     */ createAccount(newAccountId, publicKey) {\n        return __awaiter(this, void 0, void 0, function*() {\n            yield (0, providers_1.fetchJson)(`${this.helperUrl}/account`, JSON.stringify({\n                newAccountId,\n                newAccountPublicKey: publicKey.toString()\n            }));\n        });\n    }\n}\nexports.UrlAccountCreator = UrlAccountCreator;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG5lYXItanMvYWNjb3VudHMvbGliL2FjY291bnRfY3JlYXRvci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLElBQUlBLFlBQVksSUFBSyxJQUFJLElBQUksQ0FBQ0EsU0FBUyxJQUFLLFNBQVVDLE9BQU8sRUFBRUMsVUFBVSxFQUFFQyxDQUFDLEVBQUVDLFNBQVM7SUFDbkYsU0FBU0MsTUFBTUMsS0FBSztRQUFJLE9BQU9BLGlCQUFpQkgsSUFBSUcsUUFBUSxJQUFJSCxFQUFFLFNBQVVJLE9BQU87WUFBSUEsUUFBUUQ7UUFBUTtJQUFJO0lBQzNHLE9BQU8sSUFBS0gsQ0FBQUEsS0FBTUEsQ0FBQUEsSUFBSUssT0FBTSxDQUFDLEVBQUcsU0FBVUQsT0FBTyxFQUFFRSxNQUFNO1FBQ3JELFNBQVNDLFVBQVVKLEtBQUs7WUFBSSxJQUFJO2dCQUFFSyxLQUFLUCxVQUFVUSxJQUFJLENBQUNOO1lBQVMsRUFBRSxPQUFPTyxHQUFHO2dCQUFFSixPQUFPSTtZQUFJO1FBQUU7UUFDMUYsU0FBU0MsU0FBU1IsS0FBSztZQUFJLElBQUk7Z0JBQUVLLEtBQUtQLFNBQVMsQ0FBQyxRQUFRLENBQUNFO1lBQVMsRUFBRSxPQUFPTyxHQUFHO2dCQUFFSixPQUFPSTtZQUFJO1FBQUU7UUFDN0YsU0FBU0YsS0FBS0ksTUFBTTtZQUFJQSxPQUFPQyxJQUFJLEdBQUdULFFBQVFRLE9BQU9ULEtBQUssSUFBSUQsTUFBTVUsT0FBT1QsS0FBSyxFQUFFVyxJQUFJLENBQUNQLFdBQVdJO1FBQVc7UUFDN0dILEtBQUssQ0FBQ1AsWUFBWUEsVUFBVWMsS0FBSyxDQUFDakIsU0FBU0MsY0FBYyxFQUFFLEdBQUdVLElBQUk7SUFDdEU7QUFDSjtBQUNBTyw4Q0FBNkM7SUFBRWIsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3RGUseUJBQXlCLEdBQUdBLDJCQUEyQixHQUFHQSxzQkFBc0IsR0FBRyxLQUFLO0FBQ3hGLE1BQU1JLGNBQWNDLG1CQUFPQSxDQUFDLGdGQUFvQjtBQUNoRDs7Q0FFQyxHQUNELE1BQU1GO0FBQ047QUFDQUgsc0JBQXNCLEdBQUdHO0FBQ3pCLE1BQU1ELDRCQUE0QkM7SUFDOUJHLFlBQVlDLGFBQWEsRUFBRUMsY0FBYyxDQUFFO1FBQ3ZDLEtBQUs7UUFDTCxJQUFJLENBQUNELGFBQWEsR0FBR0E7UUFDckIsSUFBSSxDQUFDQyxjQUFjLEdBQUdBO0lBQzFCO0lBQ0E7Ozs7O0tBS0MsR0FDREMsY0FBY0MsWUFBWSxFQUFFQyxTQUFTLEVBQUU7UUFDbkMsT0FBT2hDLFVBQVUsSUFBSSxFQUFFLEtBQUssR0FBRyxLQUFLLEdBQUc7WUFDbkMsTUFBTSxJQUFJLENBQUM0QixhQUFhLENBQUNFLGFBQWEsQ0FBQ0MsY0FBY0MsV0FBVyxJQUFJLENBQUNILGNBQWM7UUFDdkY7SUFDSjtBQUNKO0FBQ0FSLDJCQUEyQixHQUFHRTtBQUM5QixNQUFNRCwwQkFBMEJFO0lBQzVCRyxZQUFZTSxVQUFVLEVBQUVDLFNBQVMsQ0FBRTtRQUMvQixLQUFLO1FBQ0wsSUFBSSxDQUFDRCxVQUFVLEdBQUdBO1FBQ2xCLElBQUksQ0FBQ0MsU0FBUyxHQUFHQTtJQUNyQjtJQUNBOzs7Ozs7S0FNQyxHQUNESixjQUFjQyxZQUFZLEVBQUVDLFNBQVMsRUFBRTtRQUNuQyxPQUFPaEMsVUFBVSxJQUFJLEVBQUUsS0FBSyxHQUFHLEtBQUssR0FBRztZQUNuQyxNQUFNLENBQUMsR0FBR3lCLFlBQVlVLFNBQVMsRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDRCxTQUFTLENBQUMsUUFBUSxDQUFDLEVBQUVFLEtBQUtDLFNBQVMsQ0FBQztnQkFBRU47Z0JBQWNPLHFCQUFxQk4sVUFBVU8sUUFBUTtZQUFHO1FBQzNJO0lBQ0o7QUFDSjtBQUNBbEIseUJBQXlCLEdBQUdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaS1hbS1uZWFyYnkvLi9ub2RlX21vZHVsZXMvQG5lYXItanMvYWNjb3VudHMvbGliL2FjY291bnRfY3JlYXRvci5qcz9iZTUzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcbiAgICB9KTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlVybEFjY291bnRDcmVhdG9yID0gZXhwb3J0cy5Mb2NhbEFjY291bnRDcmVhdG9yID0gZXhwb3J0cy5BY2NvdW50Q3JlYXRvciA9IHZvaWQgMDtcbmNvbnN0IHByb3ZpZGVyc18xID0gcmVxdWlyZShcIkBuZWFyLWpzL3Byb3ZpZGVyc1wiKTtcbi8qKlxuICogQWNjb3VudCBjcmVhdG9yIHByb3ZpZGVzIGFuIGludGVyZmFjZSBmb3IgaW1wbGVtZW50YXRpb25zIHRvIGFjdHVhbGx5IGNyZWF0ZSBhY2NvdW50c1xuICovXG5jbGFzcyBBY2NvdW50Q3JlYXRvciB7XG59XG5leHBvcnRzLkFjY291bnRDcmVhdG9yID0gQWNjb3VudENyZWF0b3I7XG5jbGFzcyBMb2NhbEFjY291bnRDcmVhdG9yIGV4dGVuZHMgQWNjb3VudENyZWF0b3Ige1xuICAgIGNvbnN0cnVjdG9yKG1hc3RlckFjY291bnQsIGluaXRpYWxCYWxhbmNlKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMubWFzdGVyQWNjb3VudCA9IG1hc3RlckFjY291bnQ7XG4gICAgICAgIHRoaXMuaW5pdGlhbEJhbGFuY2UgPSBpbml0aWFsQmFsYW5jZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhY2NvdW50IHVzaW5nIGEgbWFzdGVyQWNjb3VudCwgbWVhbmluZyB0aGUgbmV3IGFjY291bnQgaXMgY3JlYXRlZCBmcm9tIGFuIGV4aXN0aW5nIGFjY291bnRcbiAgICAgKiBAcGFyYW0gbmV3QWNjb3VudElkIFRoZSBuYW1lIG9mIHRoZSBORUFSIGFjY291bnQgdG8gYmUgY3JlYXRlZFxuICAgICAqIEBwYXJhbSBwdWJsaWNLZXkgVGhlIHB1YmxpYyBrZXkgZnJvbSB0aGUgbWFzdGVyQWNjb3VudCB1c2VkIHRvIGNyZWF0ZSB0aGlzIGFjY291bnRcbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTx2b2lkPn1cbiAgICAgKi9cbiAgICBjcmVhdGVBY2NvdW50KG5ld0FjY291bnRJZCwgcHVibGljS2V5KSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICB5aWVsZCB0aGlzLm1hc3RlckFjY291bnQuY3JlYXRlQWNjb3VudChuZXdBY2NvdW50SWQsIHB1YmxpY0tleSwgdGhpcy5pbml0aWFsQmFsYW5jZSk7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbmV4cG9ydHMuTG9jYWxBY2NvdW50Q3JlYXRvciA9IExvY2FsQWNjb3VudENyZWF0b3I7XG5jbGFzcyBVcmxBY2NvdW50Q3JlYXRvciBleHRlbmRzIEFjY291bnRDcmVhdG9yIHtcbiAgICBjb25zdHJ1Y3Rvcihjb25uZWN0aW9uLCBoZWxwZXJVcmwpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5jb25uZWN0aW9uID0gY29ubmVjdGlvbjtcbiAgICAgICAgdGhpcy5oZWxwZXJVcmwgPSBoZWxwZXJVcmw7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYWNjb3VudCB1c2luZyBhIGhlbHBlclVybFxuICAgICAqIFRoaXMgaXMgW2hvc3RlZCBoZXJlXShodHRwczovL2hlbHBlci5uZWFycHJvdG9jb2wuY29tKSBvciBzZXQgdXAgbG9jYWxseSB3aXRoIHRoZSBbbmVhci1jb250cmFjdC1oZWxwZXJdKGh0dHBzOi8vZ2l0aHViLmNvbS9uZWFycHJvdG9jb2wvbmVhci1jb250cmFjdC1oZWxwZXIpIHJlcG9zaXRvcnlcbiAgICAgKiBAcGFyYW0gbmV3QWNjb3VudElkIFRoZSBuYW1lIG9mIHRoZSBORUFSIGFjY291bnQgdG8gYmUgY3JlYXRlZFxuICAgICAqIEBwYXJhbSBwdWJsaWNLZXkgVGhlIHB1YmxpYyBrZXkgZnJvbSB0aGUgbWFzdGVyQWNjb3VudCB1c2VkIHRvIGNyZWF0ZSB0aGlzIGFjY291bnRcbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTx2b2lkPn1cbiAgICAgKi9cbiAgICBjcmVhdGVBY2NvdW50KG5ld0FjY291bnRJZCwgcHVibGljS2V5KSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICB5aWVsZCAoMCwgcHJvdmlkZXJzXzEuZmV0Y2hKc29uKShgJHt0aGlzLmhlbHBlclVybH0vYWNjb3VudGAsIEpTT04uc3RyaW5naWZ5KHsgbmV3QWNjb3VudElkLCBuZXdBY2NvdW50UHVibGljS2V5OiBwdWJsaWNLZXkudG9TdHJpbmcoKSB9KSk7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbmV4cG9ydHMuVXJsQWNjb3VudENyZWF0b3IgPSBVcmxBY2NvdW50Q3JlYXRvcjtcbiJdLCJuYW1lcyI6WyJfX2F3YWl0ZXIiLCJ0aGlzQXJnIiwiX2FyZ3VtZW50cyIsIlAiLCJnZW5lcmF0b3IiLCJhZG9wdCIsInZhbHVlIiwicmVzb2x2ZSIsIlByb21pc2UiLCJyZWplY3QiLCJmdWxmaWxsZWQiLCJzdGVwIiwibmV4dCIsImUiLCJyZWplY3RlZCIsInJlc3VsdCIsImRvbmUiLCJ0aGVuIiwiYXBwbHkiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJVcmxBY2NvdW50Q3JlYXRvciIsIkxvY2FsQWNjb3VudENyZWF0b3IiLCJBY2NvdW50Q3JlYXRvciIsInByb3ZpZGVyc18xIiwicmVxdWlyZSIsImNvbnN0cnVjdG9yIiwibWFzdGVyQWNjb3VudCIsImluaXRpYWxCYWxhbmNlIiwiY3JlYXRlQWNjb3VudCIsIm5ld0FjY291bnRJZCIsInB1YmxpY0tleSIsImNvbm5lY3Rpb24iLCJoZWxwZXJVcmwiLCJmZXRjaEpzb24iLCJKU09OIiwic3RyaW5naWZ5IiwibmV3QWNjb3VudFB1YmxpY0tleSIsInRvU3RyaW5nIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@near-js/accounts/lib/account_creator.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@near-js/accounts/lib/account_multisig.js":
/*!****************************************************************!*\
  !*** ./node_modules/@near-js/accounts/lib/account_multisig.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n        });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.AccountMultisig = void 0;\nconst transactions_1 = __webpack_require__(/*! @near-js/transactions */ \"(ssr)/./node_modules/@near-js/transactions/lib/index.js\");\nconst account_1 = __webpack_require__(/*! ./account */ \"(ssr)/./node_modules/@near-js/accounts/lib/account.js\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/@near-js/accounts/lib/constants.js\");\nconst types_1 = __webpack_require__(/*! ./types */ \"(ssr)/./node_modules/@near-js/accounts/lib/types.js\");\nconst { deployContract, functionCall } = transactions_1.actionCreators;\nvar MultisigCodeStatus;\n(function(MultisigCodeStatus) {\n    MultisigCodeStatus[MultisigCodeStatus[\"INVALID_CODE\"] = 0] = \"INVALID_CODE\";\n    MultisigCodeStatus[MultisigCodeStatus[\"VALID_CODE\"] = 1] = \"VALID_CODE\";\n    MultisigCodeStatus[MultisigCodeStatus[\"UNKNOWN_CODE\"] = 2] = \"UNKNOWN_CODE\";\n})(MultisigCodeStatus || (MultisigCodeStatus = {}));\n// in memory request cache for node w/o localStorage\nconst storageFallback = {\n    [constants_1.MULTISIG_STORAGE_KEY]: null\n};\nclass AccountMultisig extends account_1.Account {\n    constructor(connection, accountId, options){\n        super(connection, accountId);\n        this.storage = options.storage;\n        this.onAddRequestResult = options.onAddRequestResult;\n    }\n    signAndSendTransactionWithAccount(receiverId, actions) {\n        const _super = Object.create(null, {\n            signAndSendTransaction: {\n                get: ()=>super.signAndSendTransaction\n            }\n        });\n        return __awaiter(this, void 0, void 0, function*() {\n            return _super.signAndSendTransaction.call(this, {\n                receiverId,\n                actions\n            });\n        });\n    }\n    signAndSendTransaction({ receiverId, actions }) {\n        const _super = Object.create(null, {\n            signAndSendTransaction: {\n                get: ()=>super.signAndSendTransaction\n            }\n        });\n        return __awaiter(this, void 0, void 0, function*() {\n            const { accountId } = this;\n            const args = Buffer.from(JSON.stringify({\n                request: {\n                    receiver_id: receiverId,\n                    actions: convertActions(actions, accountId, receiverId)\n                }\n            }));\n            let result;\n            try {\n                result = yield _super.signAndSendTransaction.call(this, {\n                    receiverId: accountId,\n                    actions: [\n                        functionCall(\"add_request_and_confirm\", args, constants_1.MULTISIG_GAS, constants_1.MULTISIG_DEPOSIT)\n                    ]\n                });\n            } catch (e) {\n                if (e.toString().includes(\"Account has too many active requests. Confirm or delete some\")) {\n                    yield this.deleteUnconfirmedRequests();\n                    return yield this.signAndSendTransaction({\n                        receiverId,\n                        actions\n                    });\n                }\n                throw e;\n            }\n            // TODO: Are following even needed? Seems like it throws on error already\n            if (!result.status) {\n                throw new Error(\"Request failed\");\n            }\n            const status = Object.assign({}, result.status);\n            if (!status.SuccessValue || typeof status.SuccessValue !== \"string\") {\n                throw new Error(\"Request failed\");\n            }\n            this.setRequest({\n                accountId,\n                actions,\n                requestId: parseInt(Buffer.from(status.SuccessValue, \"base64\").toString(\"ascii\"), 10)\n            });\n            if (this.onAddRequestResult) {\n                yield this.onAddRequestResult(result);\n            }\n            // NOTE there is no await on purpose to avoid blocking for 2fa\n            this.deleteUnconfirmedRequests();\n            return result;\n        });\n    }\n    /*\n     * This method submits a canary transaction that is expected to always fail in order to determine whether the contract currently has valid multisig state\n     * and whether it is initialized. The canary transaction attempts to delete a request at index u32_max and will go through if a request exists at that index.\n     * a u32_max + 1 and -1 value cannot be used for the canary due to expected u32 error thrown before deserialization attempt.\n     */ checkMultisigCodeAndStateStatus(contractBytes) {\n        const _super = Object.create(null, {\n            signAndSendTransaction: {\n                get: ()=>super.signAndSendTransaction\n            }\n        });\n        return __awaiter(this, void 0, void 0, function*() {\n            const u32_max = 4294967295;\n            const validCodeStatusIfNoDeploy = contractBytes ? MultisigCodeStatus.UNKNOWN_CODE : MultisigCodeStatus.VALID_CODE;\n            try {\n                if (contractBytes) {\n                    yield _super.signAndSendTransaction.call(this, {\n                        receiverId: this.accountId,\n                        actions: [\n                            deployContract(contractBytes),\n                            functionCall(\"delete_request\", {\n                                request_id: u32_max\n                            }, constants_1.MULTISIG_GAS, constants_1.MULTISIG_DEPOSIT)\n                        ]\n                    });\n                } else {\n                    yield this.deleteRequest(u32_max);\n                }\n                return {\n                    codeStatus: MultisigCodeStatus.VALID_CODE,\n                    stateStatus: types_1.MultisigStateStatus.VALID_STATE\n                };\n            } catch (e) {\n                if (new RegExp(types_1.MultisigDeleteRequestRejectionError.CANNOT_DESERIALIZE_STATE).test(e && e.kind && e.kind.ExecutionError)) {\n                    return {\n                        codeStatus: validCodeStatusIfNoDeploy,\n                        stateStatus: types_1.MultisigStateStatus.INVALID_STATE\n                    };\n                } else if (new RegExp(types_1.MultisigDeleteRequestRejectionError.MULTISIG_NOT_INITIALIZED).test(e && e.kind && e.kind.ExecutionError)) {\n                    return {\n                        codeStatus: validCodeStatusIfNoDeploy,\n                        stateStatus: types_1.MultisigStateStatus.STATE_NOT_INITIALIZED\n                    };\n                } else if (new RegExp(types_1.MultisigDeleteRequestRejectionError.NO_SUCH_REQUEST).test(e && e.kind && e.kind.ExecutionError)) {\n                    return {\n                        codeStatus: validCodeStatusIfNoDeploy,\n                        stateStatus: types_1.MultisigStateStatus.VALID_STATE\n                    };\n                } else if (new RegExp(types_1.MultisigDeleteRequestRejectionError.METHOD_NOT_FOUND).test(e && e.message)) {\n                    // not reachable if transaction included a deploy\n                    return {\n                        codeStatus: MultisigCodeStatus.INVALID_CODE,\n                        stateStatus: types_1.MultisigStateStatus.UNKNOWN_STATE\n                    };\n                }\n                throw e;\n            }\n        });\n    }\n    deleteRequest(request_id) {\n        return super.signAndSendTransaction({\n            receiverId: this.accountId,\n            actions: [\n                functionCall(\"delete_request\", {\n                    request_id\n                }, constants_1.MULTISIG_GAS, constants_1.MULTISIG_DEPOSIT)\n            ]\n        });\n    }\n    deleteAllRequests() {\n        return __awaiter(this, void 0, void 0, function*() {\n            const request_ids = yield this.getRequestIds();\n            if (request_ids.length) {\n                yield Promise.all(request_ids.map((id)=>this.deleteRequest(id)));\n            }\n        });\n    }\n    deleteUnconfirmedRequests() {\n        const _super = Object.create(null, {\n            signAndSendTransaction: {\n                get: ()=>super.signAndSendTransaction\n            }\n        });\n        return __awaiter(this, void 0, void 0, function*() {\n            // TODO: Delete in batch, don't delete unexpired\n            // TODO: Delete in batch, don't delete unexpired (can reduce gas usage dramatically)\n            const request_ids = yield this.getRequestIds();\n            const { requestId } = this.getRequest();\n            for (const requestIdToDelete of request_ids){\n                if (requestIdToDelete == requestId) {\n                    continue;\n                }\n                try {\n                    yield _super.signAndSendTransaction.call(this, {\n                        receiverId: this.accountId,\n                        actions: [\n                            functionCall(\"delete_request\", {\n                                request_id: requestIdToDelete\n                            }, constants_1.MULTISIG_GAS, constants_1.MULTISIG_DEPOSIT)\n                        ]\n                    });\n                } catch (e) {\n                    console.warn(\"Attempt to delete an earlier request before 15 minutes failed. Will try again.\");\n                }\n            }\n        });\n    }\n    // helpers\n    getRequestIds() {\n        return __awaiter(this, void 0, void 0, function*() {\n            // TODO: Read requests from state to allow filtering by expiration time\n            // TODO: https://github.com/near/core-contracts/blob/305d1db4f4f2cf5ce4c1ef3479f7544957381f11/multisig/src/lib.rs#L84\n            return this.viewFunction({\n                contractId: this.accountId,\n                methodName: \"list_request_ids\"\n            });\n        });\n    }\n    getRequest() {\n        if (this.storage) {\n            return JSON.parse(this.storage.getItem(constants_1.MULTISIG_STORAGE_KEY) || \"{}\");\n        }\n        return storageFallback[constants_1.MULTISIG_STORAGE_KEY];\n    }\n    setRequest(data) {\n        if (this.storage) {\n            return this.storage.setItem(constants_1.MULTISIG_STORAGE_KEY, JSON.stringify(data));\n        }\n        storageFallback[constants_1.MULTISIG_STORAGE_KEY] = data;\n    }\n}\nexports.AccountMultisig = AccountMultisig;\nconst convertPKForContract = (pk)=>pk.toString().replace(\"ed25519:\", \"\");\nconst convertActions = (actions, accountId, receiverId)=>actions.map((a)=>{\n        const type = a.enum;\n        const { gas, publicKey, methodName, args, deposit, accessKey, code } = a[type];\n        const action = {\n            type: type[0].toUpperCase() + type.substr(1),\n            gas: gas && gas.toString() || undefined,\n            public_key: publicKey && convertPKForContract(publicKey) || undefined,\n            method_name: methodName,\n            args: args && Buffer.from(args).toString(\"base64\") || undefined,\n            code: code && Buffer.from(code).toString(\"base64\") || undefined,\n            amount: deposit && deposit.toString() || undefined,\n            deposit: deposit && deposit.toString() || \"0\",\n            permission: undefined\n        };\n        if (accessKey) {\n            if (receiverId === accountId && accessKey.permission.enum !== \"fullAccess\") {\n                action.permission = {\n                    receiver_id: accountId,\n                    allowance: constants_1.MULTISIG_ALLOWANCE.toString(),\n                    method_names: constants_1.MULTISIG_CHANGE_METHODS\n                };\n            }\n            if (accessKey.permission.enum === \"functionCall\") {\n                const { receiverId: receiver_id, methodNames: method_names, allowance } = accessKey.permission.functionCall;\n                action.permission = {\n                    receiver_id,\n                    allowance: allowance && allowance.toString() || undefined,\n                    method_names\n                };\n            }\n        }\n        return action;\n    });\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@near-js/accounts/lib/account_multisig.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@near-js/accounts/lib/connection.js":
/*!**********************************************************!*\
  !*** ./node_modules/@near-js/accounts/lib/connection.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.Connection = void 0;\nconst signers_1 = __webpack_require__(/*! @near-js/signers */ \"(ssr)/./node_modules/@near-js/signers/lib/index.js\");\nconst providers_1 = __webpack_require__(/*! @near-js/providers */ \"(ssr)/./node_modules/@near-js/providers/lib/index.js\");\n/**\n * @param config Contains connection info details\n * @returns {Provider}\n */ function getProvider(config) {\n    switch(config.type){\n        case undefined:\n            return config;\n        case \"JsonRpcProvider\":\n            return new providers_1.JsonRpcProvider(Object.assign({}, config.args));\n        default:\n            throw new Error(`Unknown provider type ${config.type}`);\n    }\n}\n/**\n * @param config Contains connection info details\n * @returns {Signer}\n */ function getSigner(config) {\n    switch(config.type){\n        case undefined:\n            return config;\n        case \"InMemorySigner\":\n            {\n                return new signers_1.InMemorySigner(config.keyStore);\n            }\n        default:\n            throw new Error(`Unknown signer type ${config.type}`);\n    }\n}\n/**\n * Connects an account to a given network via a given provider\n */ class Connection {\n    constructor(networkId, provider, signer, jsvmAccountId){\n        this.networkId = networkId;\n        this.provider = provider;\n        this.signer = signer;\n        this.jsvmAccountId = jsvmAccountId;\n    }\n    /**\n     * @param config Contains connection info details\n     */ static fromConfig(config) {\n        const provider = getProvider(config.provider);\n        const signer = getSigner(config.signer);\n        return new Connection(config.networkId, provider, signer, config.jsvmAccountId);\n    }\n}\nexports.Connection = Connection;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG5lYXItanMvYWNjb3VudHMvbGliL2Nvbm5lY3Rpb24uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELGtCQUFrQixHQUFHLEtBQUs7QUFDMUIsTUFBTUcsWUFBWUMsbUJBQU9BLENBQUMsNEVBQWtCO0FBQzVDLE1BQU1DLGNBQWNELG1CQUFPQSxDQUFDLGdGQUFvQjtBQUNoRDs7O0NBR0MsR0FDRCxTQUFTRSxZQUFZQyxNQUFNO0lBQ3ZCLE9BQVFBLE9BQU9DLElBQUk7UUFDZixLQUFLQztZQUNELE9BQU9GO1FBQ1gsS0FBSztZQUFtQixPQUFPLElBQUlGLFlBQVlLLGVBQWUsQ0FBQ1osT0FBT2EsTUFBTSxDQUFDLENBQUMsR0FBR0osT0FBT0ssSUFBSTtRQUM1RjtZQUFTLE1BQU0sSUFBSUMsTUFBTSxDQUFDLHNCQUFzQixFQUFFTixPQUFPQyxJQUFJLENBQUMsQ0FBQztJQUNuRTtBQUNKO0FBQ0E7OztDQUdDLEdBQ0QsU0FBU00sVUFBVVAsTUFBTTtJQUNyQixPQUFRQSxPQUFPQyxJQUFJO1FBQ2YsS0FBS0M7WUFDRCxPQUFPRjtRQUNYLEtBQUs7WUFBa0I7Z0JBQ25CLE9BQU8sSUFBSUosVUFBVVksY0FBYyxDQUFDUixPQUFPUyxRQUFRO1lBQ3ZEO1FBQ0E7WUFBUyxNQUFNLElBQUlILE1BQU0sQ0FBQyxvQkFBb0IsRUFBRU4sT0FBT0MsSUFBSSxDQUFDLENBQUM7SUFDakU7QUFDSjtBQUNBOztDQUVDLEdBQ0QsTUFBTU47SUFDRmUsWUFBWUMsU0FBUyxFQUFFQyxRQUFRLEVBQUVDLE1BQU0sRUFBRUMsYUFBYSxDQUFFO1FBQ3BELElBQUksQ0FBQ0gsU0FBUyxHQUFHQTtRQUNqQixJQUFJLENBQUNDLFFBQVEsR0FBR0E7UUFDaEIsSUFBSSxDQUFDQyxNQUFNLEdBQUdBO1FBQ2QsSUFBSSxDQUFDQyxhQUFhLEdBQUdBO0lBQ3pCO0lBQ0E7O0tBRUMsR0FDRCxPQUFPQyxXQUFXZixNQUFNLEVBQUU7UUFDdEIsTUFBTVksV0FBV2IsWUFBWUMsT0FBT1ksUUFBUTtRQUM1QyxNQUFNQyxTQUFTTixVQUFVUCxPQUFPYSxNQUFNO1FBQ3RDLE9BQU8sSUFBSWxCLFdBQVdLLE9BQU9XLFNBQVMsRUFBRUMsVUFBVUMsUUFBUWIsT0FBT2MsYUFBYTtJQUNsRjtBQUNKO0FBQ0FyQixrQkFBa0IsR0FBR0UiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pLWFtLW5lYXJieS8uL25vZGVfbW9kdWxlcy9AbmVhci1qcy9hY2NvdW50cy9saWIvY29ubmVjdGlvbi5qcz8xZGZmIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Db25uZWN0aW9uID0gdm9pZCAwO1xuY29uc3Qgc2lnbmVyc18xID0gcmVxdWlyZShcIkBuZWFyLWpzL3NpZ25lcnNcIik7XG5jb25zdCBwcm92aWRlcnNfMSA9IHJlcXVpcmUoXCJAbmVhci1qcy9wcm92aWRlcnNcIik7XG4vKipcbiAqIEBwYXJhbSBjb25maWcgQ29udGFpbnMgY29ubmVjdGlvbiBpbmZvIGRldGFpbHNcbiAqIEByZXR1cm5zIHtQcm92aWRlcn1cbiAqL1xuZnVuY3Rpb24gZ2V0UHJvdmlkZXIoY29uZmlnKSB7XG4gICAgc3dpdGNoIChjb25maWcudHlwZSkge1xuICAgICAgICBjYXNlIHVuZGVmaW5lZDpcbiAgICAgICAgICAgIHJldHVybiBjb25maWc7XG4gICAgICAgIGNhc2UgJ0pzb25ScGNQcm92aWRlcic6IHJldHVybiBuZXcgcHJvdmlkZXJzXzEuSnNvblJwY1Byb3ZpZGVyKE9iamVjdC5hc3NpZ24oe30sIGNvbmZpZy5hcmdzKSk7XG4gICAgICAgIGRlZmF1bHQ6IHRocm93IG5ldyBFcnJvcihgVW5rbm93biBwcm92aWRlciB0eXBlICR7Y29uZmlnLnR5cGV9YCk7XG4gICAgfVxufVxuLyoqXG4gKiBAcGFyYW0gY29uZmlnIENvbnRhaW5zIGNvbm5lY3Rpb24gaW5mbyBkZXRhaWxzXG4gKiBAcmV0dXJucyB7U2lnbmVyfVxuICovXG5mdW5jdGlvbiBnZXRTaWduZXIoY29uZmlnKSB7XG4gICAgc3dpdGNoIChjb25maWcudHlwZSkge1xuICAgICAgICBjYXNlIHVuZGVmaW5lZDpcbiAgICAgICAgICAgIHJldHVybiBjb25maWc7XG4gICAgICAgIGNhc2UgJ0luTWVtb3J5U2lnbmVyJzoge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBzaWduZXJzXzEuSW5NZW1vcnlTaWduZXIoY29uZmlnLmtleVN0b3JlKTtcbiAgICAgICAgfVxuICAgICAgICBkZWZhdWx0OiB0aHJvdyBuZXcgRXJyb3IoYFVua25vd24gc2lnbmVyIHR5cGUgJHtjb25maWcudHlwZX1gKTtcbiAgICB9XG59XG4vKipcbiAqIENvbm5lY3RzIGFuIGFjY291bnQgdG8gYSBnaXZlbiBuZXR3b3JrIHZpYSBhIGdpdmVuIHByb3ZpZGVyXG4gKi9cbmNsYXNzIENvbm5lY3Rpb24ge1xuICAgIGNvbnN0cnVjdG9yKG5ldHdvcmtJZCwgcHJvdmlkZXIsIHNpZ25lciwganN2bUFjY291bnRJZCkge1xuICAgICAgICB0aGlzLm5ldHdvcmtJZCA9IG5ldHdvcmtJZDtcbiAgICAgICAgdGhpcy5wcm92aWRlciA9IHByb3ZpZGVyO1xuICAgICAgICB0aGlzLnNpZ25lciA9IHNpZ25lcjtcbiAgICAgICAgdGhpcy5qc3ZtQWNjb3VudElkID0ganN2bUFjY291bnRJZDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHBhcmFtIGNvbmZpZyBDb250YWlucyBjb25uZWN0aW9uIGluZm8gZGV0YWlsc1xuICAgICAqL1xuICAgIHN0YXRpYyBmcm9tQ29uZmlnKGNvbmZpZykge1xuICAgICAgICBjb25zdCBwcm92aWRlciA9IGdldFByb3ZpZGVyKGNvbmZpZy5wcm92aWRlcik7XG4gICAgICAgIGNvbnN0IHNpZ25lciA9IGdldFNpZ25lcihjb25maWcuc2lnbmVyKTtcbiAgICAgICAgcmV0dXJuIG5ldyBDb25uZWN0aW9uKGNvbmZpZy5uZXR3b3JrSWQsIHByb3ZpZGVyLCBzaWduZXIsIGNvbmZpZy5qc3ZtQWNjb3VudElkKTtcbiAgICB9XG59XG5leHBvcnRzLkNvbm5lY3Rpb24gPSBDb25uZWN0aW9uO1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiQ29ubmVjdGlvbiIsInNpZ25lcnNfMSIsInJlcXVpcmUiLCJwcm92aWRlcnNfMSIsImdldFByb3ZpZGVyIiwiY29uZmlnIiwidHlwZSIsInVuZGVmaW5lZCIsIkpzb25ScGNQcm92aWRlciIsImFzc2lnbiIsImFyZ3MiLCJFcnJvciIsImdldFNpZ25lciIsIkluTWVtb3J5U2lnbmVyIiwia2V5U3RvcmUiLCJjb25zdHJ1Y3RvciIsIm5ldHdvcmtJZCIsInByb3ZpZGVyIiwic2lnbmVyIiwianN2bUFjY291bnRJZCIsImZyb21Db25maWciXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@near-js/accounts/lib/connection.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@near-js/accounts/lib/constants.js":
/*!*********************************************************!*\
  !*** ./node_modules/@near-js/accounts/lib/constants.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = this && this.__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.MULTISIG_CONFIRM_METHODS = exports.MULTISIG_CHANGE_METHODS = exports.MULTISIG_DEPOSIT = exports.MULTISIG_GAS = exports.MULTISIG_ALLOWANCE = exports.MULTISIG_STORAGE_KEY = void 0;\nconst utils_1 = __webpack_require__(/*! @near-js/utils */ \"(ssr)/./node_modules/@near-js/utils/lib/index.js\");\nconst bn_js_1 = __importDefault(__webpack_require__(/*! bn.js */ \"(ssr)/./node_modules/bn.js/lib/bn.js\"));\nexports.MULTISIG_STORAGE_KEY = \"__multisigRequest\";\nexports.MULTISIG_ALLOWANCE = new bn_js_1.default((0, utils_1.parseNearAmount)(\"1\"));\n// TODO: Different gas value for different requests (can reduce gas usage dramatically)\nexports.MULTISIG_GAS = new bn_js_1.default(\"100000000000000\");\nexports.MULTISIG_DEPOSIT = new bn_js_1.default(\"0\");\nexports.MULTISIG_CHANGE_METHODS = [\n    \"add_request\",\n    \"add_request_and_confirm\",\n    \"delete_request\",\n    \"confirm\"\n];\nexports.MULTISIG_CONFIRM_METHODS = [\n    \"confirm\"\n];\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG5lYXItanMvYWNjb3VudHMvbGliL2NvbnN0YW50cy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLElBQUlBLGtCQUFrQixJQUFLLElBQUksSUFBSSxDQUFDQSxlQUFlLElBQUssU0FBVUMsR0FBRztJQUNqRSxPQUFPLE9BQVFBLElBQUlDLFVBQVUsR0FBSUQsTUFBTTtRQUFFLFdBQVdBO0lBQUk7QUFDNUQ7QUFDQUUsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELGdDQUFnQyxHQUFHQSwrQkFBK0IsR0FBR0Esd0JBQXdCLEdBQUdBLG9CQUFvQixHQUFHQSwwQkFBMEIsR0FBR0EsNEJBQTRCLEdBQUcsS0FBSztBQUN4TCxNQUFNUSxVQUFVQyxtQkFBT0EsQ0FBQyx3RUFBZ0I7QUFDeEMsTUFBTUMsVUFBVWYsZ0JBQWdCYyxtQkFBT0EsQ0FBQyxtREFBTztBQUMvQ1QsNEJBQTRCLEdBQUc7QUFDL0JBLDBCQUEwQixHQUFHLElBQUlVLFFBQVFDLE9BQU8sQ0FBQyxDQUFDLEdBQUdILFFBQVFJLGVBQWUsRUFBRTtBQUM5RSx1RkFBdUY7QUFDdkZaLG9CQUFvQixHQUFHLElBQUlVLFFBQVFDLE9BQU8sQ0FBQztBQUMzQ1gsd0JBQXdCLEdBQUcsSUFBSVUsUUFBUUMsT0FBTyxDQUFDO0FBQy9DWCwrQkFBK0IsR0FBRztJQUFDO0lBQWU7SUFBMkI7SUFBa0I7Q0FBVTtBQUN6R0EsZ0NBQWdDLEdBQUc7SUFBQztDQUFVIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaS1hbS1uZWFyYnkvLi9ub2RlX21vZHVsZXMvQG5lYXItanMvYWNjb3VudHMvbGliL2NvbnN0YW50cy5qcz8xYmY4Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5NVUxUSVNJR19DT05GSVJNX01FVEhPRFMgPSBleHBvcnRzLk1VTFRJU0lHX0NIQU5HRV9NRVRIT0RTID0gZXhwb3J0cy5NVUxUSVNJR19ERVBPU0lUID0gZXhwb3J0cy5NVUxUSVNJR19HQVMgPSBleHBvcnRzLk1VTFRJU0lHX0FMTE9XQU5DRSA9IGV4cG9ydHMuTVVMVElTSUdfU1RPUkFHRV9LRVkgPSB2b2lkIDA7XG5jb25zdCB1dGlsc18xID0gcmVxdWlyZShcIkBuZWFyLWpzL3V0aWxzXCIpO1xuY29uc3QgYm5fanNfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiYm4uanNcIikpO1xuZXhwb3J0cy5NVUxUSVNJR19TVE9SQUdFX0tFWSA9ICdfX211bHRpc2lnUmVxdWVzdCc7XG5leHBvcnRzLk1VTFRJU0lHX0FMTE9XQU5DRSA9IG5ldyBibl9qc18xLmRlZmF1bHQoKDAsIHV0aWxzXzEucGFyc2VOZWFyQW1vdW50KSgnMScpKTtcbi8vIFRPRE86IERpZmZlcmVudCBnYXMgdmFsdWUgZm9yIGRpZmZlcmVudCByZXF1ZXN0cyAoY2FuIHJlZHVjZSBnYXMgdXNhZ2UgZHJhbWF0aWNhbGx5KVxuZXhwb3J0cy5NVUxUSVNJR19HQVMgPSBuZXcgYm5fanNfMS5kZWZhdWx0KCcxMDAwMDAwMDAwMDAwMDAnKTtcbmV4cG9ydHMuTVVMVElTSUdfREVQT1NJVCA9IG5ldyBibl9qc18xLmRlZmF1bHQoJzAnKTtcbmV4cG9ydHMuTVVMVElTSUdfQ0hBTkdFX01FVEhPRFMgPSBbJ2FkZF9yZXF1ZXN0JywgJ2FkZF9yZXF1ZXN0X2FuZF9jb25maXJtJywgJ2RlbGV0ZV9yZXF1ZXN0JywgJ2NvbmZpcm0nXTtcbmV4cG9ydHMuTVVMVElTSUdfQ09ORklSTV9NRVRIT0RTID0gWydjb25maXJtJ107XG4iXSwibmFtZXMiOlsiX19pbXBvcnREZWZhdWx0IiwibW9kIiwiX19lc01vZHVsZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiTVVMVElTSUdfQ09ORklSTV9NRVRIT0RTIiwiTVVMVElTSUdfQ0hBTkdFX01FVEhPRFMiLCJNVUxUSVNJR19ERVBPU0lUIiwiTVVMVElTSUdfR0FTIiwiTVVMVElTSUdfQUxMT1dBTkNFIiwiTVVMVElTSUdfU1RPUkFHRV9LRVkiLCJ1dGlsc18xIiwicmVxdWlyZSIsImJuX2pzXzEiLCJkZWZhdWx0IiwicGFyc2VOZWFyQW1vdW50Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@near-js/accounts/lib/constants.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@near-js/accounts/lib/contract.js":
/*!********************************************************!*\
  !*** ./node_modules/@near-js/accounts/lib/contract.js ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n        });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = this && this.__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.Contract = void 0;\nconst utils_1 = __webpack_require__(/*! @near-js/utils */ \"(ssr)/./node_modules/@near-js/utils/lib/index.js\");\nconst types_1 = __webpack_require__(/*! @near-js/types */ \"(ssr)/./node_modules/@near-js/types/lib/index.js\");\nconst ajv_1 = __importDefault(__webpack_require__(/*! ajv */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/ajv.js\"));\nconst ajv_formats_1 = __importDefault(__webpack_require__(/*! ajv-formats */ \"(ssr)/./node_modules/ajv-formats/dist/index.js\"));\nconst bn_js_1 = __importDefault(__webpack_require__(/*! bn.js */ \"(ssr)/./node_modules/bn.js/lib/bn.js\"));\nconst depd_1 = __importDefault(__webpack_require__(/*! depd */ \"(ssr)/./node_modules/depd/index.js\"));\nconst near_abi_1 = __webpack_require__(/*! near-abi */ \"(ssr)/./node_modules/near-abi/lib/index.js\");\nconst errors_1 = __webpack_require__(/*! ./errors */ \"(ssr)/./node_modules/@near-js/accounts/lib/errors.js\");\n// Makes `function.name` return given name\nfunction nameFunction(name, body) {\n    return ({\n        [name] (...args) {\n            return body(...args);\n        }\n    })[name];\n}\nfunction validateArguments(args, abiFunction, ajv, abiRoot) {\n    var _a;\n    if (!isObject(args)) return;\n    if (abiFunction.params && abiFunction.params.serialization_type !== near_abi_1.AbiSerializationType.Json) {\n        throw new errors_1.UnsupportedSerializationError(abiFunction.name, abiFunction.params.serialization_type);\n    }\n    if (abiFunction.result && abiFunction.result.serialization_type !== near_abi_1.AbiSerializationType.Json) {\n        throw new errors_1.UnsupportedSerializationError(abiFunction.name, abiFunction.result.serialization_type);\n    }\n    const params = ((_a = abiFunction.params) === null || _a === void 0 ? void 0 : _a.args) || [];\n    for (const p of params){\n        const arg = args[p.name];\n        const typeSchema = p.type_schema;\n        typeSchema.definitions = abiRoot.body.root_schema.definitions;\n        const validate = ajv.compile(typeSchema);\n        if (!validate(arg)) {\n            throw new errors_1.ArgumentSchemaError(p.name, validate.errors);\n        }\n    }\n    // Check there are no extra unknown arguments passed\n    for (const argName of Object.keys(args)){\n        const param = params.find((p)=>p.name === argName);\n        if (!param) {\n            throw new errors_1.UnknownArgumentError(argName, params.map((p)=>p.name));\n        }\n    }\n}\nfunction createAjv() {\n    // Strict mode is disabled for now as it complains about unknown formats. We need to\n    // figure out if we want to support a fixed set of formats. `uint32` and `uint64`\n    // are added explicitly just to reduce the amount of warnings as these are very popular\n    // types.\n    const ajv = new ajv_1.default({\n        strictSchema: false,\n        formats: {\n            uint32: true,\n            uint64: true\n        }\n    });\n    (0, ajv_formats_1.default)(ajv);\n    return ajv;\n}\nconst isUint8Array = (x)=>x && x.byteLength !== undefined && x.byteLength === x.length;\nconst isObject = (x)=>Object.prototype.toString.call(x) === \"[object Object]\";\n/**\n * Defines a smart contract on NEAR including the change (mutable) and view (non-mutable) methods\n *\n * @see [https://docs.near.org/tools/near-api-js/quick-reference#contract](https://docs.near.org/tools/near-api-js/quick-reference#contract)\n * @example\n * ```js\n * import { Contract } from 'near-api-js';\n *\n * async function contractExample() {\n *   const methodOptions = {\n *     viewMethods: ['getMessageByAccountId'],\n *     changeMethods: ['addMessage']\n *   };\n *   const contract = new Contract(\n *     wallet.account(),\n *     'contract-id.testnet',\n *     methodOptions\n *   );\n *\n *   // use a contract view method\n *   const messages = await contract.getMessages({\n *     accountId: 'example-account.testnet'\n *   });\n *\n *   // use a contract change method\n *   await contract.addMessage({\n *      meta: 'some info',\n *      callbackUrl: 'https://example.com/callback',\n *      args: { text: 'my message' },\n *      amount: 1\n *   })\n * }\n * ```\n */ class Contract {\n    /**\n     * @param account NEAR account to sign change method transactions\n     * @param contractId NEAR account id where the contract is deployed\n     * @param options NEAR smart contract methods that your application will use. These will be available as `contract.methodName`\n     */ constructor(account, contractId, options){\n        this.account = account;\n        this.contractId = contractId;\n        const { viewMethods = [], changeMethods = [], abi: abiRoot } = options;\n        let viewMethodsWithAbi = viewMethods.map((name)=>({\n                name,\n                abi: null\n            }));\n        let changeMethodsWithAbi = changeMethods.map((name)=>({\n                name,\n                abi: null\n            }));\n        if (abiRoot) {\n            if (viewMethodsWithAbi.length > 0 || changeMethodsWithAbi.length > 0) {\n                throw new errors_1.ConflictingOptions();\n            }\n            viewMethodsWithAbi = abiRoot.body.functions.filter((m)=>m.kind === near_abi_1.AbiFunctionKind.View).map((m)=>({\n                    name: m.name,\n                    abi: m\n                }));\n            changeMethodsWithAbi = abiRoot.body.functions.filter((methodAbi)=>methodAbi.kind === near_abi_1.AbiFunctionKind.Call).map((methodAbi)=>({\n                    name: methodAbi.name,\n                    abi: methodAbi\n                }));\n        }\n        const ajv = createAjv();\n        viewMethodsWithAbi.forEach(({ name, abi })=>{\n            Object.defineProperty(this, name, {\n                writable: false,\n                enumerable: true,\n                value: nameFunction(name, (args = {}, options = {}, ...ignored)=>__awaiter(this, void 0, void 0, function*() {\n                        if (ignored.length || !(isObject(args) || isUint8Array(args)) || !isObject(options)) {\n                            throw new types_1.PositionalArgsError();\n                        }\n                        if (abi) {\n                            validateArguments(args, abi, ajv, abiRoot);\n                        }\n                        return this.account.viewFunction(Object.assign({\n                            contractId: this.contractId,\n                            methodName: name,\n                            args\n                        }, options));\n                    }))\n            });\n        });\n        changeMethodsWithAbi.forEach(({ name, abi })=>{\n            Object.defineProperty(this, name, {\n                writable: false,\n                enumerable: true,\n                value: nameFunction(name, (...args)=>__awaiter(this, void 0, void 0, function*() {\n                        if (args.length && (args.length > 3 || !(isObject(args[0]) || isUint8Array(args[0])))) {\n                            throw new types_1.PositionalArgsError();\n                        }\n                        if (args.length > 1 || !(args[0] && args[0].args)) {\n                            const deprecate = (0, depd_1.default)(\"contract.methodName(args, gas, amount)\");\n                            deprecate(\"use `contract.methodName({ args, gas?, amount?, callbackUrl?, meta? })` instead\");\n                            args[0] = {\n                                args: args[0],\n                                gas: args[1],\n                                amount: args[2]\n                            };\n                        }\n                        if (abi) {\n                            validateArguments(args[0].args, abi, ajv, abiRoot);\n                        }\n                        return this._changeMethod(Object.assign({\n                            methodName: name\n                        }, args[0]));\n                    }))\n            });\n        });\n    }\n    _changeMethod({ args, methodName, gas, amount, meta, callbackUrl }) {\n        return __awaiter(this, void 0, void 0, function*() {\n            validateBNLike({\n                gas,\n                amount\n            });\n            const rawResult = yield this.account.functionCall({\n                contractId: this.contractId,\n                methodName,\n                args,\n                gas,\n                attachedDeposit: amount,\n                walletMeta: meta,\n                walletCallbackUrl: callbackUrl\n            });\n            return (0, utils_1.getTransactionLastResult)(rawResult);\n        });\n    }\n}\nexports.Contract = Contract;\n/**\n * Validation on arguments being a big number from bn.js\n * Throws if an argument is not in BN format or otherwise invalid\n * @param argMap\n */ function validateBNLike(argMap) {\n    const bnLike = \"number, decimal string or BN\";\n    for (const argName of Object.keys(argMap)){\n        const argValue = argMap[argName];\n        if (argValue && !bn_js_1.default.isBN(argValue) && isNaN(argValue)) {\n            throw new types_1.ArgumentTypeError(argName, bnLike, argValue);\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@near-js/accounts/lib/contract.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@near-js/accounts/lib/errors.js":
/*!******************************************************!*\
  !*** ./node_modules/@near-js/accounts/lib/errors.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.ConflictingOptions = exports.ArgumentSchemaError = exports.UnknownArgumentError = exports.UnsupportedSerializationError = void 0;\nclass UnsupportedSerializationError extends Error {\n    constructor(methodName, serializationType){\n        super(`Contract method '${methodName}' is using an unsupported serialization type ${serializationType}`);\n    }\n}\nexports.UnsupportedSerializationError = UnsupportedSerializationError;\nclass UnknownArgumentError extends Error {\n    constructor(actualArgName, expectedArgNames){\n        super(`Unrecognized argument '${actualArgName}', expected '${JSON.stringify(expectedArgNames)}'`);\n    }\n}\nexports.UnknownArgumentError = UnknownArgumentError;\nclass ArgumentSchemaError extends Error {\n    constructor(argName, errors){\n        super(`Argument '${argName}' does not conform to the specified ABI schema: '${JSON.stringify(errors)}'`);\n    }\n}\nexports.ArgumentSchemaError = ArgumentSchemaError;\nclass ConflictingOptions extends Error {\n    constructor(){\n        super(\"Conflicting contract method options have been passed. You can either specify ABI or a list of view/call methods.\");\n    }\n}\nexports.ConflictingOptions = ConflictingOptions;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG5lYXItanMvYWNjb3VudHMvbGliL2Vycm9ycy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsMEJBQTBCLEdBQUdBLDJCQUEyQixHQUFHQSw0QkFBNEIsR0FBR0EscUNBQXFDLEdBQUcsS0FBSztBQUN2SSxNQUFNSyxzQ0FBc0NDO0lBQ3hDQyxZQUFZQyxVQUFVLEVBQUVDLGlCQUFpQixDQUFFO1FBQ3ZDLEtBQUssQ0FBQyxDQUFDLGlCQUFpQixFQUFFRCxXQUFXLDZDQUE2QyxFQUFFQyxrQkFBa0IsQ0FBQztJQUMzRztBQUNKO0FBQ0FULHFDQUFxQyxHQUFHSztBQUN4QyxNQUFNRCw2QkFBNkJFO0lBQy9CQyxZQUFZRyxhQUFhLEVBQUVDLGdCQUFnQixDQUFFO1FBQ3pDLEtBQUssQ0FBQyxDQUFDLHVCQUF1QixFQUFFRCxjQUFjLGFBQWEsRUFBRUUsS0FBS0MsU0FBUyxDQUFDRixrQkFBa0IsQ0FBQyxDQUFDO0lBQ3BHO0FBQ0o7QUFDQVgsNEJBQTRCLEdBQUdJO0FBQy9CLE1BQU1ELDRCQUE0Qkc7SUFDOUJDLFlBQVlPLE9BQU8sRUFBRUMsTUFBTSxDQUFFO1FBQ3pCLEtBQUssQ0FBQyxDQUFDLFVBQVUsRUFBRUQsUUFBUSxpREFBaUQsRUFBRUYsS0FBS0MsU0FBUyxDQUFDRSxRQUFRLENBQUMsQ0FBQztJQUMzRztBQUNKO0FBQ0FmLDJCQUEyQixHQUFHRztBQUM5QixNQUFNRCwyQkFBMkJJO0lBQzdCQyxhQUFjO1FBQ1YsS0FBSyxDQUFDO0lBQ1Y7QUFDSjtBQUNBUCwwQkFBMEIsR0FBR0UiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pLWFtLW5lYXJieS8uL25vZGVfbW9kdWxlcy9AbmVhci1qcy9hY2NvdW50cy9saWIvZXJyb3JzLmpzP2VhNDYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkNvbmZsaWN0aW5nT3B0aW9ucyA9IGV4cG9ydHMuQXJndW1lbnRTY2hlbWFFcnJvciA9IGV4cG9ydHMuVW5rbm93bkFyZ3VtZW50RXJyb3IgPSBleHBvcnRzLlVuc3VwcG9ydGVkU2VyaWFsaXphdGlvbkVycm9yID0gdm9pZCAwO1xuY2xhc3MgVW5zdXBwb3J0ZWRTZXJpYWxpemF0aW9uRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gICAgY29uc3RydWN0b3IobWV0aG9kTmFtZSwgc2VyaWFsaXphdGlvblR5cGUpIHtcbiAgICAgICAgc3VwZXIoYENvbnRyYWN0IG1ldGhvZCAnJHttZXRob2ROYW1lfScgaXMgdXNpbmcgYW4gdW5zdXBwb3J0ZWQgc2VyaWFsaXphdGlvbiB0eXBlICR7c2VyaWFsaXphdGlvblR5cGV9YCk7XG4gICAgfVxufVxuZXhwb3J0cy5VbnN1cHBvcnRlZFNlcmlhbGl6YXRpb25FcnJvciA9IFVuc3VwcG9ydGVkU2VyaWFsaXphdGlvbkVycm9yO1xuY2xhc3MgVW5rbm93bkFyZ3VtZW50RXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gICAgY29uc3RydWN0b3IoYWN0dWFsQXJnTmFtZSwgZXhwZWN0ZWRBcmdOYW1lcykge1xuICAgICAgICBzdXBlcihgVW5yZWNvZ25pemVkIGFyZ3VtZW50ICcke2FjdHVhbEFyZ05hbWV9JywgZXhwZWN0ZWQgJyR7SlNPTi5zdHJpbmdpZnkoZXhwZWN0ZWRBcmdOYW1lcyl9J2ApO1xuICAgIH1cbn1cbmV4cG9ydHMuVW5rbm93bkFyZ3VtZW50RXJyb3IgPSBVbmtub3duQXJndW1lbnRFcnJvcjtcbmNsYXNzIEFyZ3VtZW50U2NoZW1hRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gICAgY29uc3RydWN0b3IoYXJnTmFtZSwgZXJyb3JzKSB7XG4gICAgICAgIHN1cGVyKGBBcmd1bWVudCAnJHthcmdOYW1lfScgZG9lcyBub3QgY29uZm9ybSB0byB0aGUgc3BlY2lmaWVkIEFCSSBzY2hlbWE6ICcke0pTT04uc3RyaW5naWZ5KGVycm9ycyl9J2ApO1xuICAgIH1cbn1cbmV4cG9ydHMuQXJndW1lbnRTY2hlbWFFcnJvciA9IEFyZ3VtZW50U2NoZW1hRXJyb3I7XG5jbGFzcyBDb25mbGljdGluZ09wdGlvbnMgZXh0ZW5kcyBFcnJvciB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCdDb25mbGljdGluZyBjb250cmFjdCBtZXRob2Qgb3B0aW9ucyBoYXZlIGJlZW4gcGFzc2VkLiBZb3UgY2FuIGVpdGhlciBzcGVjaWZ5IEFCSSBvciBhIGxpc3Qgb2Ygdmlldy9jYWxsIG1ldGhvZHMuJyk7XG4gICAgfVxufVxuZXhwb3J0cy5Db25mbGljdGluZ09wdGlvbnMgPSBDb25mbGljdGluZ09wdGlvbnM7XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJDb25mbGljdGluZ09wdGlvbnMiLCJBcmd1bWVudFNjaGVtYUVycm9yIiwiVW5rbm93bkFyZ3VtZW50RXJyb3IiLCJVbnN1cHBvcnRlZFNlcmlhbGl6YXRpb25FcnJvciIsIkVycm9yIiwiY29uc3RydWN0b3IiLCJtZXRob2ROYW1lIiwic2VyaWFsaXphdGlvblR5cGUiLCJhY3R1YWxBcmdOYW1lIiwiZXhwZWN0ZWRBcmdOYW1lcyIsIkpTT04iLCJzdHJpbmdpZnkiLCJhcmdOYW1lIiwiZXJyb3JzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@near-js/accounts/lib/errors.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@near-js/accounts/lib/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/@near-js/accounts/lib/index.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.MultisigStateStatus = exports.MultisigDeleteRequestRejectionError = exports.UnsupportedSerializationError = exports.UnknownArgumentError = exports.ConflictingOptions = exports.ArgumentSchemaError = exports.Contract = exports.MULTISIG_CONFIRM_METHODS = exports.MULTISIG_CHANGE_METHODS = exports.MULTISIG_DEPOSIT = exports.MULTISIG_GAS = exports.MULTISIG_ALLOWANCE = exports.MULTISIG_STORAGE_KEY = exports.Connection = exports.AccountMultisig = exports.UrlAccountCreator = exports.LocalAccountCreator = exports.AccountCreator = exports.Account2FA = exports.Account = void 0;\nvar account_1 = __webpack_require__(/*! ./account */ \"(ssr)/./node_modules/@near-js/accounts/lib/account.js\");\nObject.defineProperty(exports, \"Account\", ({\n    enumerable: true,\n    get: function() {\n        return account_1.Account;\n    }\n}));\nvar account_2fa_1 = __webpack_require__(/*! ./account_2fa */ \"(ssr)/./node_modules/@near-js/accounts/lib/account_2fa.js\");\nObject.defineProperty(exports, \"Account2FA\", ({\n    enumerable: true,\n    get: function() {\n        return account_2fa_1.Account2FA;\n    }\n}));\nvar account_creator_1 = __webpack_require__(/*! ./account_creator */ \"(ssr)/./node_modules/@near-js/accounts/lib/account_creator.js\");\nObject.defineProperty(exports, \"AccountCreator\", ({\n    enumerable: true,\n    get: function() {\n        return account_creator_1.AccountCreator;\n    }\n}));\nObject.defineProperty(exports, \"LocalAccountCreator\", ({\n    enumerable: true,\n    get: function() {\n        return account_creator_1.LocalAccountCreator;\n    }\n}));\nObject.defineProperty(exports, \"UrlAccountCreator\", ({\n    enumerable: true,\n    get: function() {\n        return account_creator_1.UrlAccountCreator;\n    }\n}));\nvar account_multisig_1 = __webpack_require__(/*! ./account_multisig */ \"(ssr)/./node_modules/@near-js/accounts/lib/account_multisig.js\");\nObject.defineProperty(exports, \"AccountMultisig\", ({\n    enumerable: true,\n    get: function() {\n        return account_multisig_1.AccountMultisig;\n    }\n}));\nvar connection_1 = __webpack_require__(/*! ./connection */ \"(ssr)/./node_modules/@near-js/accounts/lib/connection.js\");\nObject.defineProperty(exports, \"Connection\", ({\n    enumerable: true,\n    get: function() {\n        return connection_1.Connection;\n    }\n}));\nvar constants_1 = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/@near-js/accounts/lib/constants.js\");\nObject.defineProperty(exports, \"MULTISIG_STORAGE_KEY\", ({\n    enumerable: true,\n    get: function() {\n        return constants_1.MULTISIG_STORAGE_KEY;\n    }\n}));\nObject.defineProperty(exports, \"MULTISIG_ALLOWANCE\", ({\n    enumerable: true,\n    get: function() {\n        return constants_1.MULTISIG_ALLOWANCE;\n    }\n}));\nObject.defineProperty(exports, \"MULTISIG_GAS\", ({\n    enumerable: true,\n    get: function() {\n        return constants_1.MULTISIG_GAS;\n    }\n}));\nObject.defineProperty(exports, \"MULTISIG_DEPOSIT\", ({\n    enumerable: true,\n    get: function() {\n        return constants_1.MULTISIG_DEPOSIT;\n    }\n}));\nObject.defineProperty(exports, \"MULTISIG_CHANGE_METHODS\", ({\n    enumerable: true,\n    get: function() {\n        return constants_1.MULTISIG_CHANGE_METHODS;\n    }\n}));\nObject.defineProperty(exports, \"MULTISIG_CONFIRM_METHODS\", ({\n    enumerable: true,\n    get: function() {\n        return constants_1.MULTISIG_CONFIRM_METHODS;\n    }\n}));\nvar contract_1 = __webpack_require__(/*! ./contract */ \"(ssr)/./node_modules/@near-js/accounts/lib/contract.js\");\nObject.defineProperty(exports, \"Contract\", ({\n    enumerable: true,\n    get: function() {\n        return contract_1.Contract;\n    }\n}));\nvar errors_1 = __webpack_require__(/*! ./errors */ \"(ssr)/./node_modules/@near-js/accounts/lib/errors.js\");\nObject.defineProperty(exports, \"ArgumentSchemaError\", ({\n    enumerable: true,\n    get: function() {\n        return errors_1.ArgumentSchemaError;\n    }\n}));\nObject.defineProperty(exports, \"ConflictingOptions\", ({\n    enumerable: true,\n    get: function() {\n        return errors_1.ConflictingOptions;\n    }\n}));\nObject.defineProperty(exports, \"UnknownArgumentError\", ({\n    enumerable: true,\n    get: function() {\n        return errors_1.UnknownArgumentError;\n    }\n}));\nObject.defineProperty(exports, \"UnsupportedSerializationError\", ({\n    enumerable: true,\n    get: function() {\n        return errors_1.UnsupportedSerializationError;\n    }\n}));\nvar types_1 = __webpack_require__(/*! ./types */ \"(ssr)/./node_modules/@near-js/accounts/lib/types.js\");\nObject.defineProperty(exports, \"MultisigDeleteRequestRejectionError\", ({\n    enumerable: true,\n    get: function() {\n        return types_1.MultisigDeleteRequestRejectionError;\n    }\n}));\nObject.defineProperty(exports, \"MultisigStateStatus\", ({\n    enumerable: true,\n    get: function() {\n        return types_1.MultisigStateStatus;\n    }\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@near-js/accounts/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@near-js/accounts/lib/types.js":
/*!*****************************************************!*\
  !*** ./node_modules/@near-js/accounts/lib/types.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.MultisigStateStatus = exports.MultisigDeleteRequestRejectionError = void 0;\nvar MultisigDeleteRequestRejectionError;\n(function(MultisigDeleteRequestRejectionError) {\n    MultisigDeleteRequestRejectionError[\"CANNOT_DESERIALIZE_STATE\"] = \"Cannot deserialize the contract state\";\n    MultisigDeleteRequestRejectionError[\"MULTISIG_NOT_INITIALIZED\"] = \"Smart contract panicked: Multisig contract should be initialized before usage\";\n    MultisigDeleteRequestRejectionError[\"NO_SUCH_REQUEST\"] = \"Smart contract panicked: panicked at 'No such request: either wrong number or already confirmed'\";\n    MultisigDeleteRequestRejectionError[\"REQUEST_COOLDOWN_ERROR\"] = \"Request cannot be deleted immediately after creation.\";\n    MultisigDeleteRequestRejectionError[\"METHOD_NOT_FOUND\"] = \"Contract method is not found\";\n})(MultisigDeleteRequestRejectionError = exports.MultisigDeleteRequestRejectionError || (exports.MultisigDeleteRequestRejectionError = {}));\nvar MultisigStateStatus;\n(function(MultisigStateStatus) {\n    MultisigStateStatus[MultisigStateStatus[\"INVALID_STATE\"] = 0] = \"INVALID_STATE\";\n    MultisigStateStatus[MultisigStateStatus[\"STATE_NOT_INITIALIZED\"] = 1] = \"STATE_NOT_INITIALIZED\";\n    MultisigStateStatus[MultisigStateStatus[\"VALID_STATE\"] = 2] = \"VALID_STATE\";\n    MultisigStateStatus[MultisigStateStatus[\"UNKNOWN_STATE\"] = 3] = \"UNKNOWN_STATE\";\n})(MultisigStateStatus = exports.MultisigStateStatus || (exports.MultisigStateStatus = {}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG5lYXItanMvYWNjb3VudHMvbGliL3R5cGVzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCwyQkFBMkIsR0FBR0EsMkNBQTJDLEdBQUcsS0FBSztBQUNqRixJQUFJRztBQUNILFVBQVVBLG1DQUFtQztJQUMxQ0EsbUNBQW1DLENBQUMsMkJBQTJCLEdBQUc7SUFDbEVBLG1DQUFtQyxDQUFDLDJCQUEyQixHQUFHO0lBQ2xFQSxtQ0FBbUMsQ0FBQyxrQkFBa0IsR0FBRztJQUN6REEsbUNBQW1DLENBQUMseUJBQXlCLEdBQUc7SUFDaEVBLG1DQUFtQyxDQUFDLG1CQUFtQixHQUFHO0FBQzlELEdBQUdBLHNDQUFzQ0gsUUFBUUcsbUNBQW1DLElBQUtILENBQUFBLDJDQUEyQyxHQUFHLENBQUM7QUFDeEksSUFBSUU7QUFDSCxVQUFVQSxtQkFBbUI7SUFDMUJBLG1CQUFtQixDQUFDQSxtQkFBbUIsQ0FBQyxnQkFBZ0IsR0FBRyxFQUFFLEdBQUc7SUFDaEVBLG1CQUFtQixDQUFDQSxtQkFBbUIsQ0FBQyx3QkFBd0IsR0FBRyxFQUFFLEdBQUc7SUFDeEVBLG1CQUFtQixDQUFDQSxtQkFBbUIsQ0FBQyxjQUFjLEdBQUcsRUFBRSxHQUFHO0lBQzlEQSxtQkFBbUIsQ0FBQ0EsbUJBQW1CLENBQUMsZ0JBQWdCLEdBQUcsRUFBRSxHQUFHO0FBQ3BFLEdBQUdBLHNCQUFzQkYsUUFBUUUsbUJBQW1CLElBQUtGLENBQUFBLDJCQUEyQixHQUFHLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pLWFtLW5lYXJieS8uL25vZGVfbW9kdWxlcy9AbmVhci1qcy9hY2NvdW50cy9saWIvdHlwZXMuanM/YTNiZiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuTXVsdGlzaWdTdGF0ZVN0YXR1cyA9IGV4cG9ydHMuTXVsdGlzaWdEZWxldGVSZXF1ZXN0UmVqZWN0aW9uRXJyb3IgPSB2b2lkIDA7XG52YXIgTXVsdGlzaWdEZWxldGVSZXF1ZXN0UmVqZWN0aW9uRXJyb3I7XG4oZnVuY3Rpb24gKE11bHRpc2lnRGVsZXRlUmVxdWVzdFJlamVjdGlvbkVycm9yKSB7XG4gICAgTXVsdGlzaWdEZWxldGVSZXF1ZXN0UmVqZWN0aW9uRXJyb3JbXCJDQU5OT1RfREVTRVJJQUxJWkVfU1RBVEVcIl0gPSBcIkNhbm5vdCBkZXNlcmlhbGl6ZSB0aGUgY29udHJhY3Qgc3RhdGVcIjtcbiAgICBNdWx0aXNpZ0RlbGV0ZVJlcXVlc3RSZWplY3Rpb25FcnJvcltcIk1VTFRJU0lHX05PVF9JTklUSUFMSVpFRFwiXSA9IFwiU21hcnQgY29udHJhY3QgcGFuaWNrZWQ6IE11bHRpc2lnIGNvbnRyYWN0IHNob3VsZCBiZSBpbml0aWFsaXplZCBiZWZvcmUgdXNhZ2VcIjtcbiAgICBNdWx0aXNpZ0RlbGV0ZVJlcXVlc3RSZWplY3Rpb25FcnJvcltcIk5PX1NVQ0hfUkVRVUVTVFwiXSA9IFwiU21hcnQgY29udHJhY3QgcGFuaWNrZWQ6IHBhbmlja2VkIGF0ICdObyBzdWNoIHJlcXVlc3Q6IGVpdGhlciB3cm9uZyBudW1iZXIgb3IgYWxyZWFkeSBjb25maXJtZWQnXCI7XG4gICAgTXVsdGlzaWdEZWxldGVSZXF1ZXN0UmVqZWN0aW9uRXJyb3JbXCJSRVFVRVNUX0NPT0xET1dOX0VSUk9SXCJdID0gXCJSZXF1ZXN0IGNhbm5vdCBiZSBkZWxldGVkIGltbWVkaWF0ZWx5IGFmdGVyIGNyZWF0aW9uLlwiO1xuICAgIE11bHRpc2lnRGVsZXRlUmVxdWVzdFJlamVjdGlvbkVycm9yW1wiTUVUSE9EX05PVF9GT1VORFwiXSA9IFwiQ29udHJhY3QgbWV0aG9kIGlzIG5vdCBmb3VuZFwiO1xufSkoTXVsdGlzaWdEZWxldGVSZXF1ZXN0UmVqZWN0aW9uRXJyb3IgPSBleHBvcnRzLk11bHRpc2lnRGVsZXRlUmVxdWVzdFJlamVjdGlvbkVycm9yIHx8IChleHBvcnRzLk11bHRpc2lnRGVsZXRlUmVxdWVzdFJlamVjdGlvbkVycm9yID0ge30pKTtcbnZhciBNdWx0aXNpZ1N0YXRlU3RhdHVzO1xuKGZ1bmN0aW9uIChNdWx0aXNpZ1N0YXRlU3RhdHVzKSB7XG4gICAgTXVsdGlzaWdTdGF0ZVN0YXR1c1tNdWx0aXNpZ1N0YXRlU3RhdHVzW1wiSU5WQUxJRF9TVEFURVwiXSA9IDBdID0gXCJJTlZBTElEX1NUQVRFXCI7XG4gICAgTXVsdGlzaWdTdGF0ZVN0YXR1c1tNdWx0aXNpZ1N0YXRlU3RhdHVzW1wiU1RBVEVfTk9UX0lOSVRJQUxJWkVEXCJdID0gMV0gPSBcIlNUQVRFX05PVF9JTklUSUFMSVpFRFwiO1xuICAgIE11bHRpc2lnU3RhdGVTdGF0dXNbTXVsdGlzaWdTdGF0ZVN0YXR1c1tcIlZBTElEX1NUQVRFXCJdID0gMl0gPSBcIlZBTElEX1NUQVRFXCI7XG4gICAgTXVsdGlzaWdTdGF0ZVN0YXR1c1tNdWx0aXNpZ1N0YXRlU3RhdHVzW1wiVU5LTk9XTl9TVEFURVwiXSA9IDNdID0gXCJVTktOT1dOX1NUQVRFXCI7XG59KShNdWx0aXNpZ1N0YXRlU3RhdHVzID0gZXhwb3J0cy5NdWx0aXNpZ1N0YXRlU3RhdHVzIHx8IChleHBvcnRzLk11bHRpc2lnU3RhdGVTdGF0dXMgPSB7fSkpO1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiTXVsdGlzaWdTdGF0ZVN0YXR1cyIsIk11bHRpc2lnRGVsZXRlUmVxdWVzdFJlamVjdGlvbkVycm9yIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@near-js/accounts/lib/types.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/ajv.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@near-js/accounts/node_modules/ajv/dist/ajv.js ***!
  \*********************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.MissingRefError = exports.ValidationError = exports.CodeGen = exports.Name = exports.nil = exports.stringify = exports.str = exports._ = exports.KeywordCxt = void 0;\nconst core_1 = __webpack_require__(/*! ./core */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/core.js\");\nconst draft7_1 = __webpack_require__(/*! ./vocabularies/draft7 */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/draft7.js\");\nconst discriminator_1 = __webpack_require__(/*! ./vocabularies/discriminator */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/discriminator/index.js\");\nconst draft7MetaSchema = __webpack_require__(/*! ./refs/json-schema-draft-07.json */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/refs/json-schema-draft-07.json\");\nconst META_SUPPORT_DATA = [\n    \"/properties\"\n];\nconst META_SCHEMA_ID = \"http://json-schema.org/draft-07/schema\";\nclass Ajv extends core_1.default {\n    _addVocabularies() {\n        super._addVocabularies();\n        draft7_1.default.forEach((v)=>this.addVocabulary(v));\n        if (this.opts.discriminator) this.addKeyword(discriminator_1.default);\n    }\n    _addDefaultMetaSchema() {\n        super._addDefaultMetaSchema();\n        if (!this.opts.meta) return;\n        const metaSchema = this.opts.$data ? this.$dataMetaSchema(draft7MetaSchema, META_SUPPORT_DATA) : draft7MetaSchema;\n        this.addMetaSchema(metaSchema, META_SCHEMA_ID, false);\n        this.refs[\"http://json-schema.org/schema\"] = META_SCHEMA_ID;\n    }\n    defaultMeta() {\n        return this.opts.defaultMeta = super.defaultMeta() || (this.getSchema(META_SCHEMA_ID) ? META_SCHEMA_ID : undefined);\n    }\n}\nmodule.exports = exports = Ajv;\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = Ajv;\nvar validate_1 = __webpack_require__(/*! ./compile/validate */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/validate/index.js\");\nObject.defineProperty(exports, \"KeywordCxt\", ({\n    enumerable: true,\n    get: function() {\n        return validate_1.KeywordCxt;\n    }\n}));\nvar codegen_1 = __webpack_require__(/*! ./compile/codegen */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/codegen/index.js\");\nObject.defineProperty(exports, \"_\", ({\n    enumerable: true,\n    get: function() {\n        return codegen_1._;\n    }\n}));\nObject.defineProperty(exports, \"str\", ({\n    enumerable: true,\n    get: function() {\n        return codegen_1.str;\n    }\n}));\nObject.defineProperty(exports, \"stringify\", ({\n    enumerable: true,\n    get: function() {\n        return codegen_1.stringify;\n    }\n}));\nObject.defineProperty(exports, \"nil\", ({\n    enumerable: true,\n    get: function() {\n        return codegen_1.nil;\n    }\n}));\nObject.defineProperty(exports, \"Name\", ({\n    enumerable: true,\n    get: function() {\n        return codegen_1.Name;\n    }\n}));\nObject.defineProperty(exports, \"CodeGen\", ({\n    enumerable: true,\n    get: function() {\n        return codegen_1.CodeGen;\n    }\n}));\nvar validation_error_1 = __webpack_require__(/*! ./runtime/validation_error */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/runtime/validation_error.js\");\nObject.defineProperty(exports, \"ValidationError\", ({\n    enumerable: true,\n    get: function() {\n        return validation_error_1.default;\n    }\n}));\nvar ref_error_1 = __webpack_require__(/*! ./compile/ref_error */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/ref_error.js\");\nObject.defineProperty(exports, \"MissingRefError\", ({\n    enumerable: true,\n    get: function() {\n        return ref_error_1.default;\n    }\n})); //# sourceMappingURL=ajv.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG5lYXItanMvYWNjb3VudHMvbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L2Fqdi5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsdUJBQXVCLEdBQUdBLHVCQUF1QixHQUFHQSxlQUFlLEdBQUdBLFlBQVksR0FBR0EsV0FBVyxHQUFHQSxpQkFBaUIsR0FBR0EsV0FBVyxHQUFHQSxTQUFTLEdBQUdBLGtCQUFrQixHQUFHLEtBQUs7QUFDM0ssTUFBTVcsU0FBU0MsbUJBQU9BLENBQUMsb0ZBQVE7QUFDL0IsTUFBTUMsV0FBV0QsbUJBQU9BLENBQUMsa0hBQXVCO0FBQ2hELE1BQU1FLGtCQUFrQkYsbUJBQU9BLENBQUMsc0lBQThCO0FBQzlELE1BQU1HLG1CQUFtQkgsbUJBQU9BLENBQUMscUlBQWtDO0FBQ25FLE1BQU1JLG9CQUFvQjtJQUFDO0NBQWM7QUFDekMsTUFBTUMsaUJBQWlCO0FBQ3ZCLE1BQU1DLFlBQVlQLE9BQU9RLE9BQU87SUFDNUJDLG1CQUFtQjtRQUNmLEtBQUssQ0FBQ0E7UUFDTlAsU0FBU00sT0FBTyxDQUFDRSxPQUFPLENBQUMsQ0FBQ0MsSUFBTSxJQUFJLENBQUNDLGFBQWEsQ0FBQ0Q7UUFDbkQsSUFBSSxJQUFJLENBQUNFLElBQUksQ0FBQ0MsYUFBYSxFQUN2QixJQUFJLENBQUNDLFVBQVUsQ0FBQ1osZ0JBQWdCSyxPQUFPO0lBQy9DO0lBQ0FRLHdCQUF3QjtRQUNwQixLQUFLLENBQUNBO1FBQ04sSUFBSSxDQUFDLElBQUksQ0FBQ0gsSUFBSSxDQUFDSSxJQUFJLEVBQ2Y7UUFDSixNQUFNQyxhQUFhLElBQUksQ0FBQ0wsSUFBSSxDQUFDTSxLQUFLLEdBQzVCLElBQUksQ0FBQ0MsZUFBZSxDQUFDaEIsa0JBQWtCQyxxQkFDdkNEO1FBQ04sSUFBSSxDQUFDaUIsYUFBYSxDQUFDSCxZQUFZWixnQkFBZ0I7UUFDL0MsSUFBSSxDQUFDZ0IsSUFBSSxDQUFDLGdDQUFnQyxHQUFHaEI7SUFDakQ7SUFDQWlCLGNBQWM7UUFDVixPQUFRLElBQUksQ0FBQ1YsSUFBSSxDQUFDVSxXQUFXLEdBQ3pCLEtBQUssQ0FBQ0EsaUJBQWtCLEtBQUksQ0FBQ0MsU0FBUyxDQUFDbEIsa0JBQWtCQSxpQkFBaUJtQixTQUFRO0lBQzFGO0FBQ0o7QUFDQUMsT0FBT3JDLE9BQU8sR0FBR0EsVUFBVWtCO0FBQzNCcEIsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELGtCQUFlLEdBQUdrQjtBQUNsQixJQUFJb0IsYUFBYTFCLG1CQUFPQSxDQUFDLGtIQUFvQjtBQUM3Q2QsOENBQTZDO0lBQUV5QyxZQUFZO0lBQU1DLEtBQUs7UUFBYyxPQUFPRixXQUFXNUIsVUFBVTtJQUFFO0FBQUUsQ0FBQyxFQUFDO0FBQ3RILElBQUkrQixZQUFZN0IsbUJBQU9BLENBQUMsZ0hBQW1CO0FBQzNDZCxxQ0FBb0M7SUFBRXlDLFlBQVk7SUFBTUMsS0FBSztRQUFjLE9BQU9DLFVBQVVoQyxDQUFDO0lBQUU7QUFBRSxDQUFDLEVBQUM7QUFDbkdYLHVDQUFzQztJQUFFeUMsWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT0MsVUFBVWpDLEdBQUc7SUFBRTtBQUFFLENBQUMsRUFBQztBQUN2R1YsNkNBQTRDO0lBQUV5QyxZQUFZO0lBQU1DLEtBQUs7UUFBYyxPQUFPQyxVQUFVbEMsU0FBUztJQUFFO0FBQUUsQ0FBQyxFQUFDO0FBQ25IVCx1Q0FBc0M7SUFBRXlDLFlBQVk7SUFBTUMsS0FBSztRQUFjLE9BQU9DLFVBQVVuQyxHQUFHO0lBQUU7QUFBRSxDQUFDLEVBQUM7QUFDdkdSLHdDQUF1QztJQUFFeUMsWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT0MsVUFBVXBDLElBQUk7SUFBRTtBQUFFLENBQUMsRUFBQztBQUN6R1AsMkNBQTBDO0lBQUV5QyxZQUFZO0lBQU1DLEtBQUs7UUFBYyxPQUFPQyxVQUFVckMsT0FBTztJQUFFO0FBQUUsQ0FBQyxFQUFDO0FBQy9HLElBQUlzQyxxQkFBcUI5QixtQkFBT0EsQ0FBQyw0SEFBNEI7QUFDN0RkLG1EQUFrRDtJQUFFeUMsWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT0UsbUJBQW1CdkIsT0FBTztJQUFFO0FBQUUsQ0FBQyxFQUFDO0FBQ2hJLElBQUl3QixjQUFjL0IsbUJBQU9BLENBQUMsOEdBQXFCO0FBQy9DZCxtREFBa0Q7SUFBRXlDLFlBQVk7SUFBTUMsS0FBSztRQUFjLE9BQU9HLFlBQVl4QixPQUFPO0lBQUU7QUFBRSxDQUFDLEVBQUMsRUFDekgsK0JBQStCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaS1hbS1uZWFyYnkvLi9ub2RlX21vZHVsZXMvQG5lYXItanMvYWNjb3VudHMvbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L2Fqdi5qcz9hMWI1Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5NaXNzaW5nUmVmRXJyb3IgPSBleHBvcnRzLlZhbGlkYXRpb25FcnJvciA9IGV4cG9ydHMuQ29kZUdlbiA9IGV4cG9ydHMuTmFtZSA9IGV4cG9ydHMubmlsID0gZXhwb3J0cy5zdHJpbmdpZnkgPSBleHBvcnRzLnN0ciA9IGV4cG9ydHMuXyA9IGV4cG9ydHMuS2V5d29yZEN4dCA9IHZvaWQgMDtcbmNvbnN0IGNvcmVfMSA9IHJlcXVpcmUoXCIuL2NvcmVcIik7XG5jb25zdCBkcmFmdDdfMSA9IHJlcXVpcmUoXCIuL3ZvY2FidWxhcmllcy9kcmFmdDdcIik7XG5jb25zdCBkaXNjcmltaW5hdG9yXzEgPSByZXF1aXJlKFwiLi92b2NhYnVsYXJpZXMvZGlzY3JpbWluYXRvclwiKTtcbmNvbnN0IGRyYWZ0N01ldGFTY2hlbWEgPSByZXF1aXJlKFwiLi9yZWZzL2pzb24tc2NoZW1hLWRyYWZ0LTA3Lmpzb25cIik7XG5jb25zdCBNRVRBX1NVUFBPUlRfREFUQSA9IFtcIi9wcm9wZXJ0aWVzXCJdO1xuY29uc3QgTUVUQV9TQ0hFTUFfSUQgPSBcImh0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDcvc2NoZW1hXCI7XG5jbGFzcyBBanYgZXh0ZW5kcyBjb3JlXzEuZGVmYXVsdCB7XG4gICAgX2FkZFZvY2FidWxhcmllcygpIHtcbiAgICAgICAgc3VwZXIuX2FkZFZvY2FidWxhcmllcygpO1xuICAgICAgICBkcmFmdDdfMS5kZWZhdWx0LmZvckVhY2goKHYpID0+IHRoaXMuYWRkVm9jYWJ1bGFyeSh2KSk7XG4gICAgICAgIGlmICh0aGlzLm9wdHMuZGlzY3JpbWluYXRvcilcbiAgICAgICAgICAgIHRoaXMuYWRkS2V5d29yZChkaXNjcmltaW5hdG9yXzEuZGVmYXVsdCk7XG4gICAgfVxuICAgIF9hZGREZWZhdWx0TWV0YVNjaGVtYSgpIHtcbiAgICAgICAgc3VwZXIuX2FkZERlZmF1bHRNZXRhU2NoZW1hKCk7XG4gICAgICAgIGlmICghdGhpcy5vcHRzLm1ldGEpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGNvbnN0IG1ldGFTY2hlbWEgPSB0aGlzLm9wdHMuJGRhdGFcbiAgICAgICAgICAgID8gdGhpcy4kZGF0YU1ldGFTY2hlbWEoZHJhZnQ3TWV0YVNjaGVtYSwgTUVUQV9TVVBQT1JUX0RBVEEpXG4gICAgICAgICAgICA6IGRyYWZ0N01ldGFTY2hlbWE7XG4gICAgICAgIHRoaXMuYWRkTWV0YVNjaGVtYShtZXRhU2NoZW1hLCBNRVRBX1NDSEVNQV9JRCwgZmFsc2UpO1xuICAgICAgICB0aGlzLnJlZnNbXCJodHRwOi8vanNvbi1zY2hlbWEub3JnL3NjaGVtYVwiXSA9IE1FVEFfU0NIRU1BX0lEO1xuICAgIH1cbiAgICBkZWZhdWx0TWV0YSgpIHtcbiAgICAgICAgcmV0dXJuICh0aGlzLm9wdHMuZGVmYXVsdE1ldGEgPVxuICAgICAgICAgICAgc3VwZXIuZGVmYXVsdE1ldGEoKSB8fCAodGhpcy5nZXRTY2hlbWEoTUVUQV9TQ0hFTUFfSUQpID8gTUVUQV9TQ0hFTUFfSUQgOiB1bmRlZmluZWQpKTtcbiAgICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMgPSBBanY7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmRlZmF1bHQgPSBBanY7XG52YXIgdmFsaWRhdGVfMSA9IHJlcXVpcmUoXCIuL2NvbXBpbGUvdmFsaWRhdGVcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJLZXl3b3JkQ3h0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB2YWxpZGF0ZV8xLktleXdvcmRDeHQ7IH0gfSk7XG52YXIgY29kZWdlbl8xID0gcmVxdWlyZShcIi4vY29tcGlsZS9jb2RlZ2VuXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX1wiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gY29kZWdlbl8xLl87IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJzdHJcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNvZGVnZW5fMS5zdHI7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJzdHJpbmdpZnlcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNvZGVnZW5fMS5zdHJpbmdpZnk7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJuaWxcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNvZGVnZW5fMS5uaWw7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJOYW1lXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBjb2RlZ2VuXzEuTmFtZTsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkNvZGVHZW5cIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNvZGVnZW5fMS5Db2RlR2VuOyB9IH0pO1xudmFyIHZhbGlkYXRpb25fZXJyb3JfMSA9IHJlcXVpcmUoXCIuL3J1bnRpbWUvdmFsaWRhdGlvbl9lcnJvclwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlZhbGlkYXRpb25FcnJvclwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdmFsaWRhdGlvbl9lcnJvcl8xLmRlZmF1bHQ7IH0gfSk7XG52YXIgcmVmX2Vycm9yXzEgPSByZXF1aXJlKFwiLi9jb21waWxlL3JlZl9lcnJvclwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIk1pc3NpbmdSZWZFcnJvclwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVmX2Vycm9yXzEuZGVmYXVsdDsgfSB9KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFqdi5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJNaXNzaW5nUmVmRXJyb3IiLCJWYWxpZGF0aW9uRXJyb3IiLCJDb2RlR2VuIiwiTmFtZSIsIm5pbCIsInN0cmluZ2lmeSIsInN0ciIsIl8iLCJLZXl3b3JkQ3h0IiwiY29yZV8xIiwicmVxdWlyZSIsImRyYWZ0N18xIiwiZGlzY3JpbWluYXRvcl8xIiwiZHJhZnQ3TWV0YVNjaGVtYSIsIk1FVEFfU1VQUE9SVF9EQVRBIiwiTUVUQV9TQ0hFTUFfSUQiLCJBanYiLCJkZWZhdWx0IiwiX2FkZFZvY2FidWxhcmllcyIsImZvckVhY2giLCJ2IiwiYWRkVm9jYWJ1bGFyeSIsIm9wdHMiLCJkaXNjcmltaW5hdG9yIiwiYWRkS2V5d29yZCIsIl9hZGREZWZhdWx0TWV0YVNjaGVtYSIsIm1ldGEiLCJtZXRhU2NoZW1hIiwiJGRhdGEiLCIkZGF0YU1ldGFTY2hlbWEiLCJhZGRNZXRhU2NoZW1hIiwicmVmcyIsImRlZmF1bHRNZXRhIiwiZ2V0U2NoZW1hIiwidW5kZWZpbmVkIiwibW9kdWxlIiwidmFsaWRhdGVfMSIsImVudW1lcmFibGUiLCJnZXQiLCJjb2RlZ2VuXzEiLCJ2YWxpZGF0aW9uX2Vycm9yXzEiLCJyZWZfZXJyb3JfMSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/ajv.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/codegen/code.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/codegen/code.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.regexpCode = exports.getEsmExportName = exports.getProperty = exports.safeStringify = exports.stringify = exports.strConcat = exports.addCodeArg = exports.str = exports._ = exports.nil = exports._Code = exports.Name = exports.IDENTIFIER = exports._CodeOrName = void 0;\nclass _CodeOrName {\n}\nexports._CodeOrName = _CodeOrName;\nexports.IDENTIFIER = /^[a-z$_][a-z$_0-9]*$/i;\nclass Name extends _CodeOrName {\n    constructor(s){\n        super();\n        if (!exports.IDENTIFIER.test(s)) throw new Error(\"CodeGen: name must be a valid identifier\");\n        this.str = s;\n    }\n    toString() {\n        return this.str;\n    }\n    emptyStr() {\n        return false;\n    }\n    get names() {\n        return {\n            [this.str]: 1\n        };\n    }\n}\nexports.Name = Name;\nclass _Code extends _CodeOrName {\n    constructor(code){\n        super();\n        this._items = typeof code === \"string\" ? [\n            code\n        ] : code;\n    }\n    toString() {\n        return this.str;\n    }\n    emptyStr() {\n        if (this._items.length > 1) return false;\n        const item = this._items[0];\n        return item === \"\" || item === '\"\"';\n    }\n    get str() {\n        var _a;\n        return (_a = this._str) !== null && _a !== void 0 ? _a : this._str = this._items.reduce((s, c)=>`${s}${c}`, \"\");\n    }\n    get names() {\n        var _a;\n        return (_a = this._names) !== null && _a !== void 0 ? _a : this._names = this._items.reduce((names, c)=>{\n            if (c instanceof Name) names[c.str] = (names[c.str] || 0) + 1;\n            return names;\n        }, {});\n    }\n}\nexports._Code = _Code;\nexports.nil = new _Code(\"\");\nfunction _(strs, ...args) {\n    const code = [\n        strs[0]\n    ];\n    let i = 0;\n    while(i < args.length){\n        addCodeArg(code, args[i]);\n        code.push(strs[++i]);\n    }\n    return new _Code(code);\n}\nexports._ = _;\nconst plus = new _Code(\"+\");\nfunction str(strs, ...args) {\n    const expr = [\n        safeStringify(strs[0])\n    ];\n    let i = 0;\n    while(i < args.length){\n        expr.push(plus);\n        addCodeArg(expr, args[i]);\n        expr.push(plus, safeStringify(strs[++i]));\n    }\n    optimize(expr);\n    return new _Code(expr);\n}\nexports.str = str;\nfunction addCodeArg(code, arg) {\n    if (arg instanceof _Code) code.push(...arg._items);\n    else if (arg instanceof Name) code.push(arg);\n    else code.push(interpolate(arg));\n}\nexports.addCodeArg = addCodeArg;\nfunction optimize(expr) {\n    let i = 1;\n    while(i < expr.length - 1){\n        if (expr[i] === plus) {\n            const res = mergeExprItems(expr[i - 1], expr[i + 1]);\n            if (res !== undefined) {\n                expr.splice(i - 1, 3, res);\n                continue;\n            }\n            expr[i++] = \"+\";\n        }\n        i++;\n    }\n}\nfunction mergeExprItems(a, b) {\n    if (b === '\"\"') return a;\n    if (a === '\"\"') return b;\n    if (typeof a == \"string\") {\n        if (b instanceof Name || a[a.length - 1] !== '\"') return;\n        if (typeof b != \"string\") return `${a.slice(0, -1)}${b}\"`;\n        if (b[0] === '\"') return a.slice(0, -1) + b.slice(1);\n        return;\n    }\n    if (typeof b == \"string\" && b[0] === '\"' && !(a instanceof Name)) return `\"${a}${b.slice(1)}`;\n    return;\n}\nfunction strConcat(c1, c2) {\n    return c2.emptyStr() ? c1 : c1.emptyStr() ? c2 : str`${c1}${c2}`;\n}\nexports.strConcat = strConcat;\n// TODO do not allow arrays here\nfunction interpolate(x) {\n    return typeof x == \"number\" || typeof x == \"boolean\" || x === null ? x : safeStringify(Array.isArray(x) ? x.join(\",\") : x);\n}\nfunction stringify(x) {\n    return new _Code(safeStringify(x));\n}\nexports.stringify = stringify;\nfunction safeStringify(x) {\n    return JSON.stringify(x).replace(/\\u2028/g, \"\\\\u2028\").replace(/\\u2029/g, \"\\\\u2029\");\n}\nexports.safeStringify = safeStringify;\nfunction getProperty(key) {\n    return typeof key == \"string\" && exports.IDENTIFIER.test(key) ? new _Code(`.${key}`) : _`[${key}]`;\n}\nexports.getProperty = getProperty;\n//Does best effort to format the name properly\nfunction getEsmExportName(key) {\n    if (typeof key == \"string\" && exports.IDENTIFIER.test(key)) {\n        return new _Code(`${key}`);\n    }\n    throw new Error(`CodeGen: invalid export name: ${key}, use explicit $id name mapping`);\n}\nexports.getEsmExportName = getEsmExportName;\nfunction regexpCode(rx) {\n    return new _Code(rx.toString());\n}\nexports.regexpCode = regexpCode; //# sourceMappingURL=code.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/codegen/code.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/codegen/index.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/codegen/index.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.or = exports.and = exports.not = exports.CodeGen = exports.operators = exports.varKinds = exports.ValueScopeName = exports.ValueScope = exports.Scope = exports.Name = exports.regexpCode = exports.stringify = exports.getProperty = exports.nil = exports.strConcat = exports.str = exports._ = void 0;\nconst code_1 = __webpack_require__(/*! ./code */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/codegen/code.js\");\nconst scope_1 = __webpack_require__(/*! ./scope */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/codegen/scope.js\");\nvar code_2 = __webpack_require__(/*! ./code */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/codegen/code.js\");\nObject.defineProperty(exports, \"_\", ({\n    enumerable: true,\n    get: function() {\n        return code_2._;\n    }\n}));\nObject.defineProperty(exports, \"str\", ({\n    enumerable: true,\n    get: function() {\n        return code_2.str;\n    }\n}));\nObject.defineProperty(exports, \"strConcat\", ({\n    enumerable: true,\n    get: function() {\n        return code_2.strConcat;\n    }\n}));\nObject.defineProperty(exports, \"nil\", ({\n    enumerable: true,\n    get: function() {\n        return code_2.nil;\n    }\n}));\nObject.defineProperty(exports, \"getProperty\", ({\n    enumerable: true,\n    get: function() {\n        return code_2.getProperty;\n    }\n}));\nObject.defineProperty(exports, \"stringify\", ({\n    enumerable: true,\n    get: function() {\n        return code_2.stringify;\n    }\n}));\nObject.defineProperty(exports, \"regexpCode\", ({\n    enumerable: true,\n    get: function() {\n        return code_2.regexpCode;\n    }\n}));\nObject.defineProperty(exports, \"Name\", ({\n    enumerable: true,\n    get: function() {\n        return code_2.Name;\n    }\n}));\nvar scope_2 = __webpack_require__(/*! ./scope */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/codegen/scope.js\");\nObject.defineProperty(exports, \"Scope\", ({\n    enumerable: true,\n    get: function() {\n        return scope_2.Scope;\n    }\n}));\nObject.defineProperty(exports, \"ValueScope\", ({\n    enumerable: true,\n    get: function() {\n        return scope_2.ValueScope;\n    }\n}));\nObject.defineProperty(exports, \"ValueScopeName\", ({\n    enumerable: true,\n    get: function() {\n        return scope_2.ValueScopeName;\n    }\n}));\nObject.defineProperty(exports, \"varKinds\", ({\n    enumerable: true,\n    get: function() {\n        return scope_2.varKinds;\n    }\n}));\nexports.operators = {\n    GT: new code_1._Code(\">\"),\n    GTE: new code_1._Code(\">=\"),\n    LT: new code_1._Code(\"<\"),\n    LTE: new code_1._Code(\"<=\"),\n    EQ: new code_1._Code(\"===\"),\n    NEQ: new code_1._Code(\"!==\"),\n    NOT: new code_1._Code(\"!\"),\n    OR: new code_1._Code(\"||\"),\n    AND: new code_1._Code(\"&&\"),\n    ADD: new code_1._Code(\"+\")\n};\nclass Node {\n    optimizeNodes() {\n        return this;\n    }\n    optimizeNames(_names, _constants) {\n        return this;\n    }\n}\nclass Def extends Node {\n    constructor(varKind, name, rhs){\n        super();\n        this.varKind = varKind;\n        this.name = name;\n        this.rhs = rhs;\n    }\n    render({ es5, _n }) {\n        const varKind = es5 ? scope_1.varKinds.var : this.varKind;\n        const rhs = this.rhs === undefined ? \"\" : ` = ${this.rhs}`;\n        return `${varKind} ${this.name}${rhs};` + _n;\n    }\n    optimizeNames(names, constants) {\n        if (!names[this.name.str]) return;\n        if (this.rhs) this.rhs = optimizeExpr(this.rhs, names, constants);\n        return this;\n    }\n    get names() {\n        return this.rhs instanceof code_1._CodeOrName ? this.rhs.names : {};\n    }\n}\nclass Assign extends Node {\n    constructor(lhs, rhs, sideEffects){\n        super();\n        this.lhs = lhs;\n        this.rhs = rhs;\n        this.sideEffects = sideEffects;\n    }\n    render({ _n }) {\n        return `${this.lhs} = ${this.rhs};` + _n;\n    }\n    optimizeNames(names, constants) {\n        if (this.lhs instanceof code_1.Name && !names[this.lhs.str] && !this.sideEffects) return;\n        this.rhs = optimizeExpr(this.rhs, names, constants);\n        return this;\n    }\n    get names() {\n        const names = this.lhs instanceof code_1.Name ? {} : {\n            ...this.lhs.names\n        };\n        return addExprNames(names, this.rhs);\n    }\n}\nclass AssignOp extends Assign {\n    constructor(lhs, op, rhs, sideEffects){\n        super(lhs, rhs, sideEffects);\n        this.op = op;\n    }\n    render({ _n }) {\n        return `${this.lhs} ${this.op}= ${this.rhs};` + _n;\n    }\n}\nclass Label extends Node {\n    constructor(label){\n        super();\n        this.label = label;\n        this.names = {};\n    }\n    render({ _n }) {\n        return `${this.label}:` + _n;\n    }\n}\nclass Break extends Node {\n    constructor(label){\n        super();\n        this.label = label;\n        this.names = {};\n    }\n    render({ _n }) {\n        const label = this.label ? ` ${this.label}` : \"\";\n        return `break${label};` + _n;\n    }\n}\nclass Throw extends Node {\n    constructor(error){\n        super();\n        this.error = error;\n    }\n    render({ _n }) {\n        return `throw ${this.error};` + _n;\n    }\n    get names() {\n        return this.error.names;\n    }\n}\nclass AnyCode extends Node {\n    constructor(code){\n        super();\n        this.code = code;\n    }\n    render({ _n }) {\n        return `${this.code};` + _n;\n    }\n    optimizeNodes() {\n        return `${this.code}` ? this : undefined;\n    }\n    optimizeNames(names, constants) {\n        this.code = optimizeExpr(this.code, names, constants);\n        return this;\n    }\n    get names() {\n        return this.code instanceof code_1._CodeOrName ? this.code.names : {};\n    }\n}\nclass ParentNode extends Node {\n    constructor(nodes = []){\n        super();\n        this.nodes = nodes;\n    }\n    render(opts) {\n        return this.nodes.reduce((code, n)=>code + n.render(opts), \"\");\n    }\n    optimizeNodes() {\n        const { nodes } = this;\n        let i = nodes.length;\n        while(i--){\n            const n = nodes[i].optimizeNodes();\n            if (Array.isArray(n)) nodes.splice(i, 1, ...n);\n            else if (n) nodes[i] = n;\n            else nodes.splice(i, 1);\n        }\n        return nodes.length > 0 ? this : undefined;\n    }\n    optimizeNames(names, constants) {\n        const { nodes } = this;\n        let i = nodes.length;\n        while(i--){\n            // iterating backwards improves 1-pass optimization\n            const n = nodes[i];\n            if (n.optimizeNames(names, constants)) continue;\n            subtractNames(names, n.names);\n            nodes.splice(i, 1);\n        }\n        return nodes.length > 0 ? this : undefined;\n    }\n    get names() {\n        return this.nodes.reduce((names, n)=>addNames(names, n.names), {});\n    }\n}\nclass BlockNode extends ParentNode {\n    render(opts) {\n        return \"{\" + opts._n + super.render(opts) + \"}\" + opts._n;\n    }\n}\nclass Root extends ParentNode {\n}\nclass Else extends BlockNode {\n}\nElse.kind = \"else\";\nclass If extends BlockNode {\n    constructor(condition, nodes){\n        super(nodes);\n        this.condition = condition;\n    }\n    render(opts) {\n        let code = `if(${this.condition})` + super.render(opts);\n        if (this.else) code += \"else \" + this.else.render(opts);\n        return code;\n    }\n    optimizeNodes() {\n        super.optimizeNodes();\n        const cond = this.condition;\n        if (cond === true) return this.nodes; // else is ignored here\n        let e = this.else;\n        if (e) {\n            const ns = e.optimizeNodes();\n            e = this.else = Array.isArray(ns) ? new Else(ns) : ns;\n        }\n        if (e) {\n            if (cond === false) return e instanceof If ? e : e.nodes;\n            if (this.nodes.length) return this;\n            return new If(not(cond), e instanceof If ? [\n                e\n            ] : e.nodes);\n        }\n        if (cond === false || !this.nodes.length) return undefined;\n        return this;\n    }\n    optimizeNames(names, constants) {\n        var _a;\n        this.else = (_a = this.else) === null || _a === void 0 ? void 0 : _a.optimizeNames(names, constants);\n        if (!(super.optimizeNames(names, constants) || this.else)) return;\n        this.condition = optimizeExpr(this.condition, names, constants);\n        return this;\n    }\n    get names() {\n        const names = super.names;\n        addExprNames(names, this.condition);\n        if (this.else) addNames(names, this.else.names);\n        return names;\n    }\n}\nIf.kind = \"if\";\nclass For extends BlockNode {\n}\nFor.kind = \"for\";\nclass ForLoop extends For {\n    constructor(iteration){\n        super();\n        this.iteration = iteration;\n    }\n    render(opts) {\n        return `for(${this.iteration})` + super.render(opts);\n    }\n    optimizeNames(names, constants) {\n        if (!super.optimizeNames(names, constants)) return;\n        this.iteration = optimizeExpr(this.iteration, names, constants);\n        return this;\n    }\n    get names() {\n        return addNames(super.names, this.iteration.names);\n    }\n}\nclass ForRange extends For {\n    constructor(varKind, name, from, to){\n        super();\n        this.varKind = varKind;\n        this.name = name;\n        this.from = from;\n        this.to = to;\n    }\n    render(opts) {\n        const varKind = opts.es5 ? scope_1.varKinds.var : this.varKind;\n        const { name, from, to } = this;\n        return `for(${varKind} ${name}=${from}; ${name}<${to}; ${name}++)` + super.render(opts);\n    }\n    get names() {\n        const names = addExprNames(super.names, this.from);\n        return addExprNames(names, this.to);\n    }\n}\nclass ForIter extends For {\n    constructor(loop, varKind, name, iterable){\n        super();\n        this.loop = loop;\n        this.varKind = varKind;\n        this.name = name;\n        this.iterable = iterable;\n    }\n    render(opts) {\n        return `for(${this.varKind} ${this.name} ${this.loop} ${this.iterable})` + super.render(opts);\n    }\n    optimizeNames(names, constants) {\n        if (!super.optimizeNames(names, constants)) return;\n        this.iterable = optimizeExpr(this.iterable, names, constants);\n        return this;\n    }\n    get names() {\n        return addNames(super.names, this.iterable.names);\n    }\n}\nclass Func extends BlockNode {\n    constructor(name, args, async){\n        super();\n        this.name = name;\n        this.args = args;\n        this.async = async;\n    }\n    render(opts) {\n        const _async = this.async ? \"async \" : \"\";\n        return `${_async}function ${this.name}(${this.args})` + super.render(opts);\n    }\n}\nFunc.kind = \"func\";\nclass Return extends ParentNode {\n    render(opts) {\n        return \"return \" + super.render(opts);\n    }\n}\nReturn.kind = \"return\";\nclass Try extends BlockNode {\n    render(opts) {\n        let code = \"try\" + super.render(opts);\n        if (this.catch) code += this.catch.render(opts);\n        if (this.finally) code += this.finally.render(opts);\n        return code;\n    }\n    optimizeNodes() {\n        var _a, _b;\n        super.optimizeNodes();\n        (_a = this.catch) === null || _a === void 0 ? void 0 : _a.optimizeNodes();\n        (_b = this.finally) === null || _b === void 0 ? void 0 : _b.optimizeNodes();\n        return this;\n    }\n    optimizeNames(names, constants) {\n        var _a, _b;\n        super.optimizeNames(names, constants);\n        (_a = this.catch) === null || _a === void 0 ? void 0 : _a.optimizeNames(names, constants);\n        (_b = this.finally) === null || _b === void 0 ? void 0 : _b.optimizeNames(names, constants);\n        return this;\n    }\n    get names() {\n        const names = super.names;\n        if (this.catch) addNames(names, this.catch.names);\n        if (this.finally) addNames(names, this.finally.names);\n        return names;\n    }\n}\nclass Catch extends BlockNode {\n    constructor(error){\n        super();\n        this.error = error;\n    }\n    render(opts) {\n        return `catch(${this.error})` + super.render(opts);\n    }\n}\nCatch.kind = \"catch\";\nclass Finally extends BlockNode {\n    render(opts) {\n        return \"finally\" + super.render(opts);\n    }\n}\nFinally.kind = \"finally\";\nclass CodeGen {\n    constructor(extScope, opts = {}){\n        this._values = {};\n        this._blockStarts = [];\n        this._constants = {};\n        this.opts = {\n            ...opts,\n            _n: opts.lines ? \"\\n\" : \"\"\n        };\n        this._extScope = extScope;\n        this._scope = new scope_1.Scope({\n            parent: extScope\n        });\n        this._nodes = [\n            new Root()\n        ];\n    }\n    toString() {\n        return this._root.render(this.opts);\n    }\n    // returns unique name in the internal scope\n    name(prefix) {\n        return this._scope.name(prefix);\n    }\n    // reserves unique name in the external scope\n    scopeName(prefix) {\n        return this._extScope.name(prefix);\n    }\n    // reserves unique name in the external scope and assigns value to it\n    scopeValue(prefixOrName, value) {\n        const name = this._extScope.value(prefixOrName, value);\n        const vs = this._values[name.prefix] || (this._values[name.prefix] = new Set());\n        vs.add(name);\n        return name;\n    }\n    getScopeValue(prefix, keyOrRef) {\n        return this._extScope.getValue(prefix, keyOrRef);\n    }\n    // return code that assigns values in the external scope to the names that are used internally\n    // (same names that were returned by gen.scopeName or gen.scopeValue)\n    scopeRefs(scopeName) {\n        return this._extScope.scopeRefs(scopeName, this._values);\n    }\n    scopeCode() {\n        return this._extScope.scopeCode(this._values);\n    }\n    _def(varKind, nameOrPrefix, rhs, constant) {\n        const name = this._scope.toName(nameOrPrefix);\n        if (rhs !== undefined && constant) this._constants[name.str] = rhs;\n        this._leafNode(new Def(varKind, name, rhs));\n        return name;\n    }\n    // `const` declaration (`var` in es5 mode)\n    const(nameOrPrefix, rhs, _constant) {\n        return this._def(scope_1.varKinds.const, nameOrPrefix, rhs, _constant);\n    }\n    // `let` declaration with optional assignment (`var` in es5 mode)\n    let(nameOrPrefix, rhs, _constant) {\n        return this._def(scope_1.varKinds.let, nameOrPrefix, rhs, _constant);\n    }\n    // `var` declaration with optional assignment\n    var(nameOrPrefix, rhs, _constant) {\n        return this._def(scope_1.varKinds.var, nameOrPrefix, rhs, _constant);\n    }\n    // assignment code\n    assign(lhs, rhs, sideEffects) {\n        return this._leafNode(new Assign(lhs, rhs, sideEffects));\n    }\n    // `+=` code\n    add(lhs, rhs) {\n        return this._leafNode(new AssignOp(lhs, exports.operators.ADD, rhs));\n    }\n    // appends passed SafeExpr to code or executes Block\n    code(c) {\n        if (typeof c == \"function\") c();\n        else if (c !== code_1.nil) this._leafNode(new AnyCode(c));\n        return this;\n    }\n    // returns code for object literal for the passed argument list of key-value pairs\n    object(...keyValues) {\n        const code = [\n            \"{\"\n        ];\n        for (const [key, value] of keyValues){\n            if (code.length > 1) code.push(\",\");\n            code.push(key);\n            if (key !== value || this.opts.es5) {\n                code.push(\":\");\n                (0, code_1.addCodeArg)(code, value);\n            }\n        }\n        code.push(\"}\");\n        return new code_1._Code(code);\n    }\n    // `if` clause (or statement if `thenBody` and, optionally, `elseBody` are passed)\n    if(condition, thenBody, elseBody) {\n        this._blockNode(new If(condition));\n        if (thenBody && elseBody) {\n            this.code(thenBody).else().code(elseBody).endIf();\n        } else if (thenBody) {\n            this.code(thenBody).endIf();\n        } else if (elseBody) {\n            throw new Error('CodeGen: \"else\" body without \"then\" body');\n        }\n        return this;\n    }\n    // `else if` clause - invalid without `if` or after `else` clauses\n    elseIf(condition) {\n        return this._elseNode(new If(condition));\n    }\n    // `else` clause - only valid after `if` or `else if` clauses\n    else() {\n        return this._elseNode(new Else());\n    }\n    // end `if` statement (needed if gen.if was used only with condition)\n    endIf() {\n        return this._endBlockNode(If, Else);\n    }\n    _for(node, forBody) {\n        this._blockNode(node);\n        if (forBody) this.code(forBody).endFor();\n        return this;\n    }\n    // a generic `for` clause (or statement if `forBody` is passed)\n    for(iteration, forBody) {\n        return this._for(new ForLoop(iteration), forBody);\n    }\n    // `for` statement for a range of values\n    forRange(nameOrPrefix, from, to, forBody, varKind = this.opts.es5 ? scope_1.varKinds.var : scope_1.varKinds.let) {\n        const name = this._scope.toName(nameOrPrefix);\n        return this._for(new ForRange(varKind, name, from, to), ()=>forBody(name));\n    }\n    // `for-of` statement (in es5 mode replace with a normal for loop)\n    forOf(nameOrPrefix, iterable, forBody, varKind = scope_1.varKinds.const) {\n        const name = this._scope.toName(nameOrPrefix);\n        if (this.opts.es5) {\n            const arr = iterable instanceof code_1.Name ? iterable : this.var(\"_arr\", iterable);\n            return this.forRange(\"_i\", 0, (0, code_1._)`${arr}.length`, (i)=>{\n                this.var(name, (0, code_1._)`${arr}[${i}]`);\n                forBody(name);\n            });\n        }\n        return this._for(new ForIter(\"of\", varKind, name, iterable), ()=>forBody(name));\n    }\n    // `for-in` statement.\n    // With option `ownProperties` replaced with a `for-of` loop for object keys\n    forIn(nameOrPrefix, obj, forBody, varKind = this.opts.es5 ? scope_1.varKinds.var : scope_1.varKinds.const) {\n        if (this.opts.ownProperties) {\n            return this.forOf(nameOrPrefix, (0, code_1._)`Object.keys(${obj})`, forBody);\n        }\n        const name = this._scope.toName(nameOrPrefix);\n        return this._for(new ForIter(\"in\", varKind, name, obj), ()=>forBody(name));\n    }\n    // end `for` loop\n    endFor() {\n        return this._endBlockNode(For);\n    }\n    // `label` statement\n    label(label) {\n        return this._leafNode(new Label(label));\n    }\n    // `break` statement\n    break(label) {\n        return this._leafNode(new Break(label));\n    }\n    // `return` statement\n    return(value) {\n        const node = new Return();\n        this._blockNode(node);\n        this.code(value);\n        if (node.nodes.length !== 1) throw new Error('CodeGen: \"return\" should have one node');\n        return this._endBlockNode(Return);\n    }\n    // `try` statement\n    try(tryBody, catchCode, finallyCode) {\n        if (!catchCode && !finallyCode) throw new Error('CodeGen: \"try\" without \"catch\" and \"finally\"');\n        const node = new Try();\n        this._blockNode(node);\n        this.code(tryBody);\n        if (catchCode) {\n            const error = this.name(\"e\");\n            this._currNode = node.catch = new Catch(error);\n            catchCode(error);\n        }\n        if (finallyCode) {\n            this._currNode = node.finally = new Finally();\n            this.code(finallyCode);\n        }\n        return this._endBlockNode(Catch, Finally);\n    }\n    // `throw` statement\n    throw(error) {\n        return this._leafNode(new Throw(error));\n    }\n    // start self-balancing block\n    block(body, nodeCount) {\n        this._blockStarts.push(this._nodes.length);\n        if (body) this.code(body).endBlock(nodeCount);\n        return this;\n    }\n    // end the current self-balancing block\n    endBlock(nodeCount) {\n        const len = this._blockStarts.pop();\n        if (len === undefined) throw new Error(\"CodeGen: not in self-balancing block\");\n        const toClose = this._nodes.length - len;\n        if (toClose < 0 || nodeCount !== undefined && toClose !== nodeCount) {\n            throw new Error(`CodeGen: wrong number of nodes: ${toClose} vs ${nodeCount} expected`);\n        }\n        this._nodes.length = len;\n        return this;\n    }\n    // `function` heading (or definition if funcBody is passed)\n    func(name, args = code_1.nil, async, funcBody) {\n        this._blockNode(new Func(name, args, async));\n        if (funcBody) this.code(funcBody).endFunc();\n        return this;\n    }\n    // end function definition\n    endFunc() {\n        return this._endBlockNode(Func);\n    }\n    optimize(n = 1) {\n        while(n-- > 0){\n            this._root.optimizeNodes();\n            this._root.optimizeNames(this._root.names, this._constants);\n        }\n    }\n    _leafNode(node) {\n        this._currNode.nodes.push(node);\n        return this;\n    }\n    _blockNode(node) {\n        this._currNode.nodes.push(node);\n        this._nodes.push(node);\n    }\n    _endBlockNode(N1, N2) {\n        const n = this._currNode;\n        if (n instanceof N1 || N2 && n instanceof N2) {\n            this._nodes.pop();\n            return this;\n        }\n        throw new Error(`CodeGen: not in block \"${N2 ? `${N1.kind}/${N2.kind}` : N1.kind}\"`);\n    }\n    _elseNode(node) {\n        const n = this._currNode;\n        if (!(n instanceof If)) {\n            throw new Error('CodeGen: \"else\" without \"if\"');\n        }\n        this._currNode = n.else = node;\n        return this;\n    }\n    get _root() {\n        return this._nodes[0];\n    }\n    get _currNode() {\n        const ns = this._nodes;\n        return ns[ns.length - 1];\n    }\n    set _currNode(node) {\n        const ns = this._nodes;\n        ns[ns.length - 1] = node;\n    }\n}\nexports.CodeGen = CodeGen;\nfunction addNames(names, from) {\n    for(const n in from)names[n] = (names[n] || 0) + (from[n] || 0);\n    return names;\n}\nfunction addExprNames(names, from) {\n    return from instanceof code_1._CodeOrName ? addNames(names, from.names) : names;\n}\nfunction optimizeExpr(expr, names, constants) {\n    if (expr instanceof code_1.Name) return replaceName(expr);\n    if (!canOptimize(expr)) return expr;\n    return new code_1._Code(expr._items.reduce((items, c)=>{\n        if (c instanceof code_1.Name) c = replaceName(c);\n        if (c instanceof code_1._Code) items.push(...c._items);\n        else items.push(c);\n        return items;\n    }, []));\n    function replaceName(n) {\n        const c = constants[n.str];\n        if (c === undefined || names[n.str] !== 1) return n;\n        delete names[n.str];\n        return c;\n    }\n    function canOptimize(e) {\n        return e instanceof code_1._Code && e._items.some((c)=>c instanceof code_1.Name && names[c.str] === 1 && constants[c.str] !== undefined);\n    }\n}\nfunction subtractNames(names, from) {\n    for(const n in from)names[n] = (names[n] || 0) - (from[n] || 0);\n}\nfunction not(x) {\n    return typeof x == \"boolean\" || typeof x == \"number\" || x === null ? !x : (0, code_1._)`!${par(x)}`;\n}\nexports.not = not;\nconst andCode = mappend(exports.operators.AND);\n// boolean AND (&&) expression with the passed arguments\nfunction and(...args) {\n    return args.reduce(andCode);\n}\nexports.and = and;\nconst orCode = mappend(exports.operators.OR);\n// boolean OR (||) expression with the passed arguments\nfunction or(...args) {\n    return args.reduce(orCode);\n}\nexports.or = or;\nfunction mappend(op) {\n    return (x, y)=>x === code_1.nil ? y : y === code_1.nil ? x : (0, code_1._)`${par(x)} ${op} ${par(y)}`;\n}\nfunction par(x) {\n    return x instanceof code_1.Name ? x : (0, code_1._)`(${x})`;\n} //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/codegen/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/codegen/scope.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/codegen/scope.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.ValueScope = exports.ValueScopeName = exports.Scope = exports.varKinds = exports.UsedValueState = void 0;\nconst code_1 = __webpack_require__(/*! ./code */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/codegen/code.js\");\nclass ValueError extends Error {\n    constructor(name){\n        super(`CodeGen: \"code\" for ${name} not defined`);\n        this.value = name.value;\n    }\n}\nvar UsedValueState;\n(function(UsedValueState) {\n    UsedValueState[UsedValueState[\"Started\"] = 0] = \"Started\";\n    UsedValueState[UsedValueState[\"Completed\"] = 1] = \"Completed\";\n})(UsedValueState = exports.UsedValueState || (exports.UsedValueState = {}));\nexports.varKinds = {\n    const: new code_1.Name(\"const\"),\n    let: new code_1.Name(\"let\"),\n    var: new code_1.Name(\"var\")\n};\nclass Scope {\n    constructor({ prefixes, parent } = {}){\n        this._names = {};\n        this._prefixes = prefixes;\n        this._parent = parent;\n    }\n    toName(nameOrPrefix) {\n        return nameOrPrefix instanceof code_1.Name ? nameOrPrefix : this.name(nameOrPrefix);\n    }\n    name(prefix) {\n        return new code_1.Name(this._newName(prefix));\n    }\n    _newName(prefix) {\n        const ng = this._names[prefix] || this._nameGroup(prefix);\n        return `${prefix}${ng.index++}`;\n    }\n    _nameGroup(prefix) {\n        var _a, _b;\n        if (((_b = (_a = this._parent) === null || _a === void 0 ? void 0 : _a._prefixes) === null || _b === void 0 ? void 0 : _b.has(prefix)) || this._prefixes && !this._prefixes.has(prefix)) {\n            throw new Error(`CodeGen: prefix \"${prefix}\" is not allowed in this scope`);\n        }\n        return this._names[prefix] = {\n            prefix,\n            index: 0\n        };\n    }\n}\nexports.Scope = Scope;\nclass ValueScopeName extends code_1.Name {\n    constructor(prefix, nameStr){\n        super(nameStr);\n        this.prefix = prefix;\n    }\n    setValue(value, { property, itemIndex }) {\n        this.value = value;\n        this.scopePath = (0, code_1._)`.${new code_1.Name(property)}[${itemIndex}]`;\n    }\n}\nexports.ValueScopeName = ValueScopeName;\nconst line = (0, code_1._)`\\n`;\nclass ValueScope extends Scope {\n    constructor(opts){\n        super(opts);\n        this._values = {};\n        this._scope = opts.scope;\n        this.opts = {\n            ...opts,\n            _n: opts.lines ? line : code_1.nil\n        };\n    }\n    get() {\n        return this._scope;\n    }\n    name(prefix) {\n        return new ValueScopeName(prefix, this._newName(prefix));\n    }\n    value(nameOrPrefix, value) {\n        var _a;\n        if (value.ref === undefined) throw new Error(\"CodeGen: ref must be passed in value\");\n        const name = this.toName(nameOrPrefix);\n        const { prefix } = name;\n        const valueKey = (_a = value.key) !== null && _a !== void 0 ? _a : value.ref;\n        let vs = this._values[prefix];\n        if (vs) {\n            const _name = vs.get(valueKey);\n            if (_name) return _name;\n        } else {\n            vs = this._values[prefix] = new Map();\n        }\n        vs.set(valueKey, name);\n        const s = this._scope[prefix] || (this._scope[prefix] = []);\n        const itemIndex = s.length;\n        s[itemIndex] = value.ref;\n        name.setValue(value, {\n            property: prefix,\n            itemIndex\n        });\n        return name;\n    }\n    getValue(prefix, keyOrRef) {\n        const vs = this._values[prefix];\n        if (!vs) return;\n        return vs.get(keyOrRef);\n    }\n    scopeRefs(scopeName, values = this._values) {\n        return this._reduceValues(values, (name)=>{\n            if (name.scopePath === undefined) throw new Error(`CodeGen: name \"${name}\" has no value`);\n            return (0, code_1._)`${scopeName}${name.scopePath}`;\n        });\n    }\n    scopeCode(values = this._values, usedValues, getCode) {\n        return this._reduceValues(values, (name)=>{\n            if (name.value === undefined) throw new Error(`CodeGen: name \"${name}\" has no value`);\n            return name.value.code;\n        }, usedValues, getCode);\n    }\n    _reduceValues(values, valueCode, usedValues = {}, getCode) {\n        let code = code_1.nil;\n        for(const prefix in values){\n            const vs = values[prefix];\n            if (!vs) continue;\n            const nameSet = usedValues[prefix] = usedValues[prefix] || new Map();\n            vs.forEach((name)=>{\n                if (nameSet.has(name)) return;\n                nameSet.set(name, UsedValueState.Started);\n                let c = valueCode(name);\n                if (c) {\n                    const def = this.opts.es5 ? exports.varKinds.var : exports.varKinds.const;\n                    code = (0, code_1._)`${code}${def} ${name} = ${c};${this.opts._n}`;\n                } else if (c = getCode === null || getCode === void 0 ? void 0 : getCode(name)) {\n                    code = (0, code_1._)`${code}${c}${this.opts._n}`;\n                } else {\n                    throw new ValueError(name);\n                }\n                nameSet.set(name, UsedValueState.Completed);\n            });\n        }\n        return code;\n    }\n}\nexports.ValueScope = ValueScope; //# sourceMappingURL=scope.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/codegen/scope.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/errors.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/errors.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.extendErrors = exports.resetErrorsCount = exports.reportExtraError = exports.reportError = exports.keyword$DataError = exports.keywordError = void 0;\nconst codegen_1 = __webpack_require__(/*! ./codegen */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/codegen/index.js\");\nconst util_1 = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/util.js\");\nconst names_1 = __webpack_require__(/*! ./names */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/names.js\");\nexports.keywordError = {\n    message: ({ keyword })=>(0, codegen_1.str)`must pass \"${keyword}\" keyword validation`\n};\nexports.keyword$DataError = {\n    message: ({ keyword, schemaType })=>schemaType ? (0, codegen_1.str)`\"${keyword}\" keyword must be ${schemaType} ($data)` : (0, codegen_1.str)`\"${keyword}\" keyword is invalid ($data)`\n};\nfunction reportError(cxt, error = exports.keywordError, errorPaths, overrideAllErrors) {\n    const { it } = cxt;\n    const { gen, compositeRule, allErrors } = it;\n    const errObj = errorObjectCode(cxt, error, errorPaths);\n    if (overrideAllErrors !== null && overrideAllErrors !== void 0 ? overrideAllErrors : compositeRule || allErrors) {\n        addError(gen, errObj);\n    } else {\n        returnErrors(it, (0, codegen_1._)`[${errObj}]`);\n    }\n}\nexports.reportError = reportError;\nfunction reportExtraError(cxt, error = exports.keywordError, errorPaths) {\n    const { it } = cxt;\n    const { gen, compositeRule, allErrors } = it;\n    const errObj = errorObjectCode(cxt, error, errorPaths);\n    addError(gen, errObj);\n    if (!(compositeRule || allErrors)) {\n        returnErrors(it, names_1.default.vErrors);\n    }\n}\nexports.reportExtraError = reportExtraError;\nfunction resetErrorsCount(gen, errsCount) {\n    gen.assign(names_1.default.errors, errsCount);\n    gen.if((0, codegen_1._)`${names_1.default.vErrors} !== null`, ()=>gen.if(errsCount, ()=>gen.assign((0, codegen_1._)`${names_1.default.vErrors}.length`, errsCount), ()=>gen.assign(names_1.default.vErrors, null)));\n}\nexports.resetErrorsCount = resetErrorsCount;\nfunction extendErrors({ gen, keyword, schemaValue, data, errsCount, it }) {\n    /* istanbul ignore if */ if (errsCount === undefined) throw new Error(\"ajv implementation error\");\n    const err = gen.name(\"err\");\n    gen.forRange(\"i\", errsCount, names_1.default.errors, (i)=>{\n        gen.const(err, (0, codegen_1._)`${names_1.default.vErrors}[${i}]`);\n        gen.if((0, codegen_1._)`${err}.instancePath === undefined`, ()=>gen.assign((0, codegen_1._)`${err}.instancePath`, (0, codegen_1.strConcat)(names_1.default.instancePath, it.errorPath)));\n        gen.assign((0, codegen_1._)`${err}.schemaPath`, (0, codegen_1.str)`${it.errSchemaPath}/${keyword}`);\n        if (it.opts.verbose) {\n            gen.assign((0, codegen_1._)`${err}.schema`, schemaValue);\n            gen.assign((0, codegen_1._)`${err}.data`, data);\n        }\n    });\n}\nexports.extendErrors = extendErrors;\nfunction addError(gen, errObj) {\n    const err = gen.const(\"err\", errObj);\n    gen.if((0, codegen_1._)`${names_1.default.vErrors} === null`, ()=>gen.assign(names_1.default.vErrors, (0, codegen_1._)`[${err}]`), (0, codegen_1._)`${names_1.default.vErrors}.push(${err})`);\n    gen.code((0, codegen_1._)`${names_1.default.errors}++`);\n}\nfunction returnErrors(it, errs) {\n    const { gen, validateName, schemaEnv } = it;\n    if (schemaEnv.$async) {\n        gen.throw((0, codegen_1._)`new ${it.ValidationError}(${errs})`);\n    } else {\n        gen.assign((0, codegen_1._)`${validateName}.errors`, errs);\n        gen.return(false);\n    }\n}\nconst E = {\n    keyword: new codegen_1.Name(\"keyword\"),\n    schemaPath: new codegen_1.Name(\"schemaPath\"),\n    params: new codegen_1.Name(\"params\"),\n    propertyName: new codegen_1.Name(\"propertyName\"),\n    message: new codegen_1.Name(\"message\"),\n    schema: new codegen_1.Name(\"schema\"),\n    parentSchema: new codegen_1.Name(\"parentSchema\")\n};\nfunction errorObjectCode(cxt, error, errorPaths) {\n    const { createErrors } = cxt.it;\n    if (createErrors === false) return (0, codegen_1._)`{}`;\n    return errorObject(cxt, error, errorPaths);\n}\nfunction errorObject(cxt, error, errorPaths = {}) {\n    const { gen, it } = cxt;\n    const keyValues = [\n        errorInstancePath(it, errorPaths),\n        errorSchemaPath(cxt, errorPaths)\n    ];\n    extraErrorProps(cxt, error, keyValues);\n    return gen.object(...keyValues);\n}\nfunction errorInstancePath({ errorPath }, { instancePath }) {\n    const instPath = instancePath ? (0, codegen_1.str)`${errorPath}${(0, util_1.getErrorPath)(instancePath, util_1.Type.Str)}` : errorPath;\n    return [\n        names_1.default.instancePath,\n        (0, codegen_1.strConcat)(names_1.default.instancePath, instPath)\n    ];\n}\nfunction errorSchemaPath({ keyword, it: { errSchemaPath } }, { schemaPath, parentSchema }) {\n    let schPath = parentSchema ? errSchemaPath : (0, codegen_1.str)`${errSchemaPath}/${keyword}`;\n    if (schemaPath) {\n        schPath = (0, codegen_1.str)`${schPath}${(0, util_1.getErrorPath)(schemaPath, util_1.Type.Str)}`;\n    }\n    return [\n        E.schemaPath,\n        schPath\n    ];\n}\nfunction extraErrorProps(cxt, { params, message }, keyValues) {\n    const { keyword, data, schemaValue, it } = cxt;\n    const { opts, propertyName, topSchemaRef, schemaPath } = it;\n    keyValues.push([\n        E.keyword,\n        keyword\n    ], [\n        E.params,\n        typeof params == \"function\" ? params(cxt) : params || (0, codegen_1._)`{}`\n    ]);\n    if (opts.messages) {\n        keyValues.push([\n            E.message,\n            typeof message == \"function\" ? message(cxt) : message\n        ]);\n    }\n    if (opts.verbose) {\n        keyValues.push([\n            E.schema,\n            schemaValue\n        ], [\n            E.parentSchema,\n            (0, codegen_1._)`${topSchemaRef}${schemaPath}`\n        ], [\n            names_1.default.data,\n            data\n        ]);\n    }\n    if (propertyName) keyValues.push([\n        E.propertyName,\n        propertyName\n    ]);\n} //# sourceMappingURL=errors.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/errors.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/index.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/index.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.resolveSchema = exports.getCompilingSchema = exports.resolveRef = exports.compileSchema = exports.SchemaEnv = void 0;\nconst codegen_1 = __webpack_require__(/*! ./codegen */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/codegen/index.js\");\nconst validation_error_1 = __webpack_require__(/*! ../runtime/validation_error */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/runtime/validation_error.js\");\nconst names_1 = __webpack_require__(/*! ./names */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/names.js\");\nconst resolve_1 = __webpack_require__(/*! ./resolve */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/resolve.js\");\nconst util_1 = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/util.js\");\nconst validate_1 = __webpack_require__(/*! ./validate */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/validate/index.js\");\nclass SchemaEnv {\n    constructor(env){\n        var _a;\n        this.refs = {};\n        this.dynamicAnchors = {};\n        let schema;\n        if (typeof env.schema == \"object\") schema = env.schema;\n        this.schema = env.schema;\n        this.schemaId = env.schemaId;\n        this.root = env.root || this;\n        this.baseId = (_a = env.baseId) !== null && _a !== void 0 ? _a : (0, resolve_1.normalizeId)(schema === null || schema === void 0 ? void 0 : schema[env.schemaId || \"$id\"]);\n        this.schemaPath = env.schemaPath;\n        this.localRefs = env.localRefs;\n        this.meta = env.meta;\n        this.$async = schema === null || schema === void 0 ? void 0 : schema.$async;\n        this.refs = {};\n    }\n}\nexports.SchemaEnv = SchemaEnv;\n// let codeSize = 0\n// let nodeCount = 0\n// Compiles schema in SchemaEnv\nfunction compileSchema(sch) {\n    // TODO refactor - remove compilations\n    const _sch = getCompilingSchema.call(this, sch);\n    if (_sch) return _sch;\n    const rootId = (0, resolve_1.getFullPath)(this.opts.uriResolver, sch.root.baseId); // TODO if getFullPath removed 1 tests fails\n    const { es5, lines } = this.opts.code;\n    const { ownProperties } = this.opts;\n    const gen = new codegen_1.CodeGen(this.scope, {\n        es5,\n        lines,\n        ownProperties\n    });\n    let _ValidationError;\n    if (sch.$async) {\n        _ValidationError = gen.scopeValue(\"Error\", {\n            ref: validation_error_1.default,\n            code: (0, codegen_1._)`require(\"ajv/dist/runtime/validation_error\").default`\n        });\n    }\n    const validateName = gen.scopeName(\"validate\");\n    sch.validateName = validateName;\n    const schemaCxt = {\n        gen,\n        allErrors: this.opts.allErrors,\n        data: names_1.default.data,\n        parentData: names_1.default.parentData,\n        parentDataProperty: names_1.default.parentDataProperty,\n        dataNames: [\n            names_1.default.data\n        ],\n        dataPathArr: [\n            codegen_1.nil\n        ],\n        dataLevel: 0,\n        dataTypes: [],\n        definedProperties: new Set(),\n        topSchemaRef: gen.scopeValue(\"schema\", this.opts.code.source === true ? {\n            ref: sch.schema,\n            code: (0, codegen_1.stringify)(sch.schema)\n        } : {\n            ref: sch.schema\n        }),\n        validateName,\n        ValidationError: _ValidationError,\n        schema: sch.schema,\n        schemaEnv: sch,\n        rootId,\n        baseId: sch.baseId || rootId,\n        schemaPath: codegen_1.nil,\n        errSchemaPath: sch.schemaPath || (this.opts.jtd ? \"\" : \"#\"),\n        errorPath: (0, codegen_1._)`\"\"`,\n        opts: this.opts,\n        self: this\n    };\n    let sourceCode;\n    try {\n        this._compilations.add(sch);\n        (0, validate_1.validateFunctionCode)(schemaCxt);\n        gen.optimize(this.opts.code.optimize);\n        // gen.optimize(1)\n        const validateCode = gen.toString();\n        sourceCode = `${gen.scopeRefs(names_1.default.scope)}return ${validateCode}`;\n        // console.log((codeSize += sourceCode.length), (nodeCount += gen.nodeCount))\n        if (this.opts.code.process) sourceCode = this.opts.code.process(sourceCode, sch);\n        // console.log(\"\\n\\n\\n *** \\n\", sourceCode)\n        const makeValidate = new Function(`${names_1.default.self}`, `${names_1.default.scope}`, sourceCode);\n        const validate = makeValidate(this, this.scope.get());\n        this.scope.value(validateName, {\n            ref: validate\n        });\n        validate.errors = null;\n        validate.schema = sch.schema;\n        validate.schemaEnv = sch;\n        if (sch.$async) validate.$async = true;\n        if (this.opts.code.source === true) {\n            validate.source = {\n                validateName,\n                validateCode,\n                scopeValues: gen._values\n            };\n        }\n        if (this.opts.unevaluated) {\n            const { props, items } = schemaCxt;\n            validate.evaluated = {\n                props: props instanceof codegen_1.Name ? undefined : props,\n                items: items instanceof codegen_1.Name ? undefined : items,\n                dynamicProps: props instanceof codegen_1.Name,\n                dynamicItems: items instanceof codegen_1.Name\n            };\n            if (validate.source) validate.source.evaluated = (0, codegen_1.stringify)(validate.evaluated);\n        }\n        sch.validate = validate;\n        return sch;\n    } catch (e) {\n        delete sch.validate;\n        delete sch.validateName;\n        if (sourceCode) this.logger.error(\"Error compiling schema, function code:\", sourceCode);\n        // console.log(\"\\n\\n\\n *** \\n\", sourceCode, this.opts)\n        throw e;\n    } finally{\n        this._compilations.delete(sch);\n    }\n}\nexports.compileSchema = compileSchema;\nfunction resolveRef(root, baseId, ref) {\n    var _a;\n    ref = (0, resolve_1.resolveUrl)(this.opts.uriResolver, baseId, ref);\n    const schOrFunc = root.refs[ref];\n    if (schOrFunc) return schOrFunc;\n    let _sch = resolve.call(this, root, ref);\n    if (_sch === undefined) {\n        const schema = (_a = root.localRefs) === null || _a === void 0 ? void 0 : _a[ref]; // TODO maybe localRefs should hold SchemaEnv\n        const { schemaId } = this.opts;\n        if (schema) _sch = new SchemaEnv({\n            schema,\n            schemaId,\n            root,\n            baseId\n        });\n    }\n    if (_sch === undefined) return;\n    return root.refs[ref] = inlineOrCompile.call(this, _sch);\n}\nexports.resolveRef = resolveRef;\nfunction inlineOrCompile(sch) {\n    if ((0, resolve_1.inlineRef)(sch.schema, this.opts.inlineRefs)) return sch.schema;\n    return sch.validate ? sch : compileSchema.call(this, sch);\n}\n// Index of schema compilation in the currently compiled list\nfunction getCompilingSchema(schEnv) {\n    for (const sch of this._compilations){\n        if (sameSchemaEnv(sch, schEnv)) return sch;\n    }\n}\nexports.getCompilingSchema = getCompilingSchema;\nfunction sameSchemaEnv(s1, s2) {\n    return s1.schema === s2.schema && s1.root === s2.root && s1.baseId === s2.baseId;\n}\n// resolve and compile the references ($ref)\n// TODO returns AnySchemaObject (if the schema can be inlined) or validation function\nfunction resolve(root, ref // reference to resolve\n) {\n    let sch;\n    while(typeof (sch = this.refs[ref]) == \"string\")ref = sch;\n    return sch || this.schemas[ref] || resolveSchema.call(this, root, ref);\n}\n// Resolve schema, its root and baseId\nfunction resolveSchema(root, ref // reference to resolve\n) {\n    const p = this.opts.uriResolver.parse(ref);\n    const refPath = (0, resolve_1._getFullPath)(this.opts.uriResolver, p);\n    let baseId = (0, resolve_1.getFullPath)(this.opts.uriResolver, root.baseId, undefined);\n    // TODO `Object.keys(root.schema).length > 0` should not be needed - but removing breaks 2 tests\n    if (Object.keys(root.schema).length > 0 && refPath === baseId) {\n        return getJsonPointer.call(this, p, root);\n    }\n    const id = (0, resolve_1.normalizeId)(refPath);\n    const schOrRef = this.refs[id] || this.schemas[id];\n    if (typeof schOrRef == \"string\") {\n        const sch = resolveSchema.call(this, root, schOrRef);\n        if (typeof (sch === null || sch === void 0 ? void 0 : sch.schema) !== \"object\") return;\n        return getJsonPointer.call(this, p, sch);\n    }\n    if (typeof (schOrRef === null || schOrRef === void 0 ? void 0 : schOrRef.schema) !== \"object\") return;\n    if (!schOrRef.validate) compileSchema.call(this, schOrRef);\n    if (id === (0, resolve_1.normalizeId)(ref)) {\n        const { schema } = schOrRef;\n        const { schemaId } = this.opts;\n        const schId = schema[schemaId];\n        if (schId) baseId = (0, resolve_1.resolveUrl)(this.opts.uriResolver, baseId, schId);\n        return new SchemaEnv({\n            schema,\n            schemaId,\n            root,\n            baseId\n        });\n    }\n    return getJsonPointer.call(this, p, schOrRef);\n}\nexports.resolveSchema = resolveSchema;\nconst PREVENT_SCOPE_CHANGE = new Set([\n    \"properties\",\n    \"patternProperties\",\n    \"enum\",\n    \"dependencies\",\n    \"definitions\"\n]);\nfunction getJsonPointer(parsedRef, { baseId, schema, root }) {\n    var _a;\n    if (((_a = parsedRef.fragment) === null || _a === void 0 ? void 0 : _a[0]) !== \"/\") return;\n    for (const part of parsedRef.fragment.slice(1).split(\"/\")){\n        if (typeof schema === \"boolean\") return;\n        const partSchema = schema[(0, util_1.unescapeFragment)(part)];\n        if (partSchema === undefined) return;\n        schema = partSchema;\n        // TODO PREVENT_SCOPE_CHANGE could be defined in keyword def?\n        const schId = typeof schema === \"object\" && schema[this.opts.schemaId];\n        if (!PREVENT_SCOPE_CHANGE.has(part) && schId) {\n            baseId = (0, resolve_1.resolveUrl)(this.opts.uriResolver, baseId, schId);\n        }\n    }\n    let env;\n    if (typeof schema != \"boolean\" && schema.$ref && !(0, util_1.schemaHasRulesButRef)(schema, this.RULES)) {\n        const $ref = (0, resolve_1.resolveUrl)(this.opts.uriResolver, baseId, schema.$ref);\n        env = resolveSchema.call(this, root, $ref);\n    }\n    // even though resolution failed we need to return SchemaEnv to throw exception\n    // so that compileAsync loads missing schema.\n    const { schemaId } = this.opts;\n    env = env || new SchemaEnv({\n        schema,\n        schemaId,\n        root,\n        baseId\n    });\n    if (env.schema !== env.root.schema) return env;\n    return undefined;\n} //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/names.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/names.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst codegen_1 = __webpack_require__(/*! ./codegen */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/codegen/index.js\");\nconst names = {\n    // validation function arguments\n    data: new codegen_1.Name(\"data\"),\n    // args passed from referencing schema\n    valCxt: new codegen_1.Name(\"valCxt\"),\n    instancePath: new codegen_1.Name(\"instancePath\"),\n    parentData: new codegen_1.Name(\"parentData\"),\n    parentDataProperty: new codegen_1.Name(\"parentDataProperty\"),\n    rootData: new codegen_1.Name(\"rootData\"),\n    dynamicAnchors: new codegen_1.Name(\"dynamicAnchors\"),\n    // function scoped variables\n    vErrors: new codegen_1.Name(\"vErrors\"),\n    errors: new codegen_1.Name(\"errors\"),\n    this: new codegen_1.Name(\"this\"),\n    // \"globals\"\n    self: new codegen_1.Name(\"self\"),\n    scope: new codegen_1.Name(\"scope\"),\n    // JTD serialize/parse name for JSON string and position\n    json: new codegen_1.Name(\"json\"),\n    jsonPos: new codegen_1.Name(\"jsonPos\"),\n    jsonLen: new codegen_1.Name(\"jsonLen\"),\n    jsonPart: new codegen_1.Name(\"jsonPart\")\n};\nexports[\"default\"] = names; //# sourceMappingURL=names.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG5lYXItanMvYWNjb3VudHMvbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L2NvbXBpbGUvbmFtZXMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0QsTUFBTUMsWUFBWUMsbUJBQU9BLENBQUMsd0dBQVc7QUFDckMsTUFBTUMsUUFBUTtJQUNWLGdDQUFnQztJQUNoQ0MsTUFBTSxJQUFJSCxVQUFVSSxJQUFJLENBQUM7SUFDekIsc0NBQXNDO0lBQ3RDQyxRQUFRLElBQUlMLFVBQVVJLElBQUksQ0FBQztJQUMzQkUsY0FBYyxJQUFJTixVQUFVSSxJQUFJLENBQUM7SUFDakNHLFlBQVksSUFBSVAsVUFBVUksSUFBSSxDQUFDO0lBQy9CSSxvQkFBb0IsSUFBSVIsVUFBVUksSUFBSSxDQUFDO0lBQ3ZDSyxVQUFVLElBQUlULFVBQVVJLElBQUksQ0FBQztJQUM3Qk0sZ0JBQWdCLElBQUlWLFVBQVVJLElBQUksQ0FBQztJQUNuQyw0QkFBNEI7SUFDNUJPLFNBQVMsSUFBSVgsVUFBVUksSUFBSSxDQUFDO0lBQzVCUSxRQUFRLElBQUlaLFVBQVVJLElBQUksQ0FBQztJQUMzQlMsTUFBTSxJQUFJYixVQUFVSSxJQUFJLENBQUM7SUFDekIsWUFBWTtJQUNaVSxNQUFNLElBQUlkLFVBQVVJLElBQUksQ0FBQztJQUN6QlcsT0FBTyxJQUFJZixVQUFVSSxJQUFJLENBQUM7SUFDMUIsd0RBQXdEO0lBQ3hEWSxNQUFNLElBQUloQixVQUFVSSxJQUFJLENBQUM7SUFDekJhLFNBQVMsSUFBSWpCLFVBQVVJLElBQUksQ0FBQztJQUM1QmMsU0FBUyxJQUFJbEIsVUFBVUksSUFBSSxDQUFDO0lBQzVCZSxVQUFVLElBQUluQixVQUFVSSxJQUFJLENBQUM7QUFDakM7QUFDQU4sa0JBQWUsR0FBR0ksT0FDbEIsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaS1hbS1uZWFyYnkvLi9ub2RlX21vZHVsZXMvQG5lYXItanMvYWNjb3VudHMvbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L2NvbXBpbGUvbmFtZXMuanM/ZjVhYyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGNvZGVnZW5fMSA9IHJlcXVpcmUoXCIuL2NvZGVnZW5cIik7XG5jb25zdCBuYW1lcyA9IHtcbiAgICAvLyB2YWxpZGF0aW9uIGZ1bmN0aW9uIGFyZ3VtZW50c1xuICAgIGRhdGE6IG5ldyBjb2RlZ2VuXzEuTmFtZShcImRhdGFcIiksXG4gICAgLy8gYXJncyBwYXNzZWQgZnJvbSByZWZlcmVuY2luZyBzY2hlbWFcbiAgICB2YWxDeHQ6IG5ldyBjb2RlZ2VuXzEuTmFtZShcInZhbEN4dFwiKSxcbiAgICBpbnN0YW5jZVBhdGg6IG5ldyBjb2RlZ2VuXzEuTmFtZShcImluc3RhbmNlUGF0aFwiKSxcbiAgICBwYXJlbnREYXRhOiBuZXcgY29kZWdlbl8xLk5hbWUoXCJwYXJlbnREYXRhXCIpLFxuICAgIHBhcmVudERhdGFQcm9wZXJ0eTogbmV3IGNvZGVnZW5fMS5OYW1lKFwicGFyZW50RGF0YVByb3BlcnR5XCIpLFxuICAgIHJvb3REYXRhOiBuZXcgY29kZWdlbl8xLk5hbWUoXCJyb290RGF0YVwiKSxcbiAgICBkeW5hbWljQW5jaG9yczogbmV3IGNvZGVnZW5fMS5OYW1lKFwiZHluYW1pY0FuY2hvcnNcIiksXG4gICAgLy8gZnVuY3Rpb24gc2NvcGVkIHZhcmlhYmxlc1xuICAgIHZFcnJvcnM6IG5ldyBjb2RlZ2VuXzEuTmFtZShcInZFcnJvcnNcIiksXG4gICAgZXJyb3JzOiBuZXcgY29kZWdlbl8xLk5hbWUoXCJlcnJvcnNcIiksXG4gICAgdGhpczogbmV3IGNvZGVnZW5fMS5OYW1lKFwidGhpc1wiKSxcbiAgICAvLyBcImdsb2JhbHNcIlxuICAgIHNlbGY6IG5ldyBjb2RlZ2VuXzEuTmFtZShcInNlbGZcIiksXG4gICAgc2NvcGU6IG5ldyBjb2RlZ2VuXzEuTmFtZShcInNjb3BlXCIpLFxuICAgIC8vIEpURCBzZXJpYWxpemUvcGFyc2UgbmFtZSBmb3IgSlNPTiBzdHJpbmcgYW5kIHBvc2l0aW9uXG4gICAganNvbjogbmV3IGNvZGVnZW5fMS5OYW1lKFwianNvblwiKSxcbiAgICBqc29uUG9zOiBuZXcgY29kZWdlbl8xLk5hbWUoXCJqc29uUG9zXCIpLFxuICAgIGpzb25MZW46IG5ldyBjb2RlZ2VuXzEuTmFtZShcImpzb25MZW5cIiksXG4gICAganNvblBhcnQ6IG5ldyBjb2RlZ2VuXzEuTmFtZShcImpzb25QYXJ0XCIpLFxufTtcbmV4cG9ydHMuZGVmYXVsdCA9IG5hbWVzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bmFtZXMuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiY29kZWdlbl8xIiwicmVxdWlyZSIsIm5hbWVzIiwiZGF0YSIsIk5hbWUiLCJ2YWxDeHQiLCJpbnN0YW5jZVBhdGgiLCJwYXJlbnREYXRhIiwicGFyZW50RGF0YVByb3BlcnR5Iiwicm9vdERhdGEiLCJkeW5hbWljQW5jaG9ycyIsInZFcnJvcnMiLCJlcnJvcnMiLCJ0aGlzIiwic2VsZiIsInNjb3BlIiwianNvbiIsImpzb25Qb3MiLCJqc29uTGVuIiwianNvblBhcnQiLCJkZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/names.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/ref_error.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/ref_error.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst resolve_1 = __webpack_require__(/*! ./resolve */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/resolve.js\");\nclass MissingRefError extends Error {\n    constructor(resolver, baseId, ref, msg){\n        super(msg || `can't resolve reference ${ref} from id ${baseId}`);\n        this.missingRef = (0, resolve_1.resolveUrl)(resolver, baseId, ref);\n        this.missingSchema = (0, resolve_1.normalizeId)((0, resolve_1.getFullPath)(resolver, this.missingRef));\n    }\n}\nexports[\"default\"] = MissingRefError; //# sourceMappingURL=ref_error.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG5lYXItanMvYWNjb3VudHMvbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L2NvbXBpbGUvcmVmX2Vycm9yLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdELE1BQU1DLFlBQVlDLG1CQUFPQSxDQUFDLGtHQUFXO0FBQ3JDLE1BQU1DLHdCQUF3QkM7SUFDMUJDLFlBQVlDLFFBQVEsRUFBRUMsTUFBTSxFQUFFQyxHQUFHLEVBQUVDLEdBQUcsQ0FBRTtRQUNwQyxLQUFLLENBQUNBLE9BQU8sQ0FBQyx3QkFBd0IsRUFBRUQsSUFBSSxTQUFTLEVBQUVELE9BQU8sQ0FBQztRQUMvRCxJQUFJLENBQUNHLFVBQVUsR0FBRyxDQUFDLEdBQUdULFVBQVVVLFVBQVUsRUFBRUwsVUFBVUMsUUFBUUM7UUFDOUQsSUFBSSxDQUFDSSxhQUFhLEdBQUcsQ0FBQyxHQUFHWCxVQUFVWSxXQUFXLEVBQUUsQ0FBQyxHQUFHWixVQUFVYSxXQUFXLEVBQUVSLFVBQVUsSUFBSSxDQUFDSSxVQUFVO0lBQ3hHO0FBQ0o7QUFDQVgsa0JBQWUsR0FBR0ksaUJBQ2xCLHFDQUFxQyIsInNvdXJjZXMiOlsid2VicGFjazovL2ktYW0tbmVhcmJ5Ly4vbm9kZV9tb2R1bGVzL0BuZWFyLWpzL2FjY291bnRzL25vZGVfbW9kdWxlcy9hanYvZGlzdC9jb21waWxlL3JlZl9lcnJvci5qcz84OTM1Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgcmVzb2x2ZV8xID0gcmVxdWlyZShcIi4vcmVzb2x2ZVwiKTtcbmNsYXNzIE1pc3NpbmdSZWZFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihyZXNvbHZlciwgYmFzZUlkLCByZWYsIG1zZykge1xuICAgICAgICBzdXBlcihtc2cgfHwgYGNhbid0IHJlc29sdmUgcmVmZXJlbmNlICR7cmVmfSBmcm9tIGlkICR7YmFzZUlkfWApO1xuICAgICAgICB0aGlzLm1pc3NpbmdSZWYgPSAoMCwgcmVzb2x2ZV8xLnJlc29sdmVVcmwpKHJlc29sdmVyLCBiYXNlSWQsIHJlZik7XG4gICAgICAgIHRoaXMubWlzc2luZ1NjaGVtYSA9ICgwLCByZXNvbHZlXzEubm9ybWFsaXplSWQpKCgwLCByZXNvbHZlXzEuZ2V0RnVsbFBhdGgpKHJlc29sdmVyLCB0aGlzLm1pc3NpbmdSZWYpKTtcbiAgICB9XG59XG5leHBvcnRzLmRlZmF1bHQgPSBNaXNzaW5nUmVmRXJyb3I7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZWZfZXJyb3IuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwicmVzb2x2ZV8xIiwicmVxdWlyZSIsIk1pc3NpbmdSZWZFcnJvciIsIkVycm9yIiwiY29uc3RydWN0b3IiLCJyZXNvbHZlciIsImJhc2VJZCIsInJlZiIsIm1zZyIsIm1pc3NpbmdSZWYiLCJyZXNvbHZlVXJsIiwibWlzc2luZ1NjaGVtYSIsIm5vcm1hbGl6ZUlkIiwiZ2V0RnVsbFBhdGgiLCJkZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/ref_error.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/resolve.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/resolve.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.getSchemaRefs = exports.resolveUrl = exports.normalizeId = exports._getFullPath = exports.getFullPath = exports.inlineRef = void 0;\nconst util_1 = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/util.js\");\nconst equal = __webpack_require__(/*! fast-deep-equal */ \"(ssr)/./node_modules/fast-deep-equal/index.js\");\nconst traverse = __webpack_require__(/*! json-schema-traverse */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/json-schema-traverse/index.js\");\n// TODO refactor to use keyword definitions\nconst SIMPLE_INLINED = new Set([\n    \"type\",\n    \"format\",\n    \"pattern\",\n    \"maxLength\",\n    \"minLength\",\n    \"maxProperties\",\n    \"minProperties\",\n    \"maxItems\",\n    \"minItems\",\n    \"maximum\",\n    \"minimum\",\n    \"uniqueItems\",\n    \"multipleOf\",\n    \"required\",\n    \"enum\",\n    \"const\"\n]);\nfunction inlineRef(schema, limit = true) {\n    if (typeof schema == \"boolean\") return true;\n    if (limit === true) return !hasRef(schema);\n    if (!limit) return false;\n    return countKeys(schema) <= limit;\n}\nexports.inlineRef = inlineRef;\nconst REF_KEYWORDS = new Set([\n    \"$ref\",\n    \"$recursiveRef\",\n    \"$recursiveAnchor\",\n    \"$dynamicRef\",\n    \"$dynamicAnchor\"\n]);\nfunction hasRef(schema) {\n    for(const key in schema){\n        if (REF_KEYWORDS.has(key)) return true;\n        const sch = schema[key];\n        if (Array.isArray(sch) && sch.some(hasRef)) return true;\n        if (typeof sch == \"object\" && hasRef(sch)) return true;\n    }\n    return false;\n}\nfunction countKeys(schema) {\n    let count = 0;\n    for(const key in schema){\n        if (key === \"$ref\") return Infinity;\n        count++;\n        if (SIMPLE_INLINED.has(key)) continue;\n        if (typeof schema[key] == \"object\") {\n            (0, util_1.eachItem)(schema[key], (sch)=>count += countKeys(sch));\n        }\n        if (count === Infinity) return Infinity;\n    }\n    return count;\n}\nfunction getFullPath(resolver, id = \"\", normalize) {\n    if (normalize !== false) id = normalizeId(id);\n    const p = resolver.parse(id);\n    return _getFullPath(resolver, p);\n}\nexports.getFullPath = getFullPath;\nfunction _getFullPath(resolver, p) {\n    const serialized = resolver.serialize(p);\n    return serialized.split(\"#\")[0] + \"#\";\n}\nexports._getFullPath = _getFullPath;\nconst TRAILING_SLASH_HASH = /#\\/?$/;\nfunction normalizeId(id) {\n    return id ? id.replace(TRAILING_SLASH_HASH, \"\") : \"\";\n}\nexports.normalizeId = normalizeId;\nfunction resolveUrl(resolver, baseId, id) {\n    id = normalizeId(id);\n    return resolver.resolve(baseId, id);\n}\nexports.resolveUrl = resolveUrl;\nconst ANCHOR = /^[a-z_][-a-z0-9._]*$/i;\nfunction getSchemaRefs(schema, baseId) {\n    if (typeof schema == \"boolean\") return {};\n    const { schemaId, uriResolver } = this.opts;\n    const schId = normalizeId(schema[schemaId] || baseId);\n    const baseIds = {\n        \"\": schId\n    };\n    const pathPrefix = getFullPath(uriResolver, schId, false);\n    const localRefs = {};\n    const schemaRefs = new Set();\n    traverse(schema, {\n        allKeys: true\n    }, (sch, jsonPtr, _, parentJsonPtr)=>{\n        if (parentJsonPtr === undefined) return;\n        const fullPath = pathPrefix + jsonPtr;\n        let baseId = baseIds[parentJsonPtr];\n        if (typeof sch[schemaId] == \"string\") baseId = addRef.call(this, sch[schemaId]);\n        addAnchor.call(this, sch.$anchor);\n        addAnchor.call(this, sch.$dynamicAnchor);\n        baseIds[jsonPtr] = baseId;\n        function addRef(ref) {\n            // eslint-disable-next-line @typescript-eslint/unbound-method\n            const _resolve = this.opts.uriResolver.resolve;\n            ref = normalizeId(baseId ? _resolve(baseId, ref) : ref);\n            if (schemaRefs.has(ref)) throw ambiguos(ref);\n            schemaRefs.add(ref);\n            let schOrRef = this.refs[ref];\n            if (typeof schOrRef == \"string\") schOrRef = this.refs[schOrRef];\n            if (typeof schOrRef == \"object\") {\n                checkAmbiguosRef(sch, schOrRef.schema, ref);\n            } else if (ref !== normalizeId(fullPath)) {\n                if (ref[0] === \"#\") {\n                    checkAmbiguosRef(sch, localRefs[ref], ref);\n                    localRefs[ref] = sch;\n                } else {\n                    this.refs[ref] = fullPath;\n                }\n            }\n            return ref;\n        }\n        function addAnchor(anchor) {\n            if (typeof anchor == \"string\") {\n                if (!ANCHOR.test(anchor)) throw new Error(`invalid anchor \"${anchor}\"`);\n                addRef.call(this, `#${anchor}`);\n            }\n        }\n    });\n    return localRefs;\n    function checkAmbiguosRef(sch1, sch2, ref) {\n        if (sch2 !== undefined && !equal(sch1, sch2)) throw ambiguos(ref);\n    }\n    function ambiguos(ref) {\n        return new Error(`reference \"${ref}\" resolves to more than one schema`);\n    }\n}\nexports.getSchemaRefs = getSchemaRefs; //# sourceMappingURL=resolve.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/resolve.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/rules.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/rules.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.getRules = exports.isJSONType = void 0;\nconst _jsonTypes = [\n    \"string\",\n    \"number\",\n    \"integer\",\n    \"boolean\",\n    \"null\",\n    \"object\",\n    \"array\"\n];\nconst jsonTypes = new Set(_jsonTypes);\nfunction isJSONType(x) {\n    return typeof x == \"string\" && jsonTypes.has(x);\n}\nexports.isJSONType = isJSONType;\nfunction getRules() {\n    const groups = {\n        number: {\n            type: \"number\",\n            rules: []\n        },\n        string: {\n            type: \"string\",\n            rules: []\n        },\n        array: {\n            type: \"array\",\n            rules: []\n        },\n        object: {\n            type: \"object\",\n            rules: []\n        }\n    };\n    return {\n        types: {\n            ...groups,\n            integer: true,\n            boolean: true,\n            null: true\n        },\n        rules: [\n            {\n                rules: []\n            },\n            groups.number,\n            groups.string,\n            groups.array,\n            groups.object\n        ],\n        post: {\n            rules: []\n        },\n        all: {},\n        keywords: {}\n    };\n}\nexports.getRules = getRules; //# sourceMappingURL=rules.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG5lYXItanMvYWNjb3VudHMvbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L2NvbXBpbGUvcnVsZXMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELGdCQUFnQixHQUFHQSxrQkFBa0IsR0FBRyxLQUFLO0FBQzdDLE1BQU1JLGFBQWE7SUFBQztJQUFVO0lBQVU7SUFBVztJQUFXO0lBQVE7SUFBVTtDQUFRO0FBQ3hGLE1BQU1DLFlBQVksSUFBSUMsSUFBSUY7QUFDMUIsU0FBU0QsV0FBV0ksQ0FBQztJQUNqQixPQUFPLE9BQU9BLEtBQUssWUFBWUYsVUFBVUcsR0FBRyxDQUFDRDtBQUNqRDtBQUNBUCxrQkFBa0IsR0FBR0c7QUFDckIsU0FBU0Q7SUFDTCxNQUFNTyxTQUFTO1FBQ1hDLFFBQVE7WUFBRUMsTUFBTTtZQUFVQyxPQUFPLEVBQUU7UUFBQztRQUNwQ0MsUUFBUTtZQUFFRixNQUFNO1lBQVVDLE9BQU8sRUFBRTtRQUFDO1FBQ3BDRSxPQUFPO1lBQUVILE1BQU07WUFBU0MsT0FBTyxFQUFFO1FBQUM7UUFDbENHLFFBQVE7WUFBRUosTUFBTTtZQUFVQyxPQUFPLEVBQUU7UUFBQztJQUN4QztJQUNBLE9BQU87UUFDSEksT0FBTztZQUFFLEdBQUdQLE1BQU07WUFBRVEsU0FBUztZQUFNQyxTQUFTO1lBQU1DLE1BQU07UUFBSztRQUM3RFAsT0FBTztZQUFDO2dCQUFFQSxPQUFPLEVBQUU7WUFBQztZQUFHSCxPQUFPQyxNQUFNO1lBQUVELE9BQU9JLE1BQU07WUFBRUosT0FBT0ssS0FBSztZQUFFTCxPQUFPTSxNQUFNO1NBQUM7UUFDakZLLE1BQU07WUFBRVIsT0FBTyxFQUFFO1FBQUM7UUFDbEJTLEtBQUssQ0FBQztRQUNOQyxVQUFVLENBQUM7SUFDZjtBQUNKO0FBQ0F0QixnQkFBZ0IsR0FBR0UsVUFDbkIsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaS1hbS1uZWFyYnkvLi9ub2RlX21vZHVsZXMvQG5lYXItanMvYWNjb3VudHMvbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L2NvbXBpbGUvcnVsZXMuanM/ZGMzMSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZ2V0UnVsZXMgPSBleHBvcnRzLmlzSlNPTlR5cGUgPSB2b2lkIDA7XG5jb25zdCBfanNvblR5cGVzID0gW1wic3RyaW5nXCIsIFwibnVtYmVyXCIsIFwiaW50ZWdlclwiLCBcImJvb2xlYW5cIiwgXCJudWxsXCIsIFwib2JqZWN0XCIsIFwiYXJyYXlcIl07XG5jb25zdCBqc29uVHlwZXMgPSBuZXcgU2V0KF9qc29uVHlwZXMpO1xuZnVuY3Rpb24gaXNKU09OVHlwZSh4KSB7XG4gICAgcmV0dXJuIHR5cGVvZiB4ID09IFwic3RyaW5nXCIgJiYganNvblR5cGVzLmhhcyh4KTtcbn1cbmV4cG9ydHMuaXNKU09OVHlwZSA9IGlzSlNPTlR5cGU7XG5mdW5jdGlvbiBnZXRSdWxlcygpIHtcbiAgICBjb25zdCBncm91cHMgPSB7XG4gICAgICAgIG51bWJlcjogeyB0eXBlOiBcIm51bWJlclwiLCBydWxlczogW10gfSxcbiAgICAgICAgc3RyaW5nOiB7IHR5cGU6IFwic3RyaW5nXCIsIHJ1bGVzOiBbXSB9LFxuICAgICAgICBhcnJheTogeyB0eXBlOiBcImFycmF5XCIsIHJ1bGVzOiBbXSB9LFxuICAgICAgICBvYmplY3Q6IHsgdHlwZTogXCJvYmplY3RcIiwgcnVsZXM6IFtdIH0sXG4gICAgfTtcbiAgICByZXR1cm4ge1xuICAgICAgICB0eXBlczogeyAuLi5ncm91cHMsIGludGVnZXI6IHRydWUsIGJvb2xlYW46IHRydWUsIG51bGw6IHRydWUgfSxcbiAgICAgICAgcnVsZXM6IFt7IHJ1bGVzOiBbXSB9LCBncm91cHMubnVtYmVyLCBncm91cHMuc3RyaW5nLCBncm91cHMuYXJyYXksIGdyb3Vwcy5vYmplY3RdLFxuICAgICAgICBwb3N0OiB7IHJ1bGVzOiBbXSB9LFxuICAgICAgICBhbGw6IHt9LFxuICAgICAgICBrZXl3b3Jkczoge30sXG4gICAgfTtcbn1cbmV4cG9ydHMuZ2V0UnVsZXMgPSBnZXRSdWxlcztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJ1bGVzLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImdldFJ1bGVzIiwiaXNKU09OVHlwZSIsIl9qc29uVHlwZXMiLCJqc29uVHlwZXMiLCJTZXQiLCJ4IiwiaGFzIiwiZ3JvdXBzIiwibnVtYmVyIiwidHlwZSIsInJ1bGVzIiwic3RyaW5nIiwiYXJyYXkiLCJvYmplY3QiLCJ0eXBlcyIsImludGVnZXIiLCJib29sZWFuIiwibnVsbCIsInBvc3QiLCJhbGwiLCJrZXl3b3JkcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/rules.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/util.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/util.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.checkStrictMode = exports.getErrorPath = exports.Type = exports.useFunc = exports.setEvaluated = exports.evaluatedPropsToName = exports.mergeEvaluated = exports.eachItem = exports.unescapeJsonPointer = exports.escapeJsonPointer = exports.escapeFragment = exports.unescapeFragment = exports.schemaRefOrVal = exports.schemaHasRulesButRef = exports.schemaHasRules = exports.checkUnknownRules = exports.alwaysValidSchema = exports.toHash = void 0;\nconst codegen_1 = __webpack_require__(/*! ./codegen */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/codegen/index.js\");\nconst code_1 = __webpack_require__(/*! ./codegen/code */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/codegen/code.js\");\n// TODO refactor to use Set\nfunction toHash(arr) {\n    const hash = {};\n    for (const item of arr)hash[item] = true;\n    return hash;\n}\nexports.toHash = toHash;\nfunction alwaysValidSchema(it, schema) {\n    if (typeof schema == \"boolean\") return schema;\n    if (Object.keys(schema).length === 0) return true;\n    checkUnknownRules(it, schema);\n    return !schemaHasRules(schema, it.self.RULES.all);\n}\nexports.alwaysValidSchema = alwaysValidSchema;\nfunction checkUnknownRules(it, schema = it.schema) {\n    const { opts, self } = it;\n    if (!opts.strictSchema) return;\n    if (typeof schema === \"boolean\") return;\n    const rules = self.RULES.keywords;\n    for(const key in schema){\n        if (!rules[key]) checkStrictMode(it, `unknown keyword: \"${key}\"`);\n    }\n}\nexports.checkUnknownRules = checkUnknownRules;\nfunction schemaHasRules(schema, rules) {\n    if (typeof schema == \"boolean\") return !schema;\n    for(const key in schema)if (rules[key]) return true;\n    return false;\n}\nexports.schemaHasRules = schemaHasRules;\nfunction schemaHasRulesButRef(schema, RULES) {\n    if (typeof schema == \"boolean\") return !schema;\n    for(const key in schema)if (key !== \"$ref\" && RULES.all[key]) return true;\n    return false;\n}\nexports.schemaHasRulesButRef = schemaHasRulesButRef;\nfunction schemaRefOrVal({ topSchemaRef, schemaPath }, schema, keyword, $data) {\n    if (!$data) {\n        if (typeof schema == \"number\" || typeof schema == \"boolean\") return schema;\n        if (typeof schema == \"string\") return (0, codegen_1._)`${schema}`;\n    }\n    return (0, codegen_1._)`${topSchemaRef}${schemaPath}${(0, codegen_1.getProperty)(keyword)}`;\n}\nexports.schemaRefOrVal = schemaRefOrVal;\nfunction unescapeFragment(str) {\n    return unescapeJsonPointer(decodeURIComponent(str));\n}\nexports.unescapeFragment = unescapeFragment;\nfunction escapeFragment(str) {\n    return encodeURIComponent(escapeJsonPointer(str));\n}\nexports.escapeFragment = escapeFragment;\nfunction escapeJsonPointer(str) {\n    if (typeof str == \"number\") return `${str}`;\n    return str.replace(/~/g, \"~0\").replace(/\\//g, \"~1\");\n}\nexports.escapeJsonPointer = escapeJsonPointer;\nfunction unescapeJsonPointer(str) {\n    return str.replace(/~1/g, \"/\").replace(/~0/g, \"~\");\n}\nexports.unescapeJsonPointer = unescapeJsonPointer;\nfunction eachItem(xs, f) {\n    if (Array.isArray(xs)) {\n        for (const x of xs)f(x);\n    } else {\n        f(xs);\n    }\n}\nexports.eachItem = eachItem;\nfunction makeMergeEvaluated({ mergeNames, mergeToName, mergeValues, resultToName }) {\n    return (gen, from, to, toName)=>{\n        const res = to === undefined ? from : to instanceof codegen_1.Name ? (from instanceof codegen_1.Name ? mergeNames(gen, from, to) : mergeToName(gen, from, to), to) : from instanceof codegen_1.Name ? (mergeToName(gen, to, from), from) : mergeValues(from, to);\n        return toName === codegen_1.Name && !(res instanceof codegen_1.Name) ? resultToName(gen, res) : res;\n    };\n}\nexports.mergeEvaluated = {\n    props: makeMergeEvaluated({\n        mergeNames: (gen, from, to)=>gen.if((0, codegen_1._)`${to} !== true && ${from} !== undefined`, ()=>{\n                gen.if((0, codegen_1._)`${from} === true`, ()=>gen.assign(to, true), ()=>gen.assign(to, (0, codegen_1._)`${to} || {}`).code((0, codegen_1._)`Object.assign(${to}, ${from})`));\n            }),\n        mergeToName: (gen, from, to)=>gen.if((0, codegen_1._)`${to} !== true`, ()=>{\n                if (from === true) {\n                    gen.assign(to, true);\n                } else {\n                    gen.assign(to, (0, codegen_1._)`${to} || {}`);\n                    setEvaluated(gen, to, from);\n                }\n            }),\n        mergeValues: (from, to)=>from === true ? true : {\n                ...from,\n                ...to\n            },\n        resultToName: evaluatedPropsToName\n    }),\n    items: makeMergeEvaluated({\n        mergeNames: (gen, from, to)=>gen.if((0, codegen_1._)`${to} !== true && ${from} !== undefined`, ()=>gen.assign(to, (0, codegen_1._)`${from} === true ? true : ${to} > ${from} ? ${to} : ${from}`)),\n        mergeToName: (gen, from, to)=>gen.if((0, codegen_1._)`${to} !== true`, ()=>gen.assign(to, from === true ? true : (0, codegen_1._)`${to} > ${from} ? ${to} : ${from}`)),\n        mergeValues: (from, to)=>from === true ? true : Math.max(from, to),\n        resultToName: (gen, items)=>gen.var(\"items\", items)\n    })\n};\nfunction evaluatedPropsToName(gen, ps) {\n    if (ps === true) return gen.var(\"props\", true);\n    const props = gen.var(\"props\", (0, codegen_1._)`{}`);\n    if (ps !== undefined) setEvaluated(gen, props, ps);\n    return props;\n}\nexports.evaluatedPropsToName = evaluatedPropsToName;\nfunction setEvaluated(gen, props, ps) {\n    Object.keys(ps).forEach((p)=>gen.assign((0, codegen_1._)`${props}${(0, codegen_1.getProperty)(p)}`, true));\n}\nexports.setEvaluated = setEvaluated;\nconst snippets = {};\nfunction useFunc(gen, f) {\n    return gen.scopeValue(\"func\", {\n        ref: f,\n        code: snippets[f.code] || (snippets[f.code] = new code_1._Code(f.code))\n    });\n}\nexports.useFunc = useFunc;\nvar Type;\n(function(Type) {\n    Type[Type[\"Num\"] = 0] = \"Num\";\n    Type[Type[\"Str\"] = 1] = \"Str\";\n})(Type = exports.Type || (exports.Type = {}));\nfunction getErrorPath(dataProp, dataPropType, jsPropertySyntax) {\n    // let path\n    if (dataProp instanceof codegen_1.Name) {\n        const isNumber = dataPropType === Type.Num;\n        return jsPropertySyntax ? isNumber ? (0, codegen_1._)`\"[\" + ${dataProp} + \"]\"` : (0, codegen_1._)`\"['\" + ${dataProp} + \"']\"` : isNumber ? (0, codegen_1._)`\"/\" + ${dataProp}` : (0, codegen_1._)`\"/\" + ${dataProp}.replace(/~/g, \"~0\").replace(/\\\\//g, \"~1\")`; // TODO maybe use global escapePointer\n    }\n    return jsPropertySyntax ? (0, codegen_1.getProperty)(dataProp).toString() : \"/\" + escapeJsonPointer(dataProp);\n}\nexports.getErrorPath = getErrorPath;\nfunction checkStrictMode(it, msg, mode = it.opts.strictSchema) {\n    if (!mode) return;\n    msg = `strict mode: ${msg}`;\n    if (mode === true) throw new Error(msg);\n    it.self.logger.warn(msg);\n}\nexports.checkStrictMode = checkStrictMode; //# sourceMappingURL=util.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/util.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/validate/applicability.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/validate/applicability.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.shouldUseRule = exports.shouldUseGroup = exports.schemaHasRulesForType = void 0;\nfunction schemaHasRulesForType({ schema, self }, type) {\n    const group = self.RULES.types[type];\n    return group && group !== true && shouldUseGroup(schema, group);\n}\nexports.schemaHasRulesForType = schemaHasRulesForType;\nfunction shouldUseGroup(schema, group) {\n    return group.rules.some((rule)=>shouldUseRule(schema, rule));\n}\nexports.shouldUseGroup = shouldUseGroup;\nfunction shouldUseRule(schema, rule) {\n    var _a;\n    return schema[rule.keyword] !== undefined || ((_a = rule.definition.implements) === null || _a === void 0 ? void 0 : _a.some((kwd)=>schema[kwd] !== undefined));\n}\nexports.shouldUseRule = shouldUseRule; //# sourceMappingURL=applicability.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG5lYXItanMvYWNjb3VudHMvbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L2NvbXBpbGUvdmFsaWRhdGUvYXBwbGljYWJpbGl0eS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQscUJBQXFCLEdBQUdBLHNCQUFzQixHQUFHQSw2QkFBNkIsR0FBRyxLQUFLO0FBQ3RGLFNBQVNJLHNCQUFzQixFQUFFQyxNQUFNLEVBQUVDLElBQUksRUFBRSxFQUFFQyxJQUFJO0lBQ2pELE1BQU1DLFFBQVFGLEtBQUtHLEtBQUssQ0FBQ0MsS0FBSyxDQUFDSCxLQUFLO0lBQ3BDLE9BQU9DLFNBQVNBLFVBQVUsUUFBUUwsZUFBZUUsUUFBUUc7QUFDN0Q7QUFDQVIsNkJBQTZCLEdBQUdJO0FBQ2hDLFNBQVNELGVBQWVFLE1BQU0sRUFBRUcsS0FBSztJQUNqQyxPQUFPQSxNQUFNRyxLQUFLLENBQUNDLElBQUksQ0FBQyxDQUFDQyxPQUFTWCxjQUFjRyxRQUFRUTtBQUM1RDtBQUNBYixzQkFBc0IsR0FBR0c7QUFDekIsU0FBU0QsY0FBY0csTUFBTSxFQUFFUSxJQUFJO0lBQy9CLElBQUlDO0lBQ0osT0FBUVQsTUFBTSxDQUFDUSxLQUFLRSxPQUFPLENBQUMsS0FBS0MsYUFDNUIsRUFBQ0YsS0FBS0QsS0FBS0ksVUFBVSxDQUFDQyxVQUFVLE1BQU0sUUFBUUosT0FBTyxLQUFLLElBQUksS0FBSyxJQUFJQSxHQUFHRixJQUFJLENBQUMsQ0FBQ08sTUFBUWQsTUFBTSxDQUFDYyxJQUFJLEtBQUtILFVBQVM7QUFDMUg7QUFDQWhCLHFCQUFxQixHQUFHRSxlQUN4Qix5Q0FBeUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pLWFtLW5lYXJieS8uL25vZGVfbW9kdWxlcy9AbmVhci1qcy9hY2NvdW50cy9ub2RlX21vZHVsZXMvYWp2L2Rpc3QvY29tcGlsZS92YWxpZGF0ZS9hcHBsaWNhYmlsaXR5LmpzP2JhNjciXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnNob3VsZFVzZVJ1bGUgPSBleHBvcnRzLnNob3VsZFVzZUdyb3VwID0gZXhwb3J0cy5zY2hlbWFIYXNSdWxlc0ZvclR5cGUgPSB2b2lkIDA7XG5mdW5jdGlvbiBzY2hlbWFIYXNSdWxlc0ZvclR5cGUoeyBzY2hlbWEsIHNlbGYgfSwgdHlwZSkge1xuICAgIGNvbnN0IGdyb3VwID0gc2VsZi5SVUxFUy50eXBlc1t0eXBlXTtcbiAgICByZXR1cm4gZ3JvdXAgJiYgZ3JvdXAgIT09IHRydWUgJiYgc2hvdWxkVXNlR3JvdXAoc2NoZW1hLCBncm91cCk7XG59XG5leHBvcnRzLnNjaGVtYUhhc1J1bGVzRm9yVHlwZSA9IHNjaGVtYUhhc1J1bGVzRm9yVHlwZTtcbmZ1bmN0aW9uIHNob3VsZFVzZUdyb3VwKHNjaGVtYSwgZ3JvdXApIHtcbiAgICByZXR1cm4gZ3JvdXAucnVsZXMuc29tZSgocnVsZSkgPT4gc2hvdWxkVXNlUnVsZShzY2hlbWEsIHJ1bGUpKTtcbn1cbmV4cG9ydHMuc2hvdWxkVXNlR3JvdXAgPSBzaG91bGRVc2VHcm91cDtcbmZ1bmN0aW9uIHNob3VsZFVzZVJ1bGUoc2NoZW1hLCBydWxlKSB7XG4gICAgdmFyIF9hO1xuICAgIHJldHVybiAoc2NoZW1hW3J1bGUua2V5d29yZF0gIT09IHVuZGVmaW5lZCB8fFxuICAgICAgICAoKF9hID0gcnVsZS5kZWZpbml0aW9uLmltcGxlbWVudHMpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5zb21lKChrd2QpID0+IHNjaGVtYVtrd2RdICE9PSB1bmRlZmluZWQpKSk7XG59XG5leHBvcnRzLnNob3VsZFVzZVJ1bGUgPSBzaG91bGRVc2VSdWxlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXBwbGljYWJpbGl0eS5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJzaG91bGRVc2VSdWxlIiwic2hvdWxkVXNlR3JvdXAiLCJzY2hlbWFIYXNSdWxlc0ZvclR5cGUiLCJzY2hlbWEiLCJzZWxmIiwidHlwZSIsImdyb3VwIiwiUlVMRVMiLCJ0eXBlcyIsInJ1bGVzIiwic29tZSIsInJ1bGUiLCJfYSIsImtleXdvcmQiLCJ1bmRlZmluZWQiLCJkZWZpbml0aW9uIiwiaW1wbGVtZW50cyIsImt3ZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/validate/applicability.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/validate/boolSchema.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/validate/boolSchema.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.boolOrEmptySchema = exports.topBoolOrEmptySchema = void 0;\nconst errors_1 = __webpack_require__(/*! ../errors */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/errors.js\");\nconst codegen_1 = __webpack_require__(/*! ../codegen */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/codegen/index.js\");\nconst names_1 = __webpack_require__(/*! ../names */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/names.js\");\nconst boolError = {\n    message: \"boolean schema is false\"\n};\nfunction topBoolOrEmptySchema(it) {\n    const { gen, schema, validateName } = it;\n    if (schema === false) {\n        falseSchemaError(it, false);\n    } else if (typeof schema == \"object\" && schema.$async === true) {\n        gen.return(names_1.default.data);\n    } else {\n        gen.assign((0, codegen_1._)`${validateName}.errors`, null);\n        gen.return(true);\n    }\n}\nexports.topBoolOrEmptySchema = topBoolOrEmptySchema;\nfunction boolOrEmptySchema(it, valid) {\n    const { gen, schema } = it;\n    if (schema === false) {\n        gen.var(valid, false); // TODO var\n        falseSchemaError(it);\n    } else {\n        gen.var(valid, true); // TODO var\n    }\n}\nexports.boolOrEmptySchema = boolOrEmptySchema;\nfunction falseSchemaError(it, overrideAllErrors) {\n    const { gen, data } = it;\n    // TODO maybe some other interface should be used for non-keyword validation errors...\n    const cxt = {\n        gen,\n        keyword: \"false schema\",\n        data,\n        schema: false,\n        schemaCode: false,\n        schemaValue: false,\n        params: {},\n        it\n    };\n    (0, errors_1.reportError)(cxt, boolError, undefined, overrideAllErrors);\n} //# sourceMappingURL=boolSchema.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG5lYXItanMvYWNjb3VudHMvbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L2NvbXBpbGUvdmFsaWRhdGUvYm9vbFNjaGVtYS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQseUJBQXlCLEdBQUdBLDRCQUE0QixHQUFHLEtBQUs7QUFDaEUsTUFBTUksV0FBV0MsbUJBQU9BLENBQUMsaUdBQVc7QUFDcEMsTUFBTUMsWUFBWUQsbUJBQU9BLENBQUMseUdBQVk7QUFDdEMsTUFBTUUsVUFBVUYsbUJBQU9BLENBQUMsK0ZBQVU7QUFDbEMsTUFBTUcsWUFBWTtJQUNkQyxTQUFTO0FBQ2I7QUFDQSxTQUFTTixxQkFBcUJPLEVBQUU7SUFDNUIsTUFBTSxFQUFFQyxHQUFHLEVBQUVDLE1BQU0sRUFBRUMsWUFBWSxFQUFFLEdBQUdIO0lBQ3RDLElBQUlFLFdBQVcsT0FBTztRQUNsQkUsaUJBQWlCSixJQUFJO0lBQ3pCLE9BQ0ssSUFBSSxPQUFPRSxVQUFVLFlBQVlBLE9BQU9HLE1BQU0sS0FBSyxNQUFNO1FBQzFESixJQUFJSyxNQUFNLENBQUNULFFBQVFVLE9BQU8sQ0FBQ0MsSUFBSTtJQUNuQyxPQUNLO1FBQ0RQLElBQUlRLE1BQU0sQ0FBQyxDQUFDLEdBQUdiLFVBQVVjLENBQUMsQ0FBRSxDQUFDLEVBQUVQLGFBQWEsT0FBTyxDQUFDLEVBQUU7UUFDdERGLElBQUlLLE1BQU0sQ0FBQztJQUNmO0FBQ0o7QUFDQWhCLDRCQUE0QixHQUFHRztBQUMvQixTQUFTRCxrQkFBa0JRLEVBQUUsRUFBRVcsS0FBSztJQUNoQyxNQUFNLEVBQUVWLEdBQUcsRUFBRUMsTUFBTSxFQUFFLEdBQUdGO0lBQ3hCLElBQUlFLFdBQVcsT0FBTztRQUNsQkQsSUFBSVcsR0FBRyxDQUFDRCxPQUFPLFFBQVEsV0FBVztRQUNsQ1AsaUJBQWlCSjtJQUNyQixPQUNLO1FBQ0RDLElBQUlXLEdBQUcsQ0FBQ0QsT0FBTyxPQUFPLFdBQVc7SUFDckM7QUFDSjtBQUNBckIseUJBQXlCLEdBQUdFO0FBQzVCLFNBQVNZLGlCQUFpQkosRUFBRSxFQUFFYSxpQkFBaUI7SUFDM0MsTUFBTSxFQUFFWixHQUFHLEVBQUVPLElBQUksRUFBRSxHQUFHUjtJQUN0QixzRkFBc0Y7SUFDdEYsTUFBTWMsTUFBTTtRQUNSYjtRQUNBYyxTQUFTO1FBQ1RQO1FBQ0FOLFFBQVE7UUFDUmMsWUFBWTtRQUNaQyxhQUFhO1FBQ2JDLFFBQVEsQ0FBQztRQUNUbEI7SUFDSjtJQUNDLElBQUdOLFNBQVN5QixXQUFXLEVBQUVMLEtBQUtoQixXQUFXc0IsV0FBV1A7QUFDekQsRUFDQSxzQ0FBc0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pLWFtLW5lYXJieS8uL25vZGVfbW9kdWxlcy9AbmVhci1qcy9hY2NvdW50cy9ub2RlX21vZHVsZXMvYWp2L2Rpc3QvY29tcGlsZS92YWxpZGF0ZS9ib29sU2NoZW1hLmpzP2NmYmEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmJvb2xPckVtcHR5U2NoZW1hID0gZXhwb3J0cy50b3BCb29sT3JFbXB0eVNjaGVtYSA9IHZvaWQgMDtcbmNvbnN0IGVycm9yc18xID0gcmVxdWlyZShcIi4uL2Vycm9yc1wiKTtcbmNvbnN0IGNvZGVnZW5fMSA9IHJlcXVpcmUoXCIuLi9jb2RlZ2VuXCIpO1xuY29uc3QgbmFtZXNfMSA9IHJlcXVpcmUoXCIuLi9uYW1lc1wiKTtcbmNvbnN0IGJvb2xFcnJvciA9IHtcbiAgICBtZXNzYWdlOiBcImJvb2xlYW4gc2NoZW1hIGlzIGZhbHNlXCIsXG59O1xuZnVuY3Rpb24gdG9wQm9vbE9yRW1wdHlTY2hlbWEoaXQpIHtcbiAgICBjb25zdCB7IGdlbiwgc2NoZW1hLCB2YWxpZGF0ZU5hbWUgfSA9IGl0O1xuICAgIGlmIChzY2hlbWEgPT09IGZhbHNlKSB7XG4gICAgICAgIGZhbHNlU2NoZW1hRXJyb3IoaXQsIGZhbHNlKTtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIHNjaGVtYSA9PSBcIm9iamVjdFwiICYmIHNjaGVtYS4kYXN5bmMgPT09IHRydWUpIHtcbiAgICAgICAgZ2VuLnJldHVybihuYW1lc18xLmRlZmF1bHQuZGF0YSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBnZW4uYXNzaWduKCgwLCBjb2RlZ2VuXzEuXykgYCR7dmFsaWRhdGVOYW1lfS5lcnJvcnNgLCBudWxsKTtcbiAgICAgICAgZ2VuLnJldHVybih0cnVlKTtcbiAgICB9XG59XG5leHBvcnRzLnRvcEJvb2xPckVtcHR5U2NoZW1hID0gdG9wQm9vbE9yRW1wdHlTY2hlbWE7XG5mdW5jdGlvbiBib29sT3JFbXB0eVNjaGVtYShpdCwgdmFsaWQpIHtcbiAgICBjb25zdCB7IGdlbiwgc2NoZW1hIH0gPSBpdDtcbiAgICBpZiAoc2NoZW1hID09PSBmYWxzZSkge1xuICAgICAgICBnZW4udmFyKHZhbGlkLCBmYWxzZSk7IC8vIFRPRE8gdmFyXG4gICAgICAgIGZhbHNlU2NoZW1hRXJyb3IoaXQpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgZ2VuLnZhcih2YWxpZCwgdHJ1ZSk7IC8vIFRPRE8gdmFyXG4gICAgfVxufVxuZXhwb3J0cy5ib29sT3JFbXB0eVNjaGVtYSA9IGJvb2xPckVtcHR5U2NoZW1hO1xuZnVuY3Rpb24gZmFsc2VTY2hlbWFFcnJvcihpdCwgb3ZlcnJpZGVBbGxFcnJvcnMpIHtcbiAgICBjb25zdCB7IGdlbiwgZGF0YSB9ID0gaXQ7XG4gICAgLy8gVE9ETyBtYXliZSBzb21lIG90aGVyIGludGVyZmFjZSBzaG91bGQgYmUgdXNlZCBmb3Igbm9uLWtleXdvcmQgdmFsaWRhdGlvbiBlcnJvcnMuLi5cbiAgICBjb25zdCBjeHQgPSB7XG4gICAgICAgIGdlbixcbiAgICAgICAga2V5d29yZDogXCJmYWxzZSBzY2hlbWFcIixcbiAgICAgICAgZGF0YSxcbiAgICAgICAgc2NoZW1hOiBmYWxzZSxcbiAgICAgICAgc2NoZW1hQ29kZTogZmFsc2UsXG4gICAgICAgIHNjaGVtYVZhbHVlOiBmYWxzZSxcbiAgICAgICAgcGFyYW1zOiB7fSxcbiAgICAgICAgaXQsXG4gICAgfTtcbiAgICAoMCwgZXJyb3JzXzEucmVwb3J0RXJyb3IpKGN4dCwgYm9vbEVycm9yLCB1bmRlZmluZWQsIG92ZXJyaWRlQWxsRXJyb3JzKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJvb2xTY2hlbWEuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiYm9vbE9yRW1wdHlTY2hlbWEiLCJ0b3BCb29sT3JFbXB0eVNjaGVtYSIsImVycm9yc18xIiwicmVxdWlyZSIsImNvZGVnZW5fMSIsIm5hbWVzXzEiLCJib29sRXJyb3IiLCJtZXNzYWdlIiwiaXQiLCJnZW4iLCJzY2hlbWEiLCJ2YWxpZGF0ZU5hbWUiLCJmYWxzZVNjaGVtYUVycm9yIiwiJGFzeW5jIiwicmV0dXJuIiwiZGVmYXVsdCIsImRhdGEiLCJhc3NpZ24iLCJfIiwidmFsaWQiLCJ2YXIiLCJvdmVycmlkZUFsbEVycm9ycyIsImN4dCIsImtleXdvcmQiLCJzY2hlbWFDb2RlIiwic2NoZW1hVmFsdWUiLCJwYXJhbXMiLCJyZXBvcnRFcnJvciIsInVuZGVmaW5lZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/validate/boolSchema.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/validate/dataType.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/validate/dataType.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.reportTypeError = exports.checkDataTypes = exports.checkDataType = exports.coerceAndCheckDataType = exports.getJSONTypes = exports.getSchemaTypes = exports.DataType = void 0;\nconst rules_1 = __webpack_require__(/*! ../rules */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/rules.js\");\nconst applicability_1 = __webpack_require__(/*! ./applicability */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/validate/applicability.js\");\nconst errors_1 = __webpack_require__(/*! ../errors */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/errors.js\");\nconst codegen_1 = __webpack_require__(/*! ../codegen */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/codegen/index.js\");\nconst util_1 = __webpack_require__(/*! ../util */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/util.js\");\nvar DataType;\n(function(DataType) {\n    DataType[DataType[\"Correct\"] = 0] = \"Correct\";\n    DataType[DataType[\"Wrong\"] = 1] = \"Wrong\";\n})(DataType = exports.DataType || (exports.DataType = {}));\nfunction getSchemaTypes(schema) {\n    const types = getJSONTypes(schema.type);\n    const hasNull = types.includes(\"null\");\n    if (hasNull) {\n        if (schema.nullable === false) throw new Error(\"type: null contradicts nullable: false\");\n    } else {\n        if (!types.length && schema.nullable !== undefined) {\n            throw new Error('\"nullable\" cannot be used without \"type\"');\n        }\n        if (schema.nullable === true) types.push(\"null\");\n    }\n    return types;\n}\nexports.getSchemaTypes = getSchemaTypes;\nfunction getJSONTypes(ts) {\n    const types = Array.isArray(ts) ? ts : ts ? [\n        ts\n    ] : [];\n    if (types.every(rules_1.isJSONType)) return types;\n    throw new Error(\"type must be JSONType or JSONType[]: \" + types.join(\",\"));\n}\nexports.getJSONTypes = getJSONTypes;\nfunction coerceAndCheckDataType(it, types) {\n    const { gen, data, opts } = it;\n    const coerceTo = coerceToTypes(types, opts.coerceTypes);\n    const checkTypes = types.length > 0 && !(coerceTo.length === 0 && types.length === 1 && (0, applicability_1.schemaHasRulesForType)(it, types[0]));\n    if (checkTypes) {\n        const wrongType = checkDataTypes(types, data, opts.strictNumbers, DataType.Wrong);\n        gen.if(wrongType, ()=>{\n            if (coerceTo.length) coerceData(it, types, coerceTo);\n            else reportTypeError(it);\n        });\n    }\n    return checkTypes;\n}\nexports.coerceAndCheckDataType = coerceAndCheckDataType;\nconst COERCIBLE = new Set([\n    \"string\",\n    \"number\",\n    \"integer\",\n    \"boolean\",\n    \"null\"\n]);\nfunction coerceToTypes(types, coerceTypes) {\n    return coerceTypes ? types.filter((t)=>COERCIBLE.has(t) || coerceTypes === \"array\" && t === \"array\") : [];\n}\nfunction coerceData(it, types, coerceTo) {\n    const { gen, data, opts } = it;\n    const dataType = gen.let(\"dataType\", (0, codegen_1._)`typeof ${data}`);\n    const coerced = gen.let(\"coerced\", (0, codegen_1._)`undefined`);\n    if (opts.coerceTypes === \"array\") {\n        gen.if((0, codegen_1._)`${dataType} == 'object' && Array.isArray(${data}) && ${data}.length == 1`, ()=>gen.assign(data, (0, codegen_1._)`${data}[0]`).assign(dataType, (0, codegen_1._)`typeof ${data}`).if(checkDataTypes(types, data, opts.strictNumbers), ()=>gen.assign(coerced, data)));\n    }\n    gen.if((0, codegen_1._)`${coerced} !== undefined`);\n    for (const t of coerceTo){\n        if (COERCIBLE.has(t) || t === \"array\" && opts.coerceTypes === \"array\") {\n            coerceSpecificType(t);\n        }\n    }\n    gen.else();\n    reportTypeError(it);\n    gen.endIf();\n    gen.if((0, codegen_1._)`${coerced} !== undefined`, ()=>{\n        gen.assign(data, coerced);\n        assignParentData(it, coerced);\n    });\n    function coerceSpecificType(t) {\n        switch(t){\n            case \"string\":\n                gen.elseIf((0, codegen_1._)`${dataType} == \"number\" || ${dataType} == \"boolean\"`).assign(coerced, (0, codegen_1._)`\"\" + ${data}`).elseIf((0, codegen_1._)`${data} === null`).assign(coerced, (0, codegen_1._)`\"\"`);\n                return;\n            case \"number\":\n                gen.elseIf((0, codegen_1._)`${dataType} == \"boolean\" || ${data} === null\n              || (${dataType} == \"string\" && ${data} && ${data} == +${data})`).assign(coerced, (0, codegen_1._)`+${data}`);\n                return;\n            case \"integer\":\n                gen.elseIf((0, codegen_1._)`${dataType} === \"boolean\" || ${data} === null\n              || (${dataType} === \"string\" && ${data} && ${data} == +${data} && !(${data} % 1))`).assign(coerced, (0, codegen_1._)`+${data}`);\n                return;\n            case \"boolean\":\n                gen.elseIf((0, codegen_1._)`${data} === \"false\" || ${data} === 0 || ${data} === null`).assign(coerced, false).elseIf((0, codegen_1._)`${data} === \"true\" || ${data} === 1`).assign(coerced, true);\n                return;\n            case \"null\":\n                gen.elseIf((0, codegen_1._)`${data} === \"\" || ${data} === 0 || ${data} === false`);\n                gen.assign(coerced, null);\n                return;\n            case \"array\":\n                gen.elseIf((0, codegen_1._)`${dataType} === \"string\" || ${dataType} === \"number\"\n              || ${dataType} === \"boolean\" || ${data} === null`).assign(coerced, (0, codegen_1._)`[${data}]`);\n        }\n    }\n}\nfunction assignParentData({ gen, parentData, parentDataProperty }, expr) {\n    // TODO use gen.property\n    gen.if((0, codegen_1._)`${parentData} !== undefined`, ()=>gen.assign((0, codegen_1._)`${parentData}[${parentDataProperty}]`, expr));\n}\nfunction checkDataType(dataType, data, strictNums, correct = DataType.Correct) {\n    const EQ = correct === DataType.Correct ? codegen_1.operators.EQ : codegen_1.operators.NEQ;\n    let cond;\n    switch(dataType){\n        case \"null\":\n            return (0, codegen_1._)`${data} ${EQ} null`;\n        case \"array\":\n            cond = (0, codegen_1._)`Array.isArray(${data})`;\n            break;\n        case \"object\":\n            cond = (0, codegen_1._)`${data} && typeof ${data} == \"object\" && !Array.isArray(${data})`;\n            break;\n        case \"integer\":\n            cond = numCond((0, codegen_1._)`!(${data} % 1) && !isNaN(${data})`);\n            break;\n        case \"number\":\n            cond = numCond();\n            break;\n        default:\n            return (0, codegen_1._)`typeof ${data} ${EQ} ${dataType}`;\n    }\n    return correct === DataType.Correct ? cond : (0, codegen_1.not)(cond);\n    function numCond(_cond = codegen_1.nil) {\n        return (0, codegen_1.and)((0, codegen_1._)`typeof ${data} == \"number\"`, _cond, strictNums ? (0, codegen_1._)`isFinite(${data})` : codegen_1.nil);\n    }\n}\nexports.checkDataType = checkDataType;\nfunction checkDataTypes(dataTypes, data, strictNums, correct) {\n    if (dataTypes.length === 1) {\n        return checkDataType(dataTypes[0], data, strictNums, correct);\n    }\n    let cond;\n    const types = (0, util_1.toHash)(dataTypes);\n    if (types.array && types.object) {\n        const notObj = (0, codegen_1._)`typeof ${data} != \"object\"`;\n        cond = types.null ? notObj : (0, codegen_1._)`!${data} || ${notObj}`;\n        delete types.null;\n        delete types.array;\n        delete types.object;\n    } else {\n        cond = codegen_1.nil;\n    }\n    if (types.number) delete types.integer;\n    for(const t in types)cond = (0, codegen_1.and)(cond, checkDataType(t, data, strictNums, correct));\n    return cond;\n}\nexports.checkDataTypes = checkDataTypes;\nconst typeError = {\n    message: ({ schema })=>`must be ${schema}`,\n    params: ({ schema, schemaValue })=>typeof schema == \"string\" ? (0, codegen_1._)`{type: ${schema}}` : (0, codegen_1._)`{type: ${schemaValue}}`\n};\nfunction reportTypeError(it) {\n    const cxt = getTypeErrorContext(it);\n    (0, errors_1.reportError)(cxt, typeError);\n}\nexports.reportTypeError = reportTypeError;\nfunction getTypeErrorContext(it) {\n    const { gen, data, schema } = it;\n    const schemaCode = (0, util_1.schemaRefOrVal)(it, schema, \"type\");\n    return {\n        gen,\n        keyword: \"type\",\n        data,\n        schema: schema.type,\n        schemaCode,\n        schemaValue: schemaCode,\n        parentSchema: schema,\n        params: {},\n        it\n    };\n} //# sourceMappingURL=dataType.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG5lYXItanMvYWNjb3VudHMvbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L2NvbXBpbGUvdmFsaWRhdGUvZGF0YVR5cGUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELHVCQUF1QixHQUFHQSxzQkFBc0IsR0FBR0EscUJBQXFCLEdBQUdBLDhCQUE4QixHQUFHQSxvQkFBb0IsR0FBR0Esc0JBQXNCLEdBQUdBLGdCQUFnQixHQUFHLEtBQUs7QUFDcEwsTUFBTVMsVUFBVUMsbUJBQU9BLENBQUMsK0ZBQVU7QUFDbEMsTUFBTUMsa0JBQWtCRCxtQkFBT0EsQ0FBQyx1SEFBaUI7QUFDakQsTUFBTUUsV0FBV0YsbUJBQU9BLENBQUMsaUdBQVc7QUFDcEMsTUFBTUcsWUFBWUgsbUJBQU9BLENBQUMseUdBQVk7QUFDdEMsTUFBTUksU0FBU0osbUJBQU9BLENBQUMsNkZBQVM7QUFDaEMsSUFBSUY7QUFDSCxVQUFVQSxRQUFRO0lBQ2ZBLFFBQVEsQ0FBQ0EsUUFBUSxDQUFDLFVBQVUsR0FBRyxFQUFFLEdBQUc7SUFDcENBLFFBQVEsQ0FBQ0EsUUFBUSxDQUFDLFFBQVEsR0FBRyxFQUFFLEdBQUc7QUFDdEMsR0FBR0EsV0FBV1IsUUFBUVEsUUFBUSxJQUFLUixDQUFBQSxnQkFBZ0IsR0FBRyxDQUFDO0FBQ3ZELFNBQVNPLGVBQWVRLE1BQU07SUFDMUIsTUFBTUMsUUFBUVYsYUFBYVMsT0FBT0UsSUFBSTtJQUN0QyxNQUFNQyxVQUFVRixNQUFNRyxRQUFRLENBQUM7SUFDL0IsSUFBSUQsU0FBUztRQUNULElBQUlILE9BQU9LLFFBQVEsS0FBSyxPQUNwQixNQUFNLElBQUlDLE1BQU07SUFDeEIsT0FDSztRQUNELElBQUksQ0FBQ0wsTUFBTU0sTUFBTSxJQUFJUCxPQUFPSyxRQUFRLEtBQUtHLFdBQVc7WUFDaEQsTUFBTSxJQUFJRixNQUFNO1FBQ3BCO1FBQ0EsSUFBSU4sT0FBT0ssUUFBUSxLQUFLLE1BQ3BCSixNQUFNUSxJQUFJLENBQUM7SUFDbkI7SUFDQSxPQUFPUjtBQUNYO0FBQ0FoQixzQkFBc0IsR0FBR087QUFDekIsU0FBU0QsYUFBYW1CLEVBQUU7SUFDcEIsTUFBTVQsUUFBUVUsTUFBTUMsT0FBTyxDQUFDRixNQUFNQSxLQUFLQSxLQUFLO1FBQUNBO0tBQUcsR0FBRyxFQUFFO0lBQ3JELElBQUlULE1BQU1ZLEtBQUssQ0FBQ25CLFFBQVFvQixVQUFVLEdBQzlCLE9BQU9iO0lBQ1gsTUFBTSxJQUFJSyxNQUFNLDBDQUEwQ0wsTUFBTWMsSUFBSSxDQUFDO0FBQ3pFO0FBQ0E5QixvQkFBb0IsR0FBR007QUFDdkIsU0FBU0QsdUJBQXVCMEIsRUFBRSxFQUFFZixLQUFLO0lBQ3JDLE1BQU0sRUFBRWdCLEdBQUcsRUFBRUMsSUFBSSxFQUFFQyxJQUFJLEVBQUUsR0FBR0g7SUFDNUIsTUFBTUksV0FBV0MsY0FBY3BCLE9BQU9rQixLQUFLRyxXQUFXO0lBQ3RELE1BQU1DLGFBQWF0QixNQUFNTSxNQUFNLEdBQUcsS0FDOUIsQ0FBRWEsQ0FBQUEsU0FBU2IsTUFBTSxLQUFLLEtBQUtOLE1BQU1NLE1BQU0sS0FBSyxLQUFLLENBQUMsR0FBR1gsZ0JBQWdCNEIscUJBQXFCLEVBQUVSLElBQUlmLEtBQUssQ0FBQyxFQUFFO0lBQzVHLElBQUlzQixZQUFZO1FBQ1osTUFBTUUsWUFBWXJDLGVBQWVhLE9BQU9pQixNQUFNQyxLQUFLTyxhQUFhLEVBQUVqQyxTQUFTa0MsS0FBSztRQUNoRlYsSUFBSVcsRUFBRSxDQUFDSCxXQUFXO1lBQ2QsSUFBSUwsU0FBU2IsTUFBTSxFQUNmc0IsV0FBV2IsSUFBSWYsT0FBT21CO2lCQUV0QmpDLGdCQUFnQjZCO1FBQ3hCO0lBQ0o7SUFDQSxPQUFPTztBQUNYO0FBQ0F0Qyw4QkFBOEIsR0FBR0s7QUFDakMsTUFBTXdDLFlBQVksSUFBSUMsSUFBSTtJQUFDO0lBQVU7SUFBVTtJQUFXO0lBQVc7Q0FBTztBQUM1RSxTQUFTVixjQUFjcEIsS0FBSyxFQUFFcUIsV0FBVztJQUNyQyxPQUFPQSxjQUNEckIsTUFBTStCLE1BQU0sQ0FBQyxDQUFDQyxJQUFNSCxVQUFVSSxHQUFHLENBQUNELE1BQU9YLGdCQUFnQixXQUFXVyxNQUFNLFdBQzFFLEVBQUU7QUFDWjtBQUNBLFNBQVNKLFdBQVdiLEVBQUUsRUFBRWYsS0FBSyxFQUFFbUIsUUFBUTtJQUNuQyxNQUFNLEVBQUVILEdBQUcsRUFBRUMsSUFBSSxFQUFFQyxJQUFJLEVBQUUsR0FBR0g7SUFDNUIsTUFBTW1CLFdBQVdsQixJQUFJbUIsR0FBRyxDQUFDLFlBQVksQ0FBQyxHQUFHdEMsVUFBVXVDLENBQUMsQ0FBRSxDQUFDLE9BQU8sRUFBRW5CLEtBQUssQ0FBQztJQUN0RSxNQUFNb0IsVUFBVXJCLElBQUltQixHQUFHLENBQUMsV0FBVyxDQUFDLEdBQUd0QyxVQUFVdUMsQ0FBQyxDQUFFLENBQUMsU0FBUyxDQUFDO0lBQy9ELElBQUlsQixLQUFLRyxXQUFXLEtBQUssU0FBUztRQUM5QkwsSUFBSVcsRUFBRSxDQUFDLENBQUMsR0FBRzlCLFVBQVV1QyxDQUFDLENBQUUsQ0FBQyxFQUFFRixTQUFTLDhCQUE4QixFQUFFakIsS0FBSyxLQUFLLEVBQUVBLEtBQUssWUFBWSxDQUFDLEVBQUUsSUFBTUQsSUFDckdzQixNQUFNLENBQUNyQixNQUFNLENBQUMsR0FBR3BCLFVBQVV1QyxDQUFDLENBQUUsQ0FBQyxFQUFFbkIsS0FBSyxHQUFHLENBQUMsRUFDMUNxQixNQUFNLENBQUNKLFVBQVUsQ0FBQyxHQUFHckMsVUFBVXVDLENBQUMsQ0FBRSxDQUFDLE9BQU8sRUFBRW5CLEtBQUssQ0FBQyxFQUNsRFUsRUFBRSxDQUFDeEMsZUFBZWEsT0FBT2lCLE1BQU1DLEtBQUtPLGFBQWEsR0FBRyxJQUFNVCxJQUFJc0IsTUFBTSxDQUFDRCxTQUFTcEI7SUFDdkY7SUFDQUQsSUFBSVcsRUFBRSxDQUFDLENBQUMsR0FBRzlCLFVBQVV1QyxDQUFDLENBQUUsQ0FBQyxFQUFFQyxRQUFRLGNBQWMsQ0FBQztJQUNsRCxLQUFLLE1BQU1MLEtBQUtiLFNBQVU7UUFDdEIsSUFBSVUsVUFBVUksR0FBRyxDQUFDRCxNQUFPQSxNQUFNLFdBQVdkLEtBQUtHLFdBQVcsS0FBSyxTQUFVO1lBQ3JFa0IsbUJBQW1CUDtRQUN2QjtJQUNKO0lBQ0FoQixJQUFJd0IsSUFBSTtJQUNSdEQsZ0JBQWdCNkI7SUFDaEJDLElBQUl5QixLQUFLO0lBQ1R6QixJQUFJVyxFQUFFLENBQUMsQ0FBQyxHQUFHOUIsVUFBVXVDLENBQUMsQ0FBRSxDQUFDLEVBQUVDLFFBQVEsY0FBYyxDQUFDLEVBQUU7UUFDaERyQixJQUFJc0IsTUFBTSxDQUFDckIsTUFBTW9CO1FBQ2pCSyxpQkFBaUIzQixJQUFJc0I7SUFDekI7SUFDQSxTQUFTRSxtQkFBbUJQLENBQUM7UUFDekIsT0FBUUE7WUFDSixLQUFLO2dCQUNEaEIsSUFDSzJCLE1BQU0sQ0FBQyxDQUFDLEdBQUc5QyxVQUFVdUMsQ0FBQyxDQUFFLENBQUMsRUFBRUYsU0FBUyxnQkFBZ0IsRUFBRUEsU0FBUyxhQUFhLENBQUMsRUFDN0VJLE1BQU0sQ0FBQ0QsU0FBUyxDQUFDLEdBQUd4QyxVQUFVdUMsQ0FBQyxDQUFFLENBQUMsS0FBSyxFQUFFbkIsS0FBSyxDQUFDLEVBQy9DMEIsTUFBTSxDQUFDLENBQUMsR0FBRzlDLFVBQVV1QyxDQUFDLENBQUUsQ0FBQyxFQUFFbkIsS0FBSyxTQUFTLENBQUMsRUFDMUNxQixNQUFNLENBQUNELFNBQVMsQ0FBQyxHQUFHeEMsVUFBVXVDLENBQUMsQ0FBRSxDQUFDLEVBQUUsQ0FBQztnQkFDMUM7WUFDSixLQUFLO2dCQUNEcEIsSUFDSzJCLE1BQU0sQ0FBQyxDQUFDLEdBQUc5QyxVQUFVdUMsQ0FBQyxDQUFFLENBQUMsRUFBRUYsU0FBUyxpQkFBaUIsRUFBRWpCLEtBQUs7a0JBQy9ELEVBQUVpQixTQUFTLGdCQUFnQixFQUFFakIsS0FBSyxJQUFJLEVBQUVBLEtBQUssS0FBSyxFQUFFQSxLQUFLLENBQUMsQ0FBQyxFQUN4RHFCLE1BQU0sQ0FBQ0QsU0FBUyxDQUFDLEdBQUd4QyxVQUFVdUMsQ0FBQyxDQUFFLENBQUMsQ0FBQyxFQUFFbkIsS0FBSyxDQUFDO2dCQUNoRDtZQUNKLEtBQUs7Z0JBQ0RELElBQ0syQixNQUFNLENBQUMsQ0FBQyxHQUFHOUMsVUFBVXVDLENBQUMsQ0FBRSxDQUFDLEVBQUVGLFNBQVMsa0JBQWtCLEVBQUVqQixLQUFLO2tCQUNoRSxFQUFFaUIsU0FBUyxpQkFBaUIsRUFBRWpCLEtBQUssSUFBSSxFQUFFQSxLQUFLLEtBQUssRUFBRUEsS0FBSyxNQUFNLEVBQUVBLEtBQUssTUFBTSxDQUFDLEVBQzNFcUIsTUFBTSxDQUFDRCxTQUFTLENBQUMsR0FBR3hDLFVBQVV1QyxDQUFDLENBQUUsQ0FBQyxDQUFDLEVBQUVuQixLQUFLLENBQUM7Z0JBQ2hEO1lBQ0osS0FBSztnQkFDREQsSUFDSzJCLE1BQU0sQ0FBQyxDQUFDLEdBQUc5QyxVQUFVdUMsQ0FBQyxDQUFFLENBQUMsRUFBRW5CLEtBQUssZ0JBQWdCLEVBQUVBLEtBQUssVUFBVSxFQUFFQSxLQUFLLFNBQVMsQ0FBQyxFQUNsRnFCLE1BQU0sQ0FBQ0QsU0FBUyxPQUNoQk0sTUFBTSxDQUFDLENBQUMsR0FBRzlDLFVBQVV1QyxDQUFDLENBQUUsQ0FBQyxFQUFFbkIsS0FBSyxlQUFlLEVBQUVBLEtBQUssTUFBTSxDQUFDLEVBQzdEcUIsTUFBTSxDQUFDRCxTQUFTO2dCQUNyQjtZQUNKLEtBQUs7Z0JBQ0RyQixJQUFJMkIsTUFBTSxDQUFDLENBQUMsR0FBRzlDLFVBQVV1QyxDQUFDLENBQUUsQ0FBQyxFQUFFbkIsS0FBSyxXQUFXLEVBQUVBLEtBQUssVUFBVSxFQUFFQSxLQUFLLFVBQVUsQ0FBQztnQkFDbEZELElBQUlzQixNQUFNLENBQUNELFNBQVM7Z0JBQ3BCO1lBQ0osS0FBSztnQkFDRHJCLElBQ0syQixNQUFNLENBQUMsQ0FBQyxHQUFHOUMsVUFBVXVDLENBQUMsQ0FBRSxDQUFDLEVBQUVGLFNBQVMsaUJBQWlCLEVBQUVBLFNBQVM7aUJBQ3BFLEVBQUVBLFNBQVMsa0JBQWtCLEVBQUVqQixLQUFLLFNBQVMsQ0FBQyxFQUMxQ3FCLE1BQU0sQ0FBQ0QsU0FBUyxDQUFDLEdBQUd4QyxVQUFVdUMsQ0FBQyxDQUFFLENBQUMsQ0FBQyxFQUFFbkIsS0FBSyxDQUFDLENBQUM7UUFDekQ7SUFDSjtBQUNKO0FBQ0EsU0FBU3lCLGlCQUFpQixFQUFFMUIsR0FBRyxFQUFFNEIsVUFBVSxFQUFFQyxrQkFBa0IsRUFBRSxFQUFFQyxJQUFJO0lBQ25FLHdCQUF3QjtJQUN4QjlCLElBQUlXLEVBQUUsQ0FBQyxDQUFDLEdBQUc5QixVQUFVdUMsQ0FBQyxDQUFFLENBQUMsRUFBRVEsV0FBVyxjQUFjLENBQUMsRUFBRSxJQUFNNUIsSUFBSXNCLE1BQU0sQ0FBQyxDQUFDLEdBQUd6QyxVQUFVdUMsQ0FBQyxDQUFFLENBQUMsRUFBRVEsV0FBVyxDQUFDLEVBQUVDLG1CQUFtQixDQUFDLENBQUMsRUFBRUM7QUFDckk7QUFDQSxTQUFTMUQsY0FBYzhDLFFBQVEsRUFBRWpCLElBQUksRUFBRThCLFVBQVUsRUFBRUMsVUFBVXhELFNBQVN5RCxPQUFPO0lBQ3pFLE1BQU1DLEtBQUtGLFlBQVl4RCxTQUFTeUQsT0FBTyxHQUFHcEQsVUFBVXNELFNBQVMsQ0FBQ0QsRUFBRSxHQUFHckQsVUFBVXNELFNBQVMsQ0FBQ0MsR0FBRztJQUMxRixJQUFJQztJQUNKLE9BQVFuQjtRQUNKLEtBQUs7WUFDRCxPQUFPLENBQUMsR0FBR3JDLFVBQVV1QyxDQUFDLENBQUUsQ0FBQyxFQUFFbkIsS0FBSyxDQUFDLEVBQUVpQyxHQUFHLEtBQUssQ0FBQztRQUNoRCxLQUFLO1lBQ0RHLE9BQU8sQ0FBQyxHQUFHeEQsVUFBVXVDLENBQUMsQ0FBRSxDQUFDLGNBQWMsRUFBRW5CLEtBQUssQ0FBQyxDQUFDO1lBQ2hEO1FBQ0osS0FBSztZQUNEb0MsT0FBTyxDQUFDLEdBQUd4RCxVQUFVdUMsQ0FBQyxDQUFFLENBQUMsRUFBRW5CLEtBQUssV0FBVyxFQUFFQSxLQUFLLCtCQUErQixFQUFFQSxLQUFLLENBQUMsQ0FBQztZQUMxRjtRQUNKLEtBQUs7WUFDRG9DLE9BQU9DLFFBQVEsQ0FBQyxHQUFHekQsVUFBVXVDLENBQUMsQ0FBRSxDQUFDLEVBQUUsRUFBRW5CLEtBQUssZ0JBQWdCLEVBQUVBLEtBQUssQ0FBQyxDQUFDO1lBQ25FO1FBQ0osS0FBSztZQUNEb0MsT0FBT0M7WUFDUDtRQUNKO1lBQ0ksT0FBTyxDQUFDLEdBQUd6RCxVQUFVdUMsQ0FBQyxDQUFFLENBQUMsT0FBTyxFQUFFbkIsS0FBSyxDQUFDLEVBQUVpQyxHQUFHLENBQUMsRUFBRWhCLFNBQVMsQ0FBQztJQUNsRTtJQUNBLE9BQU9jLFlBQVl4RCxTQUFTeUQsT0FBTyxHQUFHSSxPQUFPLENBQUMsR0FBR3hELFVBQVUwRCxHQUFHLEVBQUVGO0lBQ2hFLFNBQVNDLFFBQVFFLFFBQVEzRCxVQUFVNEQsR0FBRztRQUNsQyxPQUFPLENBQUMsR0FBRzVELFVBQVU2RCxHQUFHLEVBQUUsQ0FBQyxHQUFHN0QsVUFBVXVDLENBQUMsQ0FBRSxDQUFDLE9BQU8sRUFBRW5CLEtBQUssWUFBWSxDQUFDLEVBQUV1QyxPQUFPVCxhQUFhLENBQUMsR0FBR2xELFVBQVV1QyxDQUFDLENBQUUsQ0FBQyxTQUFTLEVBQUVuQixLQUFLLENBQUMsQ0FBQyxHQUFHcEIsVUFBVTRELEdBQUc7SUFDcko7QUFDSjtBQUNBekUscUJBQXFCLEdBQUdJO0FBQ3hCLFNBQVNELGVBQWV3RSxTQUFTLEVBQUUxQyxJQUFJLEVBQUU4QixVQUFVLEVBQUVDLE9BQU87SUFDeEQsSUFBSVcsVUFBVXJELE1BQU0sS0FBSyxHQUFHO1FBQ3hCLE9BQU9sQixjQUFjdUUsU0FBUyxDQUFDLEVBQUUsRUFBRTFDLE1BQU04QixZQUFZQztJQUN6RDtJQUNBLElBQUlLO0lBQ0osTUFBTXJELFFBQVEsQ0FBQyxHQUFHRixPQUFPOEQsTUFBTSxFQUFFRDtJQUNqQyxJQUFJM0QsTUFBTTZELEtBQUssSUFBSTdELE1BQU04RCxNQUFNLEVBQUU7UUFDN0IsTUFBTUMsU0FBUyxDQUFDLEdBQUdsRSxVQUFVdUMsQ0FBQyxDQUFFLENBQUMsT0FBTyxFQUFFbkIsS0FBSyxZQUFZLENBQUM7UUFDNURvQyxPQUFPckQsTUFBTWdFLElBQUksR0FBR0QsU0FBUyxDQUFDLEdBQUdsRSxVQUFVdUMsQ0FBQyxDQUFFLENBQUMsQ0FBQyxFQUFFbkIsS0FBSyxJQUFJLEVBQUU4QyxPQUFPLENBQUM7UUFDckUsT0FBTy9ELE1BQU1nRSxJQUFJO1FBQ2pCLE9BQU9oRSxNQUFNNkQsS0FBSztRQUNsQixPQUFPN0QsTUFBTThELE1BQU07SUFDdkIsT0FDSztRQUNEVCxPQUFPeEQsVUFBVTRELEdBQUc7SUFDeEI7SUFDQSxJQUFJekQsTUFBTWlFLE1BQU0sRUFDWixPQUFPakUsTUFBTWtFLE9BQU87SUFDeEIsSUFBSyxNQUFNbEMsS0FBS2hDLE1BQ1pxRCxPQUFPLENBQUMsR0FBR3hELFVBQVU2RCxHQUFHLEVBQUVMLE1BQU1qRSxjQUFjNEMsR0FBR2YsTUFBTThCLFlBQVlDO0lBQ3ZFLE9BQU9LO0FBQ1g7QUFDQXJFLHNCQUFzQixHQUFHRztBQUN6QixNQUFNZ0YsWUFBWTtJQUNkQyxTQUFTLENBQUMsRUFBRXJFLE1BQU0sRUFBRSxHQUFLLENBQUMsUUFBUSxFQUFFQSxPQUFPLENBQUM7SUFDNUNzRSxRQUFRLENBQUMsRUFBRXRFLE1BQU0sRUFBRXVFLFdBQVcsRUFBRSxHQUFLLE9BQU92RSxVQUFVLFdBQVcsQ0FBQyxHQUFHRixVQUFVdUMsQ0FBQyxDQUFFLENBQUMsT0FBTyxFQUFFckMsT0FBTyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUdGLFVBQVV1QyxDQUFDLENBQUUsQ0FBQyxPQUFPLEVBQUVrQyxZQUFZLENBQUMsQ0FBQztBQUNySjtBQUNBLFNBQVNwRixnQkFBZ0I2QixFQUFFO0lBQ3ZCLE1BQU13RCxNQUFNQyxvQkFBb0J6RDtJQUMvQixJQUFHbkIsU0FBUzZFLFdBQVcsRUFBRUYsS0FBS0o7QUFDbkM7QUFDQW5GLHVCQUF1QixHQUFHRTtBQUMxQixTQUFTc0Ysb0JBQW9CekQsRUFBRTtJQUMzQixNQUFNLEVBQUVDLEdBQUcsRUFBRUMsSUFBSSxFQUFFbEIsTUFBTSxFQUFFLEdBQUdnQjtJQUM5QixNQUFNMkQsYUFBYSxDQUFDLEdBQUc1RSxPQUFPNkUsY0FBYyxFQUFFNUQsSUFBSWhCLFFBQVE7SUFDMUQsT0FBTztRQUNIaUI7UUFDQTRELFNBQVM7UUFDVDNEO1FBQ0FsQixRQUFRQSxPQUFPRSxJQUFJO1FBQ25CeUU7UUFDQUosYUFBYUk7UUFDYkcsY0FBYzlFO1FBQ2RzRSxRQUFRLENBQUM7UUFDVHREO0lBQ0o7QUFDSixFQUNBLG9DQUFvQyIsInNvdXJjZXMiOlsid2VicGFjazovL2ktYW0tbmVhcmJ5Ly4vbm9kZV9tb2R1bGVzL0BuZWFyLWpzL2FjY291bnRzL25vZGVfbW9kdWxlcy9hanYvZGlzdC9jb21waWxlL3ZhbGlkYXRlL2RhdGFUeXBlLmpzP2YxNDMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnJlcG9ydFR5cGVFcnJvciA9IGV4cG9ydHMuY2hlY2tEYXRhVHlwZXMgPSBleHBvcnRzLmNoZWNrRGF0YVR5cGUgPSBleHBvcnRzLmNvZXJjZUFuZENoZWNrRGF0YVR5cGUgPSBleHBvcnRzLmdldEpTT05UeXBlcyA9IGV4cG9ydHMuZ2V0U2NoZW1hVHlwZXMgPSBleHBvcnRzLkRhdGFUeXBlID0gdm9pZCAwO1xuY29uc3QgcnVsZXNfMSA9IHJlcXVpcmUoXCIuLi9ydWxlc1wiKTtcbmNvbnN0IGFwcGxpY2FiaWxpdHlfMSA9IHJlcXVpcmUoXCIuL2FwcGxpY2FiaWxpdHlcIik7XG5jb25zdCBlcnJvcnNfMSA9IHJlcXVpcmUoXCIuLi9lcnJvcnNcIik7XG5jb25zdCBjb2RlZ2VuXzEgPSByZXF1aXJlKFwiLi4vY29kZWdlblwiKTtcbmNvbnN0IHV0aWxfMSA9IHJlcXVpcmUoXCIuLi91dGlsXCIpO1xudmFyIERhdGFUeXBlO1xuKGZ1bmN0aW9uIChEYXRhVHlwZSkge1xuICAgIERhdGFUeXBlW0RhdGFUeXBlW1wiQ29ycmVjdFwiXSA9IDBdID0gXCJDb3JyZWN0XCI7XG4gICAgRGF0YVR5cGVbRGF0YVR5cGVbXCJXcm9uZ1wiXSA9IDFdID0gXCJXcm9uZ1wiO1xufSkoRGF0YVR5cGUgPSBleHBvcnRzLkRhdGFUeXBlIHx8IChleHBvcnRzLkRhdGFUeXBlID0ge30pKTtcbmZ1bmN0aW9uIGdldFNjaGVtYVR5cGVzKHNjaGVtYSkge1xuICAgIGNvbnN0IHR5cGVzID0gZ2V0SlNPTlR5cGVzKHNjaGVtYS50eXBlKTtcbiAgICBjb25zdCBoYXNOdWxsID0gdHlwZXMuaW5jbHVkZXMoXCJudWxsXCIpO1xuICAgIGlmIChoYXNOdWxsKSB7XG4gICAgICAgIGlmIChzY2hlbWEubnVsbGFibGUgPT09IGZhbHNlKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwidHlwZTogbnVsbCBjb250cmFkaWN0cyBudWxsYWJsZTogZmFsc2VcIik7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBpZiAoIXR5cGVzLmxlbmd0aCAmJiBzY2hlbWEubnVsbGFibGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdcIm51bGxhYmxlXCIgY2Fubm90IGJlIHVzZWQgd2l0aG91dCBcInR5cGVcIicpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzY2hlbWEubnVsbGFibGUgPT09IHRydWUpXG4gICAgICAgICAgICB0eXBlcy5wdXNoKFwibnVsbFwiKTtcbiAgICB9XG4gICAgcmV0dXJuIHR5cGVzO1xufVxuZXhwb3J0cy5nZXRTY2hlbWFUeXBlcyA9IGdldFNjaGVtYVR5cGVzO1xuZnVuY3Rpb24gZ2V0SlNPTlR5cGVzKHRzKSB7XG4gICAgY29uc3QgdHlwZXMgPSBBcnJheS5pc0FycmF5KHRzKSA/IHRzIDogdHMgPyBbdHNdIDogW107XG4gICAgaWYgKHR5cGVzLmV2ZXJ5KHJ1bGVzXzEuaXNKU09OVHlwZSkpXG4gICAgICAgIHJldHVybiB0eXBlcztcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJ0eXBlIG11c3QgYmUgSlNPTlR5cGUgb3IgSlNPTlR5cGVbXTogXCIgKyB0eXBlcy5qb2luKFwiLFwiKSk7XG59XG5leHBvcnRzLmdldEpTT05UeXBlcyA9IGdldEpTT05UeXBlcztcbmZ1bmN0aW9uIGNvZXJjZUFuZENoZWNrRGF0YVR5cGUoaXQsIHR5cGVzKSB7XG4gICAgY29uc3QgeyBnZW4sIGRhdGEsIG9wdHMgfSA9IGl0O1xuICAgIGNvbnN0IGNvZXJjZVRvID0gY29lcmNlVG9UeXBlcyh0eXBlcywgb3B0cy5jb2VyY2VUeXBlcyk7XG4gICAgY29uc3QgY2hlY2tUeXBlcyA9IHR5cGVzLmxlbmd0aCA+IDAgJiZcbiAgICAgICAgIShjb2VyY2VUby5sZW5ndGggPT09IDAgJiYgdHlwZXMubGVuZ3RoID09PSAxICYmICgwLCBhcHBsaWNhYmlsaXR5XzEuc2NoZW1hSGFzUnVsZXNGb3JUeXBlKShpdCwgdHlwZXNbMF0pKTtcbiAgICBpZiAoY2hlY2tUeXBlcykge1xuICAgICAgICBjb25zdCB3cm9uZ1R5cGUgPSBjaGVja0RhdGFUeXBlcyh0eXBlcywgZGF0YSwgb3B0cy5zdHJpY3ROdW1iZXJzLCBEYXRhVHlwZS5Xcm9uZyk7XG4gICAgICAgIGdlbi5pZih3cm9uZ1R5cGUsICgpID0+IHtcbiAgICAgICAgICAgIGlmIChjb2VyY2VUby5sZW5ndGgpXG4gICAgICAgICAgICAgICAgY29lcmNlRGF0YShpdCwgdHlwZXMsIGNvZXJjZVRvKTtcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICByZXBvcnRUeXBlRXJyb3IoaXQpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGNoZWNrVHlwZXM7XG59XG5leHBvcnRzLmNvZXJjZUFuZENoZWNrRGF0YVR5cGUgPSBjb2VyY2VBbmRDaGVja0RhdGFUeXBlO1xuY29uc3QgQ09FUkNJQkxFID0gbmV3IFNldChbXCJzdHJpbmdcIiwgXCJudW1iZXJcIiwgXCJpbnRlZ2VyXCIsIFwiYm9vbGVhblwiLCBcIm51bGxcIl0pO1xuZnVuY3Rpb24gY29lcmNlVG9UeXBlcyh0eXBlcywgY29lcmNlVHlwZXMpIHtcbiAgICByZXR1cm4gY29lcmNlVHlwZXNcbiAgICAgICAgPyB0eXBlcy5maWx0ZXIoKHQpID0+IENPRVJDSUJMRS5oYXModCkgfHwgKGNvZXJjZVR5cGVzID09PSBcImFycmF5XCIgJiYgdCA9PT0gXCJhcnJheVwiKSlcbiAgICAgICAgOiBbXTtcbn1cbmZ1bmN0aW9uIGNvZXJjZURhdGEoaXQsIHR5cGVzLCBjb2VyY2VUbykge1xuICAgIGNvbnN0IHsgZ2VuLCBkYXRhLCBvcHRzIH0gPSBpdDtcbiAgICBjb25zdCBkYXRhVHlwZSA9IGdlbi5sZXQoXCJkYXRhVHlwZVwiLCAoMCwgY29kZWdlbl8xLl8pIGB0eXBlb2YgJHtkYXRhfWApO1xuICAgIGNvbnN0IGNvZXJjZWQgPSBnZW4ubGV0KFwiY29lcmNlZFwiLCAoMCwgY29kZWdlbl8xLl8pIGB1bmRlZmluZWRgKTtcbiAgICBpZiAob3B0cy5jb2VyY2VUeXBlcyA9PT0gXCJhcnJheVwiKSB7XG4gICAgICAgIGdlbi5pZigoMCwgY29kZWdlbl8xLl8pIGAke2RhdGFUeXBlfSA9PSAnb2JqZWN0JyAmJiBBcnJheS5pc0FycmF5KCR7ZGF0YX0pICYmICR7ZGF0YX0ubGVuZ3RoID09IDFgLCAoKSA9PiBnZW5cbiAgICAgICAgICAgIC5hc3NpZ24oZGF0YSwgKDAsIGNvZGVnZW5fMS5fKSBgJHtkYXRhfVswXWApXG4gICAgICAgICAgICAuYXNzaWduKGRhdGFUeXBlLCAoMCwgY29kZWdlbl8xLl8pIGB0eXBlb2YgJHtkYXRhfWApXG4gICAgICAgICAgICAuaWYoY2hlY2tEYXRhVHlwZXModHlwZXMsIGRhdGEsIG9wdHMuc3RyaWN0TnVtYmVycyksICgpID0+IGdlbi5hc3NpZ24oY29lcmNlZCwgZGF0YSkpKTtcbiAgICB9XG4gICAgZ2VuLmlmKCgwLCBjb2RlZ2VuXzEuXykgYCR7Y29lcmNlZH0gIT09IHVuZGVmaW5lZGApO1xuICAgIGZvciAoY29uc3QgdCBvZiBjb2VyY2VUbykge1xuICAgICAgICBpZiAoQ09FUkNJQkxFLmhhcyh0KSB8fCAodCA9PT0gXCJhcnJheVwiICYmIG9wdHMuY29lcmNlVHlwZXMgPT09IFwiYXJyYXlcIikpIHtcbiAgICAgICAgICAgIGNvZXJjZVNwZWNpZmljVHlwZSh0KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZW4uZWxzZSgpO1xuICAgIHJlcG9ydFR5cGVFcnJvcihpdCk7XG4gICAgZ2VuLmVuZElmKCk7XG4gICAgZ2VuLmlmKCgwLCBjb2RlZ2VuXzEuXykgYCR7Y29lcmNlZH0gIT09IHVuZGVmaW5lZGAsICgpID0+IHtcbiAgICAgICAgZ2VuLmFzc2lnbihkYXRhLCBjb2VyY2VkKTtcbiAgICAgICAgYXNzaWduUGFyZW50RGF0YShpdCwgY29lcmNlZCk7XG4gICAgfSk7XG4gICAgZnVuY3Rpb24gY29lcmNlU3BlY2lmaWNUeXBlKHQpIHtcbiAgICAgICAgc3dpdGNoICh0KSB7XG4gICAgICAgICAgICBjYXNlIFwic3RyaW5nXCI6XG4gICAgICAgICAgICAgICAgZ2VuXG4gICAgICAgICAgICAgICAgICAgIC5lbHNlSWYoKDAsIGNvZGVnZW5fMS5fKSBgJHtkYXRhVHlwZX0gPT0gXCJudW1iZXJcIiB8fCAke2RhdGFUeXBlfSA9PSBcImJvb2xlYW5cImApXG4gICAgICAgICAgICAgICAgICAgIC5hc3NpZ24oY29lcmNlZCwgKDAsIGNvZGVnZW5fMS5fKSBgXCJcIiArICR7ZGF0YX1gKVxuICAgICAgICAgICAgICAgICAgICAuZWxzZUlmKCgwLCBjb2RlZ2VuXzEuXykgYCR7ZGF0YX0gPT09IG51bGxgKVxuICAgICAgICAgICAgICAgICAgICAuYXNzaWduKGNvZXJjZWQsICgwLCBjb2RlZ2VuXzEuXykgYFwiXCJgKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICBjYXNlIFwibnVtYmVyXCI6XG4gICAgICAgICAgICAgICAgZ2VuXG4gICAgICAgICAgICAgICAgICAgIC5lbHNlSWYoKDAsIGNvZGVnZW5fMS5fKSBgJHtkYXRhVHlwZX0gPT0gXCJib29sZWFuXCIgfHwgJHtkYXRhfSA9PT0gbnVsbFxuICAgICAgICAgICAgICB8fCAoJHtkYXRhVHlwZX0gPT0gXCJzdHJpbmdcIiAmJiAke2RhdGF9ICYmICR7ZGF0YX0gPT0gKyR7ZGF0YX0pYClcbiAgICAgICAgICAgICAgICAgICAgLmFzc2lnbihjb2VyY2VkLCAoMCwgY29kZWdlbl8xLl8pIGArJHtkYXRhfWApO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIGNhc2UgXCJpbnRlZ2VyXCI6XG4gICAgICAgICAgICAgICAgZ2VuXG4gICAgICAgICAgICAgICAgICAgIC5lbHNlSWYoKDAsIGNvZGVnZW5fMS5fKSBgJHtkYXRhVHlwZX0gPT09IFwiYm9vbGVhblwiIHx8ICR7ZGF0YX0gPT09IG51bGxcbiAgICAgICAgICAgICAgfHwgKCR7ZGF0YVR5cGV9ID09PSBcInN0cmluZ1wiICYmICR7ZGF0YX0gJiYgJHtkYXRhfSA9PSArJHtkYXRhfSAmJiAhKCR7ZGF0YX0gJSAxKSlgKVxuICAgICAgICAgICAgICAgICAgICAuYXNzaWduKGNvZXJjZWQsICgwLCBjb2RlZ2VuXzEuXykgYCske2RhdGF9YCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgY2FzZSBcImJvb2xlYW5cIjpcbiAgICAgICAgICAgICAgICBnZW5cbiAgICAgICAgICAgICAgICAgICAgLmVsc2VJZigoMCwgY29kZWdlbl8xLl8pIGAke2RhdGF9ID09PSBcImZhbHNlXCIgfHwgJHtkYXRhfSA9PT0gMCB8fCAke2RhdGF9ID09PSBudWxsYClcbiAgICAgICAgICAgICAgICAgICAgLmFzc2lnbihjb2VyY2VkLCBmYWxzZSlcbiAgICAgICAgICAgICAgICAgICAgLmVsc2VJZigoMCwgY29kZWdlbl8xLl8pIGAke2RhdGF9ID09PSBcInRydWVcIiB8fCAke2RhdGF9ID09PSAxYClcbiAgICAgICAgICAgICAgICAgICAgLmFzc2lnbihjb2VyY2VkLCB0cnVlKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICBjYXNlIFwibnVsbFwiOlxuICAgICAgICAgICAgICAgIGdlbi5lbHNlSWYoKDAsIGNvZGVnZW5fMS5fKSBgJHtkYXRhfSA9PT0gXCJcIiB8fCAke2RhdGF9ID09PSAwIHx8ICR7ZGF0YX0gPT09IGZhbHNlYCk7XG4gICAgICAgICAgICAgICAgZ2VuLmFzc2lnbihjb2VyY2VkLCBudWxsKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICBjYXNlIFwiYXJyYXlcIjpcbiAgICAgICAgICAgICAgICBnZW5cbiAgICAgICAgICAgICAgICAgICAgLmVsc2VJZigoMCwgY29kZWdlbl8xLl8pIGAke2RhdGFUeXBlfSA9PT0gXCJzdHJpbmdcIiB8fCAke2RhdGFUeXBlfSA9PT0gXCJudW1iZXJcIlxuICAgICAgICAgICAgICB8fCAke2RhdGFUeXBlfSA9PT0gXCJib29sZWFuXCIgfHwgJHtkYXRhfSA9PT0gbnVsbGApXG4gICAgICAgICAgICAgICAgICAgIC5hc3NpZ24oY29lcmNlZCwgKDAsIGNvZGVnZW5fMS5fKSBgWyR7ZGF0YX1dYCk7XG4gICAgICAgIH1cbiAgICB9XG59XG5mdW5jdGlvbiBhc3NpZ25QYXJlbnREYXRhKHsgZ2VuLCBwYXJlbnREYXRhLCBwYXJlbnREYXRhUHJvcGVydHkgfSwgZXhwcikge1xuICAgIC8vIFRPRE8gdXNlIGdlbi5wcm9wZXJ0eVxuICAgIGdlbi5pZigoMCwgY29kZWdlbl8xLl8pIGAke3BhcmVudERhdGF9ICE9PSB1bmRlZmluZWRgLCAoKSA9PiBnZW4uYXNzaWduKCgwLCBjb2RlZ2VuXzEuXykgYCR7cGFyZW50RGF0YX1bJHtwYXJlbnREYXRhUHJvcGVydHl9XWAsIGV4cHIpKTtcbn1cbmZ1bmN0aW9uIGNoZWNrRGF0YVR5cGUoZGF0YVR5cGUsIGRhdGEsIHN0cmljdE51bXMsIGNvcnJlY3QgPSBEYXRhVHlwZS5Db3JyZWN0KSB7XG4gICAgY29uc3QgRVEgPSBjb3JyZWN0ID09PSBEYXRhVHlwZS5Db3JyZWN0ID8gY29kZWdlbl8xLm9wZXJhdG9ycy5FUSA6IGNvZGVnZW5fMS5vcGVyYXRvcnMuTkVRO1xuICAgIGxldCBjb25kO1xuICAgIHN3aXRjaCAoZGF0YVR5cGUpIHtcbiAgICAgICAgY2FzZSBcIm51bGxcIjpcbiAgICAgICAgICAgIHJldHVybiAoMCwgY29kZWdlbl8xLl8pIGAke2RhdGF9ICR7RVF9IG51bGxgO1xuICAgICAgICBjYXNlIFwiYXJyYXlcIjpcbiAgICAgICAgICAgIGNvbmQgPSAoMCwgY29kZWdlbl8xLl8pIGBBcnJheS5pc0FycmF5KCR7ZGF0YX0pYDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwib2JqZWN0XCI6XG4gICAgICAgICAgICBjb25kID0gKDAsIGNvZGVnZW5fMS5fKSBgJHtkYXRhfSAmJiB0eXBlb2YgJHtkYXRhfSA9PSBcIm9iamVjdFwiICYmICFBcnJheS5pc0FycmF5KCR7ZGF0YX0pYDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwiaW50ZWdlclwiOlxuICAgICAgICAgICAgY29uZCA9IG51bUNvbmQoKDAsIGNvZGVnZW5fMS5fKSBgISgke2RhdGF9ICUgMSkgJiYgIWlzTmFOKCR7ZGF0YX0pYCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcIm51bWJlclwiOlxuICAgICAgICAgICAgY29uZCA9IG51bUNvbmQoKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuICgwLCBjb2RlZ2VuXzEuXykgYHR5cGVvZiAke2RhdGF9ICR7RVF9ICR7ZGF0YVR5cGV9YDtcbiAgICB9XG4gICAgcmV0dXJuIGNvcnJlY3QgPT09IERhdGFUeXBlLkNvcnJlY3QgPyBjb25kIDogKDAsIGNvZGVnZW5fMS5ub3QpKGNvbmQpO1xuICAgIGZ1bmN0aW9uIG51bUNvbmQoX2NvbmQgPSBjb2RlZ2VuXzEubmlsKSB7XG4gICAgICAgIHJldHVybiAoMCwgY29kZWdlbl8xLmFuZCkoKDAsIGNvZGVnZW5fMS5fKSBgdHlwZW9mICR7ZGF0YX0gPT0gXCJudW1iZXJcImAsIF9jb25kLCBzdHJpY3ROdW1zID8gKDAsIGNvZGVnZW5fMS5fKSBgaXNGaW5pdGUoJHtkYXRhfSlgIDogY29kZWdlbl8xLm5pbCk7XG4gICAgfVxufVxuZXhwb3J0cy5jaGVja0RhdGFUeXBlID0gY2hlY2tEYXRhVHlwZTtcbmZ1bmN0aW9uIGNoZWNrRGF0YVR5cGVzKGRhdGFUeXBlcywgZGF0YSwgc3RyaWN0TnVtcywgY29ycmVjdCkge1xuICAgIGlmIChkYXRhVHlwZXMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIHJldHVybiBjaGVja0RhdGFUeXBlKGRhdGFUeXBlc1swXSwgZGF0YSwgc3RyaWN0TnVtcywgY29ycmVjdCk7XG4gICAgfVxuICAgIGxldCBjb25kO1xuICAgIGNvbnN0IHR5cGVzID0gKDAsIHV0aWxfMS50b0hhc2gpKGRhdGFUeXBlcyk7XG4gICAgaWYgKHR5cGVzLmFycmF5ICYmIHR5cGVzLm9iamVjdCkge1xuICAgICAgICBjb25zdCBub3RPYmogPSAoMCwgY29kZWdlbl8xLl8pIGB0eXBlb2YgJHtkYXRhfSAhPSBcIm9iamVjdFwiYDtcbiAgICAgICAgY29uZCA9IHR5cGVzLm51bGwgPyBub3RPYmogOiAoMCwgY29kZWdlbl8xLl8pIGAhJHtkYXRhfSB8fCAke25vdE9ian1gO1xuICAgICAgICBkZWxldGUgdHlwZXMubnVsbDtcbiAgICAgICAgZGVsZXRlIHR5cGVzLmFycmF5O1xuICAgICAgICBkZWxldGUgdHlwZXMub2JqZWN0O1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgY29uZCA9IGNvZGVnZW5fMS5uaWw7XG4gICAgfVxuICAgIGlmICh0eXBlcy5udW1iZXIpXG4gICAgICAgIGRlbGV0ZSB0eXBlcy5pbnRlZ2VyO1xuICAgIGZvciAoY29uc3QgdCBpbiB0eXBlcylcbiAgICAgICAgY29uZCA9ICgwLCBjb2RlZ2VuXzEuYW5kKShjb25kLCBjaGVja0RhdGFUeXBlKHQsIGRhdGEsIHN0cmljdE51bXMsIGNvcnJlY3QpKTtcbiAgICByZXR1cm4gY29uZDtcbn1cbmV4cG9ydHMuY2hlY2tEYXRhVHlwZXMgPSBjaGVja0RhdGFUeXBlcztcbmNvbnN0IHR5cGVFcnJvciA9IHtcbiAgICBtZXNzYWdlOiAoeyBzY2hlbWEgfSkgPT4gYG11c3QgYmUgJHtzY2hlbWF9YCxcbiAgICBwYXJhbXM6ICh7IHNjaGVtYSwgc2NoZW1hVmFsdWUgfSkgPT4gdHlwZW9mIHNjaGVtYSA9PSBcInN0cmluZ1wiID8gKDAsIGNvZGVnZW5fMS5fKSBge3R5cGU6ICR7c2NoZW1hfX1gIDogKDAsIGNvZGVnZW5fMS5fKSBge3R5cGU6ICR7c2NoZW1hVmFsdWV9fWAsXG59O1xuZnVuY3Rpb24gcmVwb3J0VHlwZUVycm9yKGl0KSB7XG4gICAgY29uc3QgY3h0ID0gZ2V0VHlwZUVycm9yQ29udGV4dChpdCk7XG4gICAgKDAsIGVycm9yc18xLnJlcG9ydEVycm9yKShjeHQsIHR5cGVFcnJvcik7XG59XG5leHBvcnRzLnJlcG9ydFR5cGVFcnJvciA9IHJlcG9ydFR5cGVFcnJvcjtcbmZ1bmN0aW9uIGdldFR5cGVFcnJvckNvbnRleHQoaXQpIHtcbiAgICBjb25zdCB7IGdlbiwgZGF0YSwgc2NoZW1hIH0gPSBpdDtcbiAgICBjb25zdCBzY2hlbWFDb2RlID0gKDAsIHV0aWxfMS5zY2hlbWFSZWZPclZhbCkoaXQsIHNjaGVtYSwgXCJ0eXBlXCIpO1xuICAgIHJldHVybiB7XG4gICAgICAgIGdlbixcbiAgICAgICAga2V5d29yZDogXCJ0eXBlXCIsXG4gICAgICAgIGRhdGEsXG4gICAgICAgIHNjaGVtYTogc2NoZW1hLnR5cGUsXG4gICAgICAgIHNjaGVtYUNvZGUsXG4gICAgICAgIHNjaGVtYVZhbHVlOiBzY2hlbWFDb2RlLFxuICAgICAgICBwYXJlbnRTY2hlbWE6IHNjaGVtYSxcbiAgICAgICAgcGFyYW1zOiB7fSxcbiAgICAgICAgaXQsXG4gICAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGFUeXBlLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInJlcG9ydFR5cGVFcnJvciIsImNoZWNrRGF0YVR5cGVzIiwiY2hlY2tEYXRhVHlwZSIsImNvZXJjZUFuZENoZWNrRGF0YVR5cGUiLCJnZXRKU09OVHlwZXMiLCJnZXRTY2hlbWFUeXBlcyIsIkRhdGFUeXBlIiwicnVsZXNfMSIsInJlcXVpcmUiLCJhcHBsaWNhYmlsaXR5XzEiLCJlcnJvcnNfMSIsImNvZGVnZW5fMSIsInV0aWxfMSIsInNjaGVtYSIsInR5cGVzIiwidHlwZSIsImhhc051bGwiLCJpbmNsdWRlcyIsIm51bGxhYmxlIiwiRXJyb3IiLCJsZW5ndGgiLCJ1bmRlZmluZWQiLCJwdXNoIiwidHMiLCJBcnJheSIsImlzQXJyYXkiLCJldmVyeSIsImlzSlNPTlR5cGUiLCJqb2luIiwiaXQiLCJnZW4iLCJkYXRhIiwib3B0cyIsImNvZXJjZVRvIiwiY29lcmNlVG9UeXBlcyIsImNvZXJjZVR5cGVzIiwiY2hlY2tUeXBlcyIsInNjaGVtYUhhc1J1bGVzRm9yVHlwZSIsIndyb25nVHlwZSIsInN0cmljdE51bWJlcnMiLCJXcm9uZyIsImlmIiwiY29lcmNlRGF0YSIsIkNPRVJDSUJMRSIsIlNldCIsImZpbHRlciIsInQiLCJoYXMiLCJkYXRhVHlwZSIsImxldCIsIl8iLCJjb2VyY2VkIiwiYXNzaWduIiwiY29lcmNlU3BlY2lmaWNUeXBlIiwiZWxzZSIsImVuZElmIiwiYXNzaWduUGFyZW50RGF0YSIsImVsc2VJZiIsInBhcmVudERhdGEiLCJwYXJlbnREYXRhUHJvcGVydHkiLCJleHByIiwic3RyaWN0TnVtcyIsImNvcnJlY3QiLCJDb3JyZWN0IiwiRVEiLCJvcGVyYXRvcnMiLCJORVEiLCJjb25kIiwibnVtQ29uZCIsIm5vdCIsIl9jb25kIiwibmlsIiwiYW5kIiwiZGF0YVR5cGVzIiwidG9IYXNoIiwiYXJyYXkiLCJvYmplY3QiLCJub3RPYmoiLCJudWxsIiwibnVtYmVyIiwiaW50ZWdlciIsInR5cGVFcnJvciIsIm1lc3NhZ2UiLCJwYXJhbXMiLCJzY2hlbWFWYWx1ZSIsImN4dCIsImdldFR5cGVFcnJvckNvbnRleHQiLCJyZXBvcnRFcnJvciIsInNjaGVtYUNvZGUiLCJzY2hlbWFSZWZPclZhbCIsImtleXdvcmQiLCJwYXJlbnRTY2hlbWEiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/validate/dataType.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/validate/defaults.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/validate/defaults.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.assignDefaults = void 0;\nconst codegen_1 = __webpack_require__(/*! ../codegen */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/codegen/index.js\");\nconst util_1 = __webpack_require__(/*! ../util */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/util.js\");\nfunction assignDefaults(it, ty) {\n    const { properties, items } = it.schema;\n    if (ty === \"object\" && properties) {\n        for(const key in properties){\n            assignDefault(it, key, properties[key].default);\n        }\n    } else if (ty === \"array\" && Array.isArray(items)) {\n        items.forEach((sch, i)=>assignDefault(it, i, sch.default));\n    }\n}\nexports.assignDefaults = assignDefaults;\nfunction assignDefault(it, prop, defaultValue) {\n    const { gen, compositeRule, data, opts } = it;\n    if (defaultValue === undefined) return;\n    const childData = (0, codegen_1._)`${data}${(0, codegen_1.getProperty)(prop)}`;\n    if (compositeRule) {\n        (0, util_1.checkStrictMode)(it, `default is ignored for: ${childData}`);\n        return;\n    }\n    let condition = (0, codegen_1._)`${childData} === undefined`;\n    if (opts.useDefaults === \"empty\") {\n        condition = (0, codegen_1._)`${condition} || ${childData} === null || ${childData} === \"\"`;\n    }\n    // `${childData} === undefined` +\n    // (opts.useDefaults === \"empty\" ? ` || ${childData} === null || ${childData} === \"\"` : \"\")\n    gen.if(condition, (0, codegen_1._)`${childData} = ${(0, codegen_1.stringify)(defaultValue)}`);\n} //# sourceMappingURL=defaults.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG5lYXItanMvYWNjb3VudHMvbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L2NvbXBpbGUvdmFsaWRhdGUvZGVmYXVsdHMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELHNCQUFzQixHQUFHLEtBQUs7QUFDOUIsTUFBTUcsWUFBWUMsbUJBQU9BLENBQUMseUdBQVk7QUFDdEMsTUFBTUMsU0FBU0QsbUJBQU9BLENBQUMsNkZBQVM7QUFDaEMsU0FBU0YsZUFBZUksRUFBRSxFQUFFQyxFQUFFO0lBQzFCLE1BQU0sRUFBRUMsVUFBVSxFQUFFQyxLQUFLLEVBQUUsR0FBR0gsR0FBR0ksTUFBTTtJQUN2QyxJQUFJSCxPQUFPLFlBQVlDLFlBQVk7UUFDL0IsSUFBSyxNQUFNRyxPQUFPSCxXQUFZO1lBQzFCSSxjQUFjTixJQUFJSyxLQUFLSCxVQUFVLENBQUNHLElBQUksQ0FBQ0UsT0FBTztRQUNsRDtJQUNKLE9BQ0ssSUFBSU4sT0FBTyxXQUFXTyxNQUFNQyxPQUFPLENBQUNOLFFBQVE7UUFDN0NBLE1BQU1PLE9BQU8sQ0FBQyxDQUFDQyxLQUFLQyxJQUFNTixjQUFjTixJQUFJWSxHQUFHRCxJQUFJSixPQUFPO0lBQzlEO0FBQ0o7QUFDQWIsc0JBQXNCLEdBQUdFO0FBQ3pCLFNBQVNVLGNBQWNOLEVBQUUsRUFBRWEsSUFBSSxFQUFFQyxZQUFZO0lBQ3pDLE1BQU0sRUFBRUMsR0FBRyxFQUFFQyxhQUFhLEVBQUVDLElBQUksRUFBRUMsSUFBSSxFQUFFLEdBQUdsQjtJQUMzQyxJQUFJYyxpQkFBaUJLLFdBQ2pCO0lBQ0osTUFBTUMsWUFBWSxDQUFDLEdBQUd2QixVQUFVd0IsQ0FBQyxDQUFFLENBQUMsRUFBRUosS0FBSyxFQUFFLENBQUMsR0FBR3BCLFVBQVV5QixXQUFXLEVBQUVULE1BQU0sQ0FBQztJQUMvRSxJQUFJRyxlQUFlO1FBQ2QsSUFBR2pCLE9BQU93QixlQUFlLEVBQUV2QixJQUFJLENBQUMsd0JBQXdCLEVBQUVvQixVQUFVLENBQUM7UUFDdEU7SUFDSjtJQUNBLElBQUlJLFlBQVksQ0FBQyxHQUFHM0IsVUFBVXdCLENBQUMsQ0FBRSxDQUFDLEVBQUVELFVBQVUsY0FBYyxDQUFDO0lBQzdELElBQUlGLEtBQUtPLFdBQVcsS0FBSyxTQUFTO1FBQzlCRCxZQUFZLENBQUMsR0FBRzNCLFVBQVV3QixDQUFDLENBQUUsQ0FBQyxFQUFFRyxVQUFVLElBQUksRUFBRUosVUFBVSxhQUFhLEVBQUVBLFVBQVUsT0FBTyxDQUFDO0lBQy9GO0lBQ0EsaUNBQWlDO0lBQ2pDLDJGQUEyRjtJQUMzRkwsSUFBSVcsRUFBRSxDQUFDRixXQUFXLENBQUMsR0FBRzNCLFVBQVV3QixDQUFDLENBQUUsQ0FBQyxFQUFFRCxVQUFVLEdBQUcsRUFBRSxDQUFDLEdBQUd2QixVQUFVOEIsU0FBUyxFQUFFYixjQUFjLENBQUM7QUFDakcsRUFDQSxvQ0FBb0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pLWFtLW5lYXJieS8uL25vZGVfbW9kdWxlcy9AbmVhci1qcy9hY2NvdW50cy9ub2RlX21vZHVsZXMvYWp2L2Rpc3QvY29tcGlsZS92YWxpZGF0ZS9kZWZhdWx0cy5qcz8yYTQ5Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5hc3NpZ25EZWZhdWx0cyA9IHZvaWQgMDtcbmNvbnN0IGNvZGVnZW5fMSA9IHJlcXVpcmUoXCIuLi9jb2RlZ2VuXCIpO1xuY29uc3QgdXRpbF8xID0gcmVxdWlyZShcIi4uL3V0aWxcIik7XG5mdW5jdGlvbiBhc3NpZ25EZWZhdWx0cyhpdCwgdHkpIHtcbiAgICBjb25zdCB7IHByb3BlcnRpZXMsIGl0ZW1zIH0gPSBpdC5zY2hlbWE7XG4gICAgaWYgKHR5ID09PSBcIm9iamVjdFwiICYmIHByb3BlcnRpZXMpIHtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gcHJvcGVydGllcykge1xuICAgICAgICAgICAgYXNzaWduRGVmYXVsdChpdCwga2V5LCBwcm9wZXJ0aWVzW2tleV0uZGVmYXVsdCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAodHkgPT09IFwiYXJyYXlcIiAmJiBBcnJheS5pc0FycmF5KGl0ZW1zKSkge1xuICAgICAgICBpdGVtcy5mb3JFYWNoKChzY2gsIGkpID0+IGFzc2lnbkRlZmF1bHQoaXQsIGksIHNjaC5kZWZhdWx0KSk7XG4gICAgfVxufVxuZXhwb3J0cy5hc3NpZ25EZWZhdWx0cyA9IGFzc2lnbkRlZmF1bHRzO1xuZnVuY3Rpb24gYXNzaWduRGVmYXVsdChpdCwgcHJvcCwgZGVmYXVsdFZhbHVlKSB7XG4gICAgY29uc3QgeyBnZW4sIGNvbXBvc2l0ZVJ1bGUsIGRhdGEsIG9wdHMgfSA9IGl0O1xuICAgIGlmIChkZWZhdWx0VmFsdWUgPT09IHVuZGVmaW5lZClcbiAgICAgICAgcmV0dXJuO1xuICAgIGNvbnN0IGNoaWxkRGF0YSA9ICgwLCBjb2RlZ2VuXzEuXykgYCR7ZGF0YX0keygwLCBjb2RlZ2VuXzEuZ2V0UHJvcGVydHkpKHByb3ApfWA7XG4gICAgaWYgKGNvbXBvc2l0ZVJ1bGUpIHtcbiAgICAgICAgKDAsIHV0aWxfMS5jaGVja1N0cmljdE1vZGUpKGl0LCBgZGVmYXVsdCBpcyBpZ25vcmVkIGZvcjogJHtjaGlsZERhdGF9YCk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgbGV0IGNvbmRpdGlvbiA9ICgwLCBjb2RlZ2VuXzEuXykgYCR7Y2hpbGREYXRhfSA9PT0gdW5kZWZpbmVkYDtcbiAgICBpZiAob3B0cy51c2VEZWZhdWx0cyA9PT0gXCJlbXB0eVwiKSB7XG4gICAgICAgIGNvbmRpdGlvbiA9ICgwLCBjb2RlZ2VuXzEuXykgYCR7Y29uZGl0aW9ufSB8fCAke2NoaWxkRGF0YX0gPT09IG51bGwgfHwgJHtjaGlsZERhdGF9ID09PSBcIlwiYDtcbiAgICB9XG4gICAgLy8gYCR7Y2hpbGREYXRhfSA9PT0gdW5kZWZpbmVkYCArXG4gICAgLy8gKG9wdHMudXNlRGVmYXVsdHMgPT09IFwiZW1wdHlcIiA/IGAgfHwgJHtjaGlsZERhdGF9ID09PSBudWxsIHx8ICR7Y2hpbGREYXRhfSA9PT0gXCJcImAgOiBcIlwiKVxuICAgIGdlbi5pZihjb25kaXRpb24sICgwLCBjb2RlZ2VuXzEuXykgYCR7Y2hpbGREYXRhfSA9ICR7KDAsIGNvZGVnZW5fMS5zdHJpbmdpZnkpKGRlZmF1bHRWYWx1ZSl9YCk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kZWZhdWx0cy5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJhc3NpZ25EZWZhdWx0cyIsImNvZGVnZW5fMSIsInJlcXVpcmUiLCJ1dGlsXzEiLCJpdCIsInR5IiwicHJvcGVydGllcyIsIml0ZW1zIiwic2NoZW1hIiwia2V5IiwiYXNzaWduRGVmYXVsdCIsImRlZmF1bHQiLCJBcnJheSIsImlzQXJyYXkiLCJmb3JFYWNoIiwic2NoIiwiaSIsInByb3AiLCJkZWZhdWx0VmFsdWUiLCJnZW4iLCJjb21wb3NpdGVSdWxlIiwiZGF0YSIsIm9wdHMiLCJ1bmRlZmluZWQiLCJjaGlsZERhdGEiLCJfIiwiZ2V0UHJvcGVydHkiLCJjaGVja1N0cmljdE1vZGUiLCJjb25kaXRpb24iLCJ1c2VEZWZhdWx0cyIsImlmIiwic3RyaW5naWZ5Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/validate/defaults.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/validate/index.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/validate/index.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.getData = exports.KeywordCxt = exports.validateFunctionCode = void 0;\nconst boolSchema_1 = __webpack_require__(/*! ./boolSchema */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/validate/boolSchema.js\");\nconst dataType_1 = __webpack_require__(/*! ./dataType */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/validate/dataType.js\");\nconst applicability_1 = __webpack_require__(/*! ./applicability */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/validate/applicability.js\");\nconst dataType_2 = __webpack_require__(/*! ./dataType */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/validate/dataType.js\");\nconst defaults_1 = __webpack_require__(/*! ./defaults */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/validate/defaults.js\");\nconst keyword_1 = __webpack_require__(/*! ./keyword */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/validate/keyword.js\");\nconst subschema_1 = __webpack_require__(/*! ./subschema */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/validate/subschema.js\");\nconst codegen_1 = __webpack_require__(/*! ../codegen */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/codegen/index.js\");\nconst names_1 = __webpack_require__(/*! ../names */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/names.js\");\nconst resolve_1 = __webpack_require__(/*! ../resolve */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/resolve.js\");\nconst util_1 = __webpack_require__(/*! ../util */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/util.js\");\nconst errors_1 = __webpack_require__(/*! ../errors */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/errors.js\");\n// schema compilation - generates validation function, subschemaCode (below) is used for subschemas\nfunction validateFunctionCode(it) {\n    if (isSchemaObj(it)) {\n        checkKeywords(it);\n        if (schemaCxtHasRules(it)) {\n            topSchemaObjCode(it);\n            return;\n        }\n    }\n    validateFunction(it, ()=>(0, boolSchema_1.topBoolOrEmptySchema)(it));\n}\nexports.validateFunctionCode = validateFunctionCode;\nfunction validateFunction({ gen, validateName, schema, schemaEnv, opts }, body) {\n    if (opts.code.es5) {\n        gen.func(validateName, (0, codegen_1._)`${names_1.default.data}, ${names_1.default.valCxt}`, schemaEnv.$async, ()=>{\n            gen.code((0, codegen_1._)`\"use strict\"; ${funcSourceUrl(schema, opts)}`);\n            destructureValCxtES5(gen, opts);\n            gen.code(body);\n        });\n    } else {\n        gen.func(validateName, (0, codegen_1._)`${names_1.default.data}, ${destructureValCxt(opts)}`, schemaEnv.$async, ()=>gen.code(funcSourceUrl(schema, opts)).code(body));\n    }\n}\nfunction destructureValCxt(opts) {\n    return (0, codegen_1._)`{${names_1.default.instancePath}=\"\", ${names_1.default.parentData}, ${names_1.default.parentDataProperty}, ${names_1.default.rootData}=${names_1.default.data}${opts.dynamicRef ? (0, codegen_1._)`, ${names_1.default.dynamicAnchors}={}` : codegen_1.nil}}={}`;\n}\nfunction destructureValCxtES5(gen, opts) {\n    gen.if(names_1.default.valCxt, ()=>{\n        gen.var(names_1.default.instancePath, (0, codegen_1._)`${names_1.default.valCxt}.${names_1.default.instancePath}`);\n        gen.var(names_1.default.parentData, (0, codegen_1._)`${names_1.default.valCxt}.${names_1.default.parentData}`);\n        gen.var(names_1.default.parentDataProperty, (0, codegen_1._)`${names_1.default.valCxt}.${names_1.default.parentDataProperty}`);\n        gen.var(names_1.default.rootData, (0, codegen_1._)`${names_1.default.valCxt}.${names_1.default.rootData}`);\n        if (opts.dynamicRef) gen.var(names_1.default.dynamicAnchors, (0, codegen_1._)`${names_1.default.valCxt}.${names_1.default.dynamicAnchors}`);\n    }, ()=>{\n        gen.var(names_1.default.instancePath, (0, codegen_1._)`\"\"`);\n        gen.var(names_1.default.parentData, (0, codegen_1._)`undefined`);\n        gen.var(names_1.default.parentDataProperty, (0, codegen_1._)`undefined`);\n        gen.var(names_1.default.rootData, names_1.default.data);\n        if (opts.dynamicRef) gen.var(names_1.default.dynamicAnchors, (0, codegen_1._)`{}`);\n    });\n}\nfunction topSchemaObjCode(it) {\n    const { schema, opts, gen } = it;\n    validateFunction(it, ()=>{\n        if (opts.$comment && schema.$comment) commentKeyword(it);\n        checkNoDefault(it);\n        gen.let(names_1.default.vErrors, null);\n        gen.let(names_1.default.errors, 0);\n        if (opts.unevaluated) resetEvaluated(it);\n        typeAndKeywords(it);\n        returnResults(it);\n    });\n    return;\n}\nfunction resetEvaluated(it) {\n    // TODO maybe some hook to execute it in the end to check whether props/items are Name, as in assignEvaluated\n    const { gen, validateName } = it;\n    it.evaluated = gen.const(\"evaluated\", (0, codegen_1._)`${validateName}.evaluated`);\n    gen.if((0, codegen_1._)`${it.evaluated}.dynamicProps`, ()=>gen.assign((0, codegen_1._)`${it.evaluated}.props`, (0, codegen_1._)`undefined`));\n    gen.if((0, codegen_1._)`${it.evaluated}.dynamicItems`, ()=>gen.assign((0, codegen_1._)`${it.evaluated}.items`, (0, codegen_1._)`undefined`));\n}\nfunction funcSourceUrl(schema, opts) {\n    const schId = typeof schema == \"object\" && schema[opts.schemaId];\n    return schId && (opts.code.source || opts.code.process) ? (0, codegen_1._)`/*# sourceURL=${schId} */` : codegen_1.nil;\n}\n// schema compilation - this function is used recursively to generate code for sub-schemas\nfunction subschemaCode(it, valid) {\n    if (isSchemaObj(it)) {\n        checkKeywords(it);\n        if (schemaCxtHasRules(it)) {\n            subSchemaObjCode(it, valid);\n            return;\n        }\n    }\n    (0, boolSchema_1.boolOrEmptySchema)(it, valid);\n}\nfunction schemaCxtHasRules({ schema, self }) {\n    if (typeof schema == \"boolean\") return !schema;\n    for(const key in schema)if (self.RULES.all[key]) return true;\n    return false;\n}\nfunction isSchemaObj(it) {\n    return typeof it.schema != \"boolean\";\n}\nfunction subSchemaObjCode(it, valid) {\n    const { schema, gen, opts } = it;\n    if (opts.$comment && schema.$comment) commentKeyword(it);\n    updateContext(it);\n    checkAsyncSchema(it);\n    const errsCount = gen.const(\"_errs\", names_1.default.errors);\n    typeAndKeywords(it, errsCount);\n    // TODO var\n    gen.var(valid, (0, codegen_1._)`${errsCount} === ${names_1.default.errors}`);\n}\nfunction checkKeywords(it) {\n    (0, util_1.checkUnknownRules)(it);\n    checkRefsAndKeywords(it);\n}\nfunction typeAndKeywords(it, errsCount) {\n    if (it.opts.jtd) return schemaKeywords(it, [], false, errsCount);\n    const types = (0, dataType_1.getSchemaTypes)(it.schema);\n    const checkedTypes = (0, dataType_1.coerceAndCheckDataType)(it, types);\n    schemaKeywords(it, types, !checkedTypes, errsCount);\n}\nfunction checkRefsAndKeywords(it) {\n    const { schema, errSchemaPath, opts, self } = it;\n    if (schema.$ref && opts.ignoreKeywordsWithRef && (0, util_1.schemaHasRulesButRef)(schema, self.RULES)) {\n        self.logger.warn(`$ref: keywords ignored in schema at path \"${errSchemaPath}\"`);\n    }\n}\nfunction checkNoDefault(it) {\n    const { schema, opts } = it;\n    if (schema.default !== undefined && opts.useDefaults && opts.strictSchema) {\n        (0, util_1.checkStrictMode)(it, \"default is ignored in the schema root\");\n    }\n}\nfunction updateContext(it) {\n    const schId = it.schema[it.opts.schemaId];\n    if (schId) it.baseId = (0, resolve_1.resolveUrl)(it.opts.uriResolver, it.baseId, schId);\n}\nfunction checkAsyncSchema(it) {\n    if (it.schema.$async && !it.schemaEnv.$async) throw new Error(\"async schema in sync schema\");\n}\nfunction commentKeyword({ gen, schemaEnv, schema, errSchemaPath, opts }) {\n    const msg = schema.$comment;\n    if (opts.$comment === true) {\n        gen.code((0, codegen_1._)`${names_1.default.self}.logger.log(${msg})`);\n    } else if (typeof opts.$comment == \"function\") {\n        const schemaPath = (0, codegen_1.str)`${errSchemaPath}/$comment`;\n        const rootName = gen.scopeValue(\"root\", {\n            ref: schemaEnv.root\n        });\n        gen.code((0, codegen_1._)`${names_1.default.self}.opts.$comment(${msg}, ${schemaPath}, ${rootName}.schema)`);\n    }\n}\nfunction returnResults(it) {\n    const { gen, schemaEnv, validateName, ValidationError, opts } = it;\n    if (schemaEnv.$async) {\n        // TODO assign unevaluated\n        gen.if((0, codegen_1._)`${names_1.default.errors} === 0`, ()=>gen.return(names_1.default.data), ()=>gen.throw((0, codegen_1._)`new ${ValidationError}(${names_1.default.vErrors})`));\n    } else {\n        gen.assign((0, codegen_1._)`${validateName}.errors`, names_1.default.vErrors);\n        if (opts.unevaluated) assignEvaluated(it);\n        gen.return((0, codegen_1._)`${names_1.default.errors} === 0`);\n    }\n}\nfunction assignEvaluated({ gen, evaluated, props, items }) {\n    if (props instanceof codegen_1.Name) gen.assign((0, codegen_1._)`${evaluated}.props`, props);\n    if (items instanceof codegen_1.Name) gen.assign((0, codegen_1._)`${evaluated}.items`, items);\n}\nfunction schemaKeywords(it, types, typeErrors, errsCount) {\n    const { gen, schema, data, allErrors, opts, self } = it;\n    const { RULES } = self;\n    if (schema.$ref && (opts.ignoreKeywordsWithRef || !(0, util_1.schemaHasRulesButRef)(schema, RULES))) {\n        gen.block(()=>keywordCode(it, \"$ref\", RULES.all.$ref.definition)); // TODO typecast\n        return;\n    }\n    if (!opts.jtd) checkStrictTypes(it, types);\n    gen.block(()=>{\n        for (const group of RULES.rules)groupKeywords(group);\n        groupKeywords(RULES.post);\n    });\n    function groupKeywords(group) {\n        if (!(0, applicability_1.shouldUseGroup)(schema, group)) return;\n        if (group.type) {\n            gen.if((0, dataType_2.checkDataType)(group.type, data, opts.strictNumbers));\n            iterateKeywords(it, group);\n            if (types.length === 1 && types[0] === group.type && typeErrors) {\n                gen.else();\n                (0, dataType_2.reportTypeError)(it);\n            }\n            gen.endIf();\n        } else {\n            iterateKeywords(it, group);\n        }\n        // TODO make it \"ok\" call?\n        if (!allErrors) gen.if((0, codegen_1._)`${names_1.default.errors} === ${errsCount || 0}`);\n    }\n}\nfunction iterateKeywords(it, group) {\n    const { gen, schema, opts: { useDefaults } } = it;\n    if (useDefaults) (0, defaults_1.assignDefaults)(it, group.type);\n    gen.block(()=>{\n        for (const rule of group.rules){\n            if ((0, applicability_1.shouldUseRule)(schema, rule)) {\n                keywordCode(it, rule.keyword, rule.definition, group.type);\n            }\n        }\n    });\n}\nfunction checkStrictTypes(it, types) {\n    if (it.schemaEnv.meta || !it.opts.strictTypes) return;\n    checkContextTypes(it, types);\n    if (!it.opts.allowUnionTypes) checkMultipleTypes(it, types);\n    checkKeywordTypes(it, it.dataTypes);\n}\nfunction checkContextTypes(it, types) {\n    if (!types.length) return;\n    if (!it.dataTypes.length) {\n        it.dataTypes = types;\n        return;\n    }\n    types.forEach((t)=>{\n        if (!includesType(it.dataTypes, t)) {\n            strictTypesError(it, `type \"${t}\" not allowed by context \"${it.dataTypes.join(\",\")}\"`);\n        }\n    });\n    narrowSchemaTypes(it, types);\n}\nfunction checkMultipleTypes(it, ts) {\n    if (ts.length > 1 && !(ts.length === 2 && ts.includes(\"null\"))) {\n        strictTypesError(it, \"use allowUnionTypes to allow union type keyword\");\n    }\n}\nfunction checkKeywordTypes(it, ts) {\n    const rules = it.self.RULES.all;\n    for(const keyword in rules){\n        const rule = rules[keyword];\n        if (typeof rule == \"object\" && (0, applicability_1.shouldUseRule)(it.schema, rule)) {\n            const { type } = rule.definition;\n            if (type.length && !type.some((t)=>hasApplicableType(ts, t))) {\n                strictTypesError(it, `missing type \"${type.join(\",\")}\" for keyword \"${keyword}\"`);\n            }\n        }\n    }\n}\nfunction hasApplicableType(schTs, kwdT) {\n    return schTs.includes(kwdT) || kwdT === \"number\" && schTs.includes(\"integer\");\n}\nfunction includesType(ts, t) {\n    return ts.includes(t) || t === \"integer\" && ts.includes(\"number\");\n}\nfunction narrowSchemaTypes(it, withTypes) {\n    const ts = [];\n    for (const t of it.dataTypes){\n        if (includesType(withTypes, t)) ts.push(t);\n        else if (withTypes.includes(\"integer\") && t === \"number\") ts.push(\"integer\");\n    }\n    it.dataTypes = ts;\n}\nfunction strictTypesError(it, msg) {\n    const schemaPath = it.schemaEnv.baseId + it.errSchemaPath;\n    msg += ` at \"${schemaPath}\" (strictTypes)`;\n    (0, util_1.checkStrictMode)(it, msg, it.opts.strictTypes);\n}\nclass KeywordCxt {\n    constructor(it, def, keyword){\n        (0, keyword_1.validateKeywordUsage)(it, def, keyword);\n        this.gen = it.gen;\n        this.allErrors = it.allErrors;\n        this.keyword = keyword;\n        this.data = it.data;\n        this.schema = it.schema[keyword];\n        this.$data = def.$data && it.opts.$data && this.schema && this.schema.$data;\n        this.schemaValue = (0, util_1.schemaRefOrVal)(it, this.schema, keyword, this.$data);\n        this.schemaType = def.schemaType;\n        this.parentSchema = it.schema;\n        this.params = {};\n        this.it = it;\n        this.def = def;\n        if (this.$data) {\n            this.schemaCode = it.gen.const(\"vSchema\", getData(this.$data, it));\n        } else {\n            this.schemaCode = this.schemaValue;\n            if (!(0, keyword_1.validSchemaType)(this.schema, def.schemaType, def.allowUndefined)) {\n                throw new Error(`${keyword} value must be ${JSON.stringify(def.schemaType)}`);\n            }\n        }\n        if (\"code\" in def ? def.trackErrors : def.errors !== false) {\n            this.errsCount = it.gen.const(\"_errs\", names_1.default.errors);\n        }\n    }\n    result(condition, successAction, failAction) {\n        this.failResult((0, codegen_1.not)(condition), successAction, failAction);\n    }\n    failResult(condition, successAction, failAction) {\n        this.gen.if(condition);\n        if (failAction) failAction();\n        else this.error();\n        if (successAction) {\n            this.gen.else();\n            successAction();\n            if (this.allErrors) this.gen.endIf();\n        } else {\n            if (this.allErrors) this.gen.endIf();\n            else this.gen.else();\n        }\n    }\n    pass(condition, failAction) {\n        this.failResult((0, codegen_1.not)(condition), undefined, failAction);\n    }\n    fail(condition) {\n        if (condition === undefined) {\n            this.error();\n            if (!this.allErrors) this.gen.if(false); // this branch will be removed by gen.optimize\n            return;\n        }\n        this.gen.if(condition);\n        this.error();\n        if (this.allErrors) this.gen.endIf();\n        else this.gen.else();\n    }\n    fail$data(condition) {\n        if (!this.$data) return this.fail(condition);\n        const { schemaCode } = this;\n        this.fail((0, codegen_1._)`${schemaCode} !== undefined && (${(0, codegen_1.or)(this.invalid$data(), condition)})`);\n    }\n    error(append, errorParams, errorPaths) {\n        if (errorParams) {\n            this.setParams(errorParams);\n            this._error(append, errorPaths);\n            this.setParams({});\n            return;\n        }\n        this._error(append, errorPaths);\n    }\n    _error(append, errorPaths) {\n        ;\n        (append ? errors_1.reportExtraError : errors_1.reportError)(this, this.def.error, errorPaths);\n    }\n    $dataError() {\n        (0, errors_1.reportError)(this, this.def.$dataError || errors_1.keyword$DataError);\n    }\n    reset() {\n        if (this.errsCount === undefined) throw new Error('add \"trackErrors\" to keyword definition');\n        (0, errors_1.resetErrorsCount)(this.gen, this.errsCount);\n    }\n    ok(cond) {\n        if (!this.allErrors) this.gen.if(cond);\n    }\n    setParams(obj, assign) {\n        if (assign) Object.assign(this.params, obj);\n        else this.params = obj;\n    }\n    block$data(valid, codeBlock, $dataValid = codegen_1.nil) {\n        this.gen.block(()=>{\n            this.check$data(valid, $dataValid);\n            codeBlock();\n        });\n    }\n    check$data(valid = codegen_1.nil, $dataValid = codegen_1.nil) {\n        if (!this.$data) return;\n        const { gen, schemaCode, schemaType, def } = this;\n        gen.if((0, codegen_1.or)((0, codegen_1._)`${schemaCode} === undefined`, $dataValid));\n        if (valid !== codegen_1.nil) gen.assign(valid, true);\n        if (schemaType.length || def.validateSchema) {\n            gen.elseIf(this.invalid$data());\n            this.$dataError();\n            if (valid !== codegen_1.nil) gen.assign(valid, false);\n        }\n        gen.else();\n    }\n    invalid$data() {\n        const { gen, schemaCode, schemaType, def, it } = this;\n        return (0, codegen_1.or)(wrong$DataType(), invalid$DataSchema());\n        function wrong$DataType() {\n            if (schemaType.length) {\n                /* istanbul ignore if */ if (!(schemaCode instanceof codegen_1.Name)) throw new Error(\"ajv implementation error\");\n                const st = Array.isArray(schemaType) ? schemaType : [\n                    schemaType\n                ];\n                return (0, codegen_1._)`${(0, dataType_2.checkDataTypes)(st, schemaCode, it.opts.strictNumbers, dataType_2.DataType.Wrong)}`;\n            }\n            return codegen_1.nil;\n        }\n        function invalid$DataSchema() {\n            if (def.validateSchema) {\n                const validateSchemaRef = gen.scopeValue(\"validate$data\", {\n                    ref: def.validateSchema\n                }); // TODO value.code for standalone\n                return (0, codegen_1._)`!${validateSchemaRef}(${schemaCode})`;\n            }\n            return codegen_1.nil;\n        }\n    }\n    subschema(appl, valid) {\n        const subschema = (0, subschema_1.getSubschema)(this.it, appl);\n        (0, subschema_1.extendSubschemaData)(subschema, this.it, appl);\n        (0, subschema_1.extendSubschemaMode)(subschema, appl);\n        const nextContext = {\n            ...this.it,\n            ...subschema,\n            items: undefined,\n            props: undefined\n        };\n        subschemaCode(nextContext, valid);\n        return nextContext;\n    }\n    mergeEvaluated(schemaCxt, toName) {\n        const { it, gen } = this;\n        if (!it.opts.unevaluated) return;\n        if (it.props !== true && schemaCxt.props !== undefined) {\n            it.props = util_1.mergeEvaluated.props(gen, schemaCxt.props, it.props, toName);\n        }\n        if (it.items !== true && schemaCxt.items !== undefined) {\n            it.items = util_1.mergeEvaluated.items(gen, schemaCxt.items, it.items, toName);\n        }\n    }\n    mergeValidEvaluated(schemaCxt, valid) {\n        const { it, gen } = this;\n        if (it.opts.unevaluated && (it.props !== true || it.items !== true)) {\n            gen.if(valid, ()=>this.mergeEvaluated(schemaCxt, codegen_1.Name));\n            return true;\n        }\n    }\n}\nexports.KeywordCxt = KeywordCxt;\nfunction keywordCode(it, keyword, def, ruleType) {\n    const cxt = new KeywordCxt(it, def, keyword);\n    if (\"code\" in def) {\n        def.code(cxt, ruleType);\n    } else if (cxt.$data && def.validate) {\n        (0, keyword_1.funcKeywordCode)(cxt, def);\n    } else if (\"macro\" in def) {\n        (0, keyword_1.macroKeywordCode)(cxt, def);\n    } else if (def.compile || def.validate) {\n        (0, keyword_1.funcKeywordCode)(cxt, def);\n    }\n}\nconst JSON_POINTER = /^\\/(?:[^~]|~0|~1)*$/;\nconst RELATIVE_JSON_POINTER = /^([0-9]+)(#|\\/(?:[^~]|~0|~1)*)?$/;\nfunction getData($data, { dataLevel, dataNames, dataPathArr }) {\n    let jsonPointer;\n    let data;\n    if ($data === \"\") return names_1.default.rootData;\n    if ($data[0] === \"/\") {\n        if (!JSON_POINTER.test($data)) throw new Error(`Invalid JSON-pointer: ${$data}`);\n        jsonPointer = $data;\n        data = names_1.default.rootData;\n    } else {\n        const matches = RELATIVE_JSON_POINTER.exec($data);\n        if (!matches) throw new Error(`Invalid JSON-pointer: ${$data}`);\n        const up = +matches[1];\n        jsonPointer = matches[2];\n        if (jsonPointer === \"#\") {\n            if (up >= dataLevel) throw new Error(errorMsg(\"property/index\", up));\n            return dataPathArr[dataLevel - up];\n        }\n        if (up > dataLevel) throw new Error(errorMsg(\"data\", up));\n        data = dataNames[dataLevel - up];\n        if (!jsonPointer) return data;\n    }\n    let expr = data;\n    const segments = jsonPointer.split(\"/\");\n    for (const segment of segments){\n        if (segment) {\n            data = (0, codegen_1._)`${data}${(0, codegen_1.getProperty)((0, util_1.unescapeJsonPointer)(segment))}`;\n            expr = (0, codegen_1._)`${expr} && ${data}`;\n        }\n    }\n    return expr;\n    function errorMsg(pointerType, up) {\n        return `Cannot access ${pointerType} ${up} levels up, current level is ${dataLevel}`;\n    }\n}\nexports.getData = getData; //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/validate/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/validate/keyword.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/validate/keyword.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.validateKeywordUsage = exports.validSchemaType = exports.funcKeywordCode = exports.macroKeywordCode = void 0;\nconst codegen_1 = __webpack_require__(/*! ../codegen */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/codegen/index.js\");\nconst names_1 = __webpack_require__(/*! ../names */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/names.js\");\nconst code_1 = __webpack_require__(/*! ../../vocabularies/code */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/code.js\");\nconst errors_1 = __webpack_require__(/*! ../errors */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/errors.js\");\nfunction macroKeywordCode(cxt, def) {\n    const { gen, keyword, schema, parentSchema, it } = cxt;\n    const macroSchema = def.macro.call(it.self, schema, parentSchema, it);\n    const schemaRef = useKeyword(gen, keyword, macroSchema);\n    if (it.opts.validateSchema !== false) it.self.validateSchema(macroSchema, true);\n    const valid = gen.name(\"valid\");\n    cxt.subschema({\n        schema: macroSchema,\n        schemaPath: codegen_1.nil,\n        errSchemaPath: `${it.errSchemaPath}/${keyword}`,\n        topSchemaRef: schemaRef,\n        compositeRule: true\n    }, valid);\n    cxt.pass(valid, ()=>cxt.error(true));\n}\nexports.macroKeywordCode = macroKeywordCode;\nfunction funcKeywordCode(cxt, def) {\n    var _a;\n    const { gen, keyword, schema, parentSchema, $data, it } = cxt;\n    checkAsyncKeyword(it, def);\n    const validate = !$data && def.compile ? def.compile.call(it.self, schema, parentSchema, it) : def.validate;\n    const validateRef = useKeyword(gen, keyword, validate);\n    const valid = gen.let(\"valid\");\n    cxt.block$data(valid, validateKeyword);\n    cxt.ok((_a = def.valid) !== null && _a !== void 0 ? _a : valid);\n    function validateKeyword() {\n        if (def.errors === false) {\n            assignValid();\n            if (def.modifying) modifyData(cxt);\n            reportErrs(()=>cxt.error());\n        } else {\n            const ruleErrs = def.async ? validateAsync() : validateSync();\n            if (def.modifying) modifyData(cxt);\n            reportErrs(()=>addErrs(cxt, ruleErrs));\n        }\n    }\n    function validateAsync() {\n        const ruleErrs = gen.let(\"ruleErrs\", null);\n        gen.try(()=>assignValid((0, codegen_1._)`await `), (e)=>gen.assign(valid, false).if((0, codegen_1._)`${e} instanceof ${it.ValidationError}`, ()=>gen.assign(ruleErrs, (0, codegen_1._)`${e}.errors`), ()=>gen.throw(e)));\n        return ruleErrs;\n    }\n    function validateSync() {\n        const validateErrs = (0, codegen_1._)`${validateRef}.errors`;\n        gen.assign(validateErrs, null);\n        assignValid(codegen_1.nil);\n        return validateErrs;\n    }\n    function assignValid(_await = def.async ? (0, codegen_1._)`await ` : codegen_1.nil) {\n        const passCxt = it.opts.passContext ? names_1.default.this : names_1.default.self;\n        const passSchema = !(\"compile\" in def && !$data || def.schema === false);\n        gen.assign(valid, (0, codegen_1._)`${_await}${(0, code_1.callValidateCode)(cxt, validateRef, passCxt, passSchema)}`, def.modifying);\n    }\n    function reportErrs(errors) {\n        var _a;\n        gen.if((0, codegen_1.not)((_a = def.valid) !== null && _a !== void 0 ? _a : valid), errors);\n    }\n}\nexports.funcKeywordCode = funcKeywordCode;\nfunction modifyData(cxt) {\n    const { gen, data, it } = cxt;\n    gen.if(it.parentData, ()=>gen.assign(data, (0, codegen_1._)`${it.parentData}[${it.parentDataProperty}]`));\n}\nfunction addErrs(cxt, errs) {\n    const { gen } = cxt;\n    gen.if((0, codegen_1._)`Array.isArray(${errs})`, ()=>{\n        gen.assign(names_1.default.vErrors, (0, codegen_1._)`${names_1.default.vErrors} === null ? ${errs} : ${names_1.default.vErrors}.concat(${errs})`).assign(names_1.default.errors, (0, codegen_1._)`${names_1.default.vErrors}.length`);\n        (0, errors_1.extendErrors)(cxt);\n    }, ()=>cxt.error());\n}\nfunction checkAsyncKeyword({ schemaEnv }, def) {\n    if (def.async && !schemaEnv.$async) throw new Error(\"async keyword in sync schema\");\n}\nfunction useKeyword(gen, keyword, result) {\n    if (result === undefined) throw new Error(`keyword \"${keyword}\" failed to compile`);\n    return gen.scopeValue(\"keyword\", typeof result == \"function\" ? {\n        ref: result\n    } : {\n        ref: result,\n        code: (0, codegen_1.stringify)(result)\n    });\n}\nfunction validSchemaType(schema, schemaType, allowUndefined = false) {\n    // TODO add tests\n    return !schemaType.length || schemaType.some((st)=>st === \"array\" ? Array.isArray(schema) : st === \"object\" ? schema && typeof schema == \"object\" && !Array.isArray(schema) : typeof schema == st || allowUndefined && typeof schema == \"undefined\");\n}\nexports.validSchemaType = validSchemaType;\nfunction validateKeywordUsage({ schema, opts, self, errSchemaPath }, def, keyword) {\n    /* istanbul ignore if */ if (Array.isArray(def.keyword) ? !def.keyword.includes(keyword) : def.keyword !== keyword) {\n        throw new Error(\"ajv implementation error\");\n    }\n    const deps = def.dependencies;\n    if (deps === null || deps === void 0 ? void 0 : deps.some((kwd)=>!Object.prototype.hasOwnProperty.call(schema, kwd))) {\n        throw new Error(`parent schema must have dependencies of ${keyword}: ${deps.join(\",\")}`);\n    }\n    if (def.validateSchema) {\n        const valid = def.validateSchema(schema[keyword]);\n        if (!valid) {\n            const msg = `keyword \"${keyword}\" value is invalid at path \"${errSchemaPath}\": ` + self.errorsText(def.validateSchema.errors);\n            if (opts.validateSchema === \"log\") self.logger.error(msg);\n            else throw new Error(msg);\n        }\n    }\n}\nexports.validateKeywordUsage = validateKeywordUsage; //# sourceMappingURL=keyword.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG5lYXItanMvYWNjb3VudHMvbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L2NvbXBpbGUvdmFsaWRhdGUva2V5d29yZC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsNEJBQTRCLEdBQUdBLHVCQUF1QixHQUFHQSx1QkFBdUIsR0FBR0Esd0JBQXdCLEdBQUcsS0FBSztBQUNuSCxNQUFNTSxZQUFZQyxtQkFBT0EsQ0FBQyx5R0FBWTtBQUN0QyxNQUFNQyxVQUFVRCxtQkFBT0EsQ0FBQywrRkFBVTtBQUNsQyxNQUFNRSxTQUFTRixtQkFBT0EsQ0FBQyxrSEFBeUI7QUFDaEQsTUFBTUcsV0FBV0gsbUJBQU9BLENBQUMsaUdBQVc7QUFDcEMsU0FBU0YsaUJBQWlCTSxHQUFHLEVBQUVDLEdBQUc7SUFDOUIsTUFBTSxFQUFFQyxHQUFHLEVBQUVDLE9BQU8sRUFBRUMsTUFBTSxFQUFFQyxZQUFZLEVBQUVDLEVBQUUsRUFBRSxHQUFHTjtJQUNuRCxNQUFNTyxjQUFjTixJQUFJTyxLQUFLLENBQUNDLElBQUksQ0FBQ0gsR0FBR0ksSUFBSSxFQUFFTixRQUFRQyxjQUFjQztJQUNsRSxNQUFNSyxZQUFZQyxXQUFXVixLQUFLQyxTQUFTSTtJQUMzQyxJQUFJRCxHQUFHTyxJQUFJLENBQUNDLGNBQWMsS0FBSyxPQUMzQlIsR0FBR0ksSUFBSSxDQUFDSSxjQUFjLENBQUNQLGFBQWE7SUFDeEMsTUFBTVEsUUFBUWIsSUFBSWMsSUFBSSxDQUFDO0lBQ3ZCaEIsSUFBSWlCLFNBQVMsQ0FBQztRQUNWYixRQUFRRztRQUNSVyxZQUFZdkIsVUFBVXdCLEdBQUc7UUFDekJDLGVBQWUsQ0FBQyxFQUFFZCxHQUFHYyxhQUFhLENBQUMsQ0FBQyxFQUFFakIsUUFBUSxDQUFDO1FBQy9Da0IsY0FBY1Y7UUFDZFcsZUFBZTtJQUNuQixHQUFHUDtJQUNIZixJQUFJdUIsSUFBSSxDQUFDUixPQUFPLElBQU1mLElBQUl3QixLQUFLLENBQUM7QUFDcEM7QUFDQW5DLHdCQUF3QixHQUFHSztBQUMzQixTQUFTRCxnQkFBZ0JPLEdBQUcsRUFBRUMsR0FBRztJQUM3QixJQUFJd0I7SUFDSixNQUFNLEVBQUV2QixHQUFHLEVBQUVDLE9BQU8sRUFBRUMsTUFBTSxFQUFFQyxZQUFZLEVBQUVxQixLQUFLLEVBQUVwQixFQUFFLEVBQUUsR0FBR047SUFDMUQyQixrQkFBa0JyQixJQUFJTDtJQUN0QixNQUFNMkIsV0FBVyxDQUFDRixTQUFTekIsSUFBSTRCLE9BQU8sR0FBRzVCLElBQUk0QixPQUFPLENBQUNwQixJQUFJLENBQUNILEdBQUdJLElBQUksRUFBRU4sUUFBUUMsY0FBY0MsTUFBTUwsSUFBSTJCLFFBQVE7SUFDM0csTUFBTUUsY0FBY2xCLFdBQVdWLEtBQUtDLFNBQVN5QjtJQUM3QyxNQUFNYixRQUFRYixJQUFJNkIsR0FBRyxDQUFDO0lBQ3RCL0IsSUFBSWdDLFVBQVUsQ0FBQ2pCLE9BQU9rQjtJQUN0QmpDLElBQUlrQyxFQUFFLENBQUMsQ0FBQ1QsS0FBS3hCLElBQUljLEtBQUssTUFBTSxRQUFRVSxPQUFPLEtBQUssSUFBSUEsS0FBS1Y7SUFDekQsU0FBU2tCO1FBQ0wsSUFBSWhDLElBQUlrQyxNQUFNLEtBQUssT0FBTztZQUN0QkM7WUFDQSxJQUFJbkMsSUFBSW9DLFNBQVMsRUFDYkMsV0FBV3RDO1lBQ2Z1QyxXQUFXLElBQU12QyxJQUFJd0IsS0FBSztRQUM5QixPQUNLO1lBQ0QsTUFBTWdCLFdBQVd2QyxJQUFJd0MsS0FBSyxHQUFHQyxrQkFBa0JDO1lBQy9DLElBQUkxQyxJQUFJb0MsU0FBUyxFQUNiQyxXQUFXdEM7WUFDZnVDLFdBQVcsSUFBTUssUUFBUTVDLEtBQUt3QztRQUNsQztJQUNKO0lBQ0EsU0FBU0U7UUFDTCxNQUFNRixXQUFXdEMsSUFBSTZCLEdBQUcsQ0FBQyxZQUFZO1FBQ3JDN0IsSUFBSTJDLEdBQUcsQ0FBQyxJQUFNVCxZQUFZLENBQUMsR0FBR3pDLFVBQVVtRCxDQUFDLENBQUUsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDQyxJQUFNN0MsSUFBSThDLE1BQU0sQ0FBQ2pDLE9BQU8sT0FBT2tDLEVBQUUsQ0FBQyxDQUFDLEdBQUd0RCxVQUFVbUQsQ0FBQyxDQUFFLENBQUMsRUFBRUMsRUFBRSxZQUFZLEVBQUV6QyxHQUFHNEMsZUFBZSxDQUFDLENBQUMsRUFBRSxJQUFNaEQsSUFBSThDLE1BQU0sQ0FBQ1IsVUFBVSxDQUFDLEdBQUc3QyxVQUFVbUQsQ0FBQyxDQUFFLENBQUMsRUFBRUMsRUFBRSxPQUFPLENBQUMsR0FBRyxJQUFNN0MsSUFBSWlELEtBQUssQ0FBQ0o7UUFDL04sT0FBT1A7SUFDWDtJQUNBLFNBQVNHO1FBQ0wsTUFBTVMsZUFBZSxDQUFDLEdBQUd6RCxVQUFVbUQsQ0FBQyxDQUFFLENBQUMsRUFBRWhCLFlBQVksT0FBTyxDQUFDO1FBQzdENUIsSUFBSThDLE1BQU0sQ0FBQ0ksY0FBYztRQUN6QmhCLFlBQVl6QyxVQUFVd0IsR0FBRztRQUN6QixPQUFPaUM7SUFDWDtJQUNBLFNBQVNoQixZQUFZaUIsU0FBU3BELElBQUl3QyxLQUFLLEdBQUcsQ0FBQyxHQUFHOUMsVUFBVW1ELENBQUMsQ0FBRSxDQUFDLE1BQU0sQ0FBQyxHQUFHbkQsVUFBVXdCLEdBQUc7UUFDL0UsTUFBTW1DLFVBQVVoRCxHQUFHTyxJQUFJLENBQUMwQyxXQUFXLEdBQUcxRCxRQUFRMkQsT0FBTyxDQUFDQyxJQUFJLEdBQUc1RCxRQUFRMkQsT0FBTyxDQUFDOUMsSUFBSTtRQUNqRixNQUFNZ0QsYUFBYSxDQUFFLGNBQWN6RCxPQUFPLENBQUN5QixTQUFVekIsSUFBSUcsTUFBTSxLQUFLLEtBQUk7UUFDeEVGLElBQUk4QyxNQUFNLENBQUNqQyxPQUFPLENBQUMsR0FBR3BCLFVBQVVtRCxDQUFDLENBQUUsQ0FBQyxFQUFFTyxPQUFPLEVBQUUsQ0FBQyxHQUFHdkQsT0FBTzZELGdCQUFnQixFQUFFM0QsS0FBSzhCLGFBQWF3QixTQUFTSSxZQUFZLENBQUMsRUFBRXpELElBQUlvQyxTQUFTO0lBQ3ZJO0lBQ0EsU0FBU0UsV0FBV0osTUFBTTtRQUN0QixJQUFJVjtRQUNKdkIsSUFBSStDLEVBQUUsQ0FBQyxDQUFDLEdBQUd0RCxVQUFVaUUsR0FBRyxFQUFFLENBQUNuQyxLQUFLeEIsSUFBSWMsS0FBSyxNQUFNLFFBQVFVLE9BQU8sS0FBSyxJQUFJQSxLQUFLVixRQUFRb0I7SUFDeEY7QUFDSjtBQUNBOUMsdUJBQXVCLEdBQUdJO0FBQzFCLFNBQVM2QyxXQUFXdEMsR0FBRztJQUNuQixNQUFNLEVBQUVFLEdBQUcsRUFBRTJELElBQUksRUFBRXZELEVBQUUsRUFBRSxHQUFHTjtJQUMxQkUsSUFBSStDLEVBQUUsQ0FBQzNDLEdBQUd3RCxVQUFVLEVBQUUsSUFBTTVELElBQUk4QyxNQUFNLENBQUNhLE1BQU0sQ0FBQyxHQUFHbEUsVUFBVW1ELENBQUMsQ0FBRSxDQUFDLEVBQUV4QyxHQUFHd0QsVUFBVSxDQUFDLENBQUMsRUFBRXhELEdBQUd5RCxrQkFBa0IsQ0FBQyxDQUFDLENBQUM7QUFDOUc7QUFDQSxTQUFTbkIsUUFBUTVDLEdBQUcsRUFBRWdFLElBQUk7SUFDdEIsTUFBTSxFQUFFOUQsR0FBRyxFQUFFLEdBQUdGO0lBQ2hCRSxJQUFJK0MsRUFBRSxDQUFDLENBQUMsR0FBR3RELFVBQVVtRCxDQUFDLENBQUUsQ0FBQyxjQUFjLEVBQUVrQixLQUFLLENBQUMsQ0FBQyxFQUFFO1FBQzlDOUQsSUFDSzhDLE1BQU0sQ0FBQ25ELFFBQVEyRCxPQUFPLENBQUNTLE9BQU8sRUFBRSxDQUFDLEdBQUd0RSxVQUFVbUQsQ0FBQyxDQUFFLENBQUMsRUFBRWpELFFBQVEyRCxPQUFPLENBQUNTLE9BQU8sQ0FBQyxZQUFZLEVBQUVELEtBQUssR0FBRyxFQUFFbkUsUUFBUTJELE9BQU8sQ0FBQ1MsT0FBTyxDQUFDLFFBQVEsRUFBRUQsS0FBSyxDQUFDLENBQUMsRUFDN0loQixNQUFNLENBQUNuRCxRQUFRMkQsT0FBTyxDQUFDckIsTUFBTSxFQUFFLENBQUMsR0FBR3hDLFVBQVVtRCxDQUFDLENBQUUsQ0FBQyxFQUFFakQsUUFBUTJELE9BQU8sQ0FBQ1MsT0FBTyxDQUFDLE9BQU8sQ0FBQztRQUN2RixJQUFHbEUsU0FBU21FLFlBQVksRUFBRWxFO0lBQy9CLEdBQUcsSUFBTUEsSUFBSXdCLEtBQUs7QUFDdEI7QUFDQSxTQUFTRyxrQkFBa0IsRUFBRXdDLFNBQVMsRUFBRSxFQUFFbEUsR0FBRztJQUN6QyxJQUFJQSxJQUFJd0MsS0FBSyxJQUFJLENBQUMwQixVQUFVQyxNQUFNLEVBQzlCLE1BQU0sSUFBSUMsTUFBTTtBQUN4QjtBQUNBLFNBQVN6RCxXQUFXVixHQUFHLEVBQUVDLE9BQU8sRUFBRW1FLE1BQU07SUFDcEMsSUFBSUEsV0FBV0MsV0FDWCxNQUFNLElBQUlGLE1BQU0sQ0FBQyxTQUFTLEVBQUVsRSxRQUFRLG1CQUFtQixDQUFDO0lBQzVELE9BQU9ELElBQUlzRSxVQUFVLENBQUMsV0FBVyxPQUFPRixVQUFVLGFBQWE7UUFBRUcsS0FBS0g7SUFBTyxJQUFJO1FBQUVHLEtBQUtIO1FBQVFJLE1BQU0sQ0FBQyxHQUFHL0UsVUFBVWdGLFNBQVMsRUFBRUw7SUFBUTtBQUMzSTtBQUNBLFNBQVM5RSxnQkFBZ0JZLE1BQU0sRUFBRXdFLFVBQVUsRUFBRUMsaUJBQWlCLEtBQUs7SUFDL0QsaUJBQWlCO0lBQ2pCLE9BQVEsQ0FBQ0QsV0FBV0UsTUFBTSxJQUN0QkYsV0FBV0csSUFBSSxDQUFDLENBQUNDLEtBQU9BLE9BQU8sVUFDekJDLE1BQU1DLE9BQU8sQ0FBQzlFLFVBQ2Q0RSxPQUFPLFdBQ0g1RSxVQUFVLE9BQU9BLFVBQVUsWUFBWSxDQUFDNkUsTUFBTUMsT0FBTyxDQUFDOUUsVUFDdEQsT0FBT0EsVUFBVTRFLE1BQU9ILGtCQUFrQixPQUFPekUsVUFBVTtBQUM3RTtBQUNBZix1QkFBdUIsR0FBR0c7QUFDMUIsU0FBU0QscUJBQXFCLEVBQUVhLE1BQU0sRUFBRVMsSUFBSSxFQUFFSCxJQUFJLEVBQUVVLGFBQWEsRUFBRSxFQUFFbkIsR0FBRyxFQUFFRSxPQUFPO0lBQzdFLHNCQUFzQixHQUN0QixJQUFJOEUsTUFBTUMsT0FBTyxDQUFDakYsSUFBSUUsT0FBTyxJQUFJLENBQUNGLElBQUlFLE9BQU8sQ0FBQ2dGLFFBQVEsQ0FBQ2hGLFdBQVdGLElBQUlFLE9BQU8sS0FBS0EsU0FBUztRQUN2RixNQUFNLElBQUlrRSxNQUFNO0lBQ3BCO0lBQ0EsTUFBTWUsT0FBT25GLElBQUlvRixZQUFZO0lBQzdCLElBQUlELFNBQVMsUUFBUUEsU0FBUyxLQUFLLElBQUksS0FBSyxJQUFJQSxLQUFLTCxJQUFJLENBQUMsQ0FBQ08sTUFBUSxDQUFDbkcsT0FBT29HLFNBQVMsQ0FBQ0MsY0FBYyxDQUFDL0UsSUFBSSxDQUFDTCxRQUFRa0YsT0FBTztRQUNwSCxNQUFNLElBQUlqQixNQUFNLENBQUMsd0NBQXdDLEVBQUVsRSxRQUFRLEVBQUUsRUFBRWlGLEtBQUtLLElBQUksQ0FBQyxLQUFLLENBQUM7SUFDM0Y7SUFDQSxJQUFJeEYsSUFBSWEsY0FBYyxFQUFFO1FBQ3BCLE1BQU1DLFFBQVFkLElBQUlhLGNBQWMsQ0FBQ1YsTUFBTSxDQUFDRCxRQUFRO1FBQ2hELElBQUksQ0FBQ1ksT0FBTztZQUNSLE1BQU0yRSxNQUFNLENBQUMsU0FBUyxFQUFFdkYsUUFBUSw0QkFBNEIsRUFBRWlCLGNBQWMsR0FBRyxDQUFDLEdBQzVFVixLQUFLaUYsVUFBVSxDQUFDMUYsSUFBSWEsY0FBYyxDQUFDcUIsTUFBTTtZQUM3QyxJQUFJdEIsS0FBS0MsY0FBYyxLQUFLLE9BQ3hCSixLQUFLa0YsTUFBTSxDQUFDcEUsS0FBSyxDQUFDa0U7aUJBRWxCLE1BQU0sSUFBSXJCLE1BQU1xQjtRQUN4QjtJQUNKO0FBQ0o7QUFDQXJHLDRCQUE0QixHQUFHRSxzQkFDL0IsbUNBQW1DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaS1hbS1uZWFyYnkvLi9ub2RlX21vZHVsZXMvQG5lYXItanMvYWNjb3VudHMvbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L2NvbXBpbGUvdmFsaWRhdGUva2V5d29yZC5qcz8yZGYwIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy52YWxpZGF0ZUtleXdvcmRVc2FnZSA9IGV4cG9ydHMudmFsaWRTY2hlbWFUeXBlID0gZXhwb3J0cy5mdW5jS2V5d29yZENvZGUgPSBleHBvcnRzLm1hY3JvS2V5d29yZENvZGUgPSB2b2lkIDA7XG5jb25zdCBjb2RlZ2VuXzEgPSByZXF1aXJlKFwiLi4vY29kZWdlblwiKTtcbmNvbnN0IG5hbWVzXzEgPSByZXF1aXJlKFwiLi4vbmFtZXNcIik7XG5jb25zdCBjb2RlXzEgPSByZXF1aXJlKFwiLi4vLi4vdm9jYWJ1bGFyaWVzL2NvZGVcIik7XG5jb25zdCBlcnJvcnNfMSA9IHJlcXVpcmUoXCIuLi9lcnJvcnNcIik7XG5mdW5jdGlvbiBtYWNyb0tleXdvcmRDb2RlKGN4dCwgZGVmKSB7XG4gICAgY29uc3QgeyBnZW4sIGtleXdvcmQsIHNjaGVtYSwgcGFyZW50U2NoZW1hLCBpdCB9ID0gY3h0O1xuICAgIGNvbnN0IG1hY3JvU2NoZW1hID0gZGVmLm1hY3JvLmNhbGwoaXQuc2VsZiwgc2NoZW1hLCBwYXJlbnRTY2hlbWEsIGl0KTtcbiAgICBjb25zdCBzY2hlbWFSZWYgPSB1c2VLZXl3b3JkKGdlbiwga2V5d29yZCwgbWFjcm9TY2hlbWEpO1xuICAgIGlmIChpdC5vcHRzLnZhbGlkYXRlU2NoZW1hICE9PSBmYWxzZSlcbiAgICAgICAgaXQuc2VsZi52YWxpZGF0ZVNjaGVtYShtYWNyb1NjaGVtYSwgdHJ1ZSk7XG4gICAgY29uc3QgdmFsaWQgPSBnZW4ubmFtZShcInZhbGlkXCIpO1xuICAgIGN4dC5zdWJzY2hlbWEoe1xuICAgICAgICBzY2hlbWE6IG1hY3JvU2NoZW1hLFxuICAgICAgICBzY2hlbWFQYXRoOiBjb2RlZ2VuXzEubmlsLFxuICAgICAgICBlcnJTY2hlbWFQYXRoOiBgJHtpdC5lcnJTY2hlbWFQYXRofS8ke2tleXdvcmR9YCxcbiAgICAgICAgdG9wU2NoZW1hUmVmOiBzY2hlbWFSZWYsXG4gICAgICAgIGNvbXBvc2l0ZVJ1bGU6IHRydWUsXG4gICAgfSwgdmFsaWQpO1xuICAgIGN4dC5wYXNzKHZhbGlkLCAoKSA9PiBjeHQuZXJyb3IodHJ1ZSkpO1xufVxuZXhwb3J0cy5tYWNyb0tleXdvcmRDb2RlID0gbWFjcm9LZXl3b3JkQ29kZTtcbmZ1bmN0aW9uIGZ1bmNLZXl3b3JkQ29kZShjeHQsIGRlZikge1xuICAgIHZhciBfYTtcbiAgICBjb25zdCB7IGdlbiwga2V5d29yZCwgc2NoZW1hLCBwYXJlbnRTY2hlbWEsICRkYXRhLCBpdCB9ID0gY3h0O1xuICAgIGNoZWNrQXN5bmNLZXl3b3JkKGl0LCBkZWYpO1xuICAgIGNvbnN0IHZhbGlkYXRlID0gISRkYXRhICYmIGRlZi5jb21waWxlID8gZGVmLmNvbXBpbGUuY2FsbChpdC5zZWxmLCBzY2hlbWEsIHBhcmVudFNjaGVtYSwgaXQpIDogZGVmLnZhbGlkYXRlO1xuICAgIGNvbnN0IHZhbGlkYXRlUmVmID0gdXNlS2V5d29yZChnZW4sIGtleXdvcmQsIHZhbGlkYXRlKTtcbiAgICBjb25zdCB2YWxpZCA9IGdlbi5sZXQoXCJ2YWxpZFwiKTtcbiAgICBjeHQuYmxvY2skZGF0YSh2YWxpZCwgdmFsaWRhdGVLZXl3b3JkKTtcbiAgICBjeHQub2soKF9hID0gZGVmLnZhbGlkKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiB2YWxpZCk7XG4gICAgZnVuY3Rpb24gdmFsaWRhdGVLZXl3b3JkKCkge1xuICAgICAgICBpZiAoZGVmLmVycm9ycyA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIGFzc2lnblZhbGlkKCk7XG4gICAgICAgICAgICBpZiAoZGVmLm1vZGlmeWluZylcbiAgICAgICAgICAgICAgICBtb2RpZnlEYXRhKGN4dCk7XG4gICAgICAgICAgICByZXBvcnRFcnJzKCgpID0+IGN4dC5lcnJvcigpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IHJ1bGVFcnJzID0gZGVmLmFzeW5jID8gdmFsaWRhdGVBc3luYygpIDogdmFsaWRhdGVTeW5jKCk7XG4gICAgICAgICAgICBpZiAoZGVmLm1vZGlmeWluZylcbiAgICAgICAgICAgICAgICBtb2RpZnlEYXRhKGN4dCk7XG4gICAgICAgICAgICByZXBvcnRFcnJzKCgpID0+IGFkZEVycnMoY3h0LCBydWxlRXJycykpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIHZhbGlkYXRlQXN5bmMoKSB7XG4gICAgICAgIGNvbnN0IHJ1bGVFcnJzID0gZ2VuLmxldChcInJ1bGVFcnJzXCIsIG51bGwpO1xuICAgICAgICBnZW4udHJ5KCgpID0+IGFzc2lnblZhbGlkKCgwLCBjb2RlZ2VuXzEuXykgYGF3YWl0IGApLCAoZSkgPT4gZ2VuLmFzc2lnbih2YWxpZCwgZmFsc2UpLmlmKCgwLCBjb2RlZ2VuXzEuXykgYCR7ZX0gaW5zdGFuY2VvZiAke2l0LlZhbGlkYXRpb25FcnJvcn1gLCAoKSA9PiBnZW4uYXNzaWduKHJ1bGVFcnJzLCAoMCwgY29kZWdlbl8xLl8pIGAke2V9LmVycm9yc2ApLCAoKSA9PiBnZW4udGhyb3coZSkpKTtcbiAgICAgICAgcmV0dXJuIHJ1bGVFcnJzO1xuICAgIH1cbiAgICBmdW5jdGlvbiB2YWxpZGF0ZVN5bmMoKSB7XG4gICAgICAgIGNvbnN0IHZhbGlkYXRlRXJycyA9ICgwLCBjb2RlZ2VuXzEuXykgYCR7dmFsaWRhdGVSZWZ9LmVycm9yc2A7XG4gICAgICAgIGdlbi5hc3NpZ24odmFsaWRhdGVFcnJzLCBudWxsKTtcbiAgICAgICAgYXNzaWduVmFsaWQoY29kZWdlbl8xLm5pbCk7XG4gICAgICAgIHJldHVybiB2YWxpZGF0ZUVycnM7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGFzc2lnblZhbGlkKF9hd2FpdCA9IGRlZi5hc3luYyA/ICgwLCBjb2RlZ2VuXzEuXykgYGF3YWl0IGAgOiBjb2RlZ2VuXzEubmlsKSB7XG4gICAgICAgIGNvbnN0IHBhc3NDeHQgPSBpdC5vcHRzLnBhc3NDb250ZXh0ID8gbmFtZXNfMS5kZWZhdWx0LnRoaXMgOiBuYW1lc18xLmRlZmF1bHQuc2VsZjtcbiAgICAgICAgY29uc3QgcGFzc1NjaGVtYSA9ICEoKFwiY29tcGlsZVwiIGluIGRlZiAmJiAhJGRhdGEpIHx8IGRlZi5zY2hlbWEgPT09IGZhbHNlKTtcbiAgICAgICAgZ2VuLmFzc2lnbih2YWxpZCwgKDAsIGNvZGVnZW5fMS5fKSBgJHtfYXdhaXR9JHsoMCwgY29kZV8xLmNhbGxWYWxpZGF0ZUNvZGUpKGN4dCwgdmFsaWRhdGVSZWYsIHBhc3NDeHQsIHBhc3NTY2hlbWEpfWAsIGRlZi5tb2RpZnlpbmcpO1xuICAgIH1cbiAgICBmdW5jdGlvbiByZXBvcnRFcnJzKGVycm9ycykge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGdlbi5pZigoMCwgY29kZWdlbl8xLm5vdCkoKF9hID0gZGVmLnZhbGlkKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiB2YWxpZCksIGVycm9ycyk7XG4gICAgfVxufVxuZXhwb3J0cy5mdW5jS2V5d29yZENvZGUgPSBmdW5jS2V5d29yZENvZGU7XG5mdW5jdGlvbiBtb2RpZnlEYXRhKGN4dCkge1xuICAgIGNvbnN0IHsgZ2VuLCBkYXRhLCBpdCB9ID0gY3h0O1xuICAgIGdlbi5pZihpdC5wYXJlbnREYXRhLCAoKSA9PiBnZW4uYXNzaWduKGRhdGEsICgwLCBjb2RlZ2VuXzEuXykgYCR7aXQucGFyZW50RGF0YX1bJHtpdC5wYXJlbnREYXRhUHJvcGVydHl9XWApKTtcbn1cbmZ1bmN0aW9uIGFkZEVycnMoY3h0LCBlcnJzKSB7XG4gICAgY29uc3QgeyBnZW4gfSA9IGN4dDtcbiAgICBnZW4uaWYoKDAsIGNvZGVnZW5fMS5fKSBgQXJyYXkuaXNBcnJheSgke2VycnN9KWAsICgpID0+IHtcbiAgICAgICAgZ2VuXG4gICAgICAgICAgICAuYXNzaWduKG5hbWVzXzEuZGVmYXVsdC52RXJyb3JzLCAoMCwgY29kZWdlbl8xLl8pIGAke25hbWVzXzEuZGVmYXVsdC52RXJyb3JzfSA9PT0gbnVsbCA/ICR7ZXJyc30gOiAke25hbWVzXzEuZGVmYXVsdC52RXJyb3JzfS5jb25jYXQoJHtlcnJzfSlgKVxuICAgICAgICAgICAgLmFzc2lnbihuYW1lc18xLmRlZmF1bHQuZXJyb3JzLCAoMCwgY29kZWdlbl8xLl8pIGAke25hbWVzXzEuZGVmYXVsdC52RXJyb3JzfS5sZW5ndGhgKTtcbiAgICAgICAgKDAsIGVycm9yc18xLmV4dGVuZEVycm9ycykoY3h0KTtcbiAgICB9LCAoKSA9PiBjeHQuZXJyb3IoKSk7XG59XG5mdW5jdGlvbiBjaGVja0FzeW5jS2V5d29yZCh7IHNjaGVtYUVudiB9LCBkZWYpIHtcbiAgICBpZiAoZGVmLmFzeW5jICYmICFzY2hlbWFFbnYuJGFzeW5jKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJhc3luYyBrZXl3b3JkIGluIHN5bmMgc2NoZW1hXCIpO1xufVxuZnVuY3Rpb24gdXNlS2V5d29yZChnZW4sIGtleXdvcmQsIHJlc3VsdCkge1xuICAgIGlmIChyZXN1bHQgPT09IHVuZGVmaW5lZClcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBrZXl3b3JkIFwiJHtrZXl3b3JkfVwiIGZhaWxlZCB0byBjb21waWxlYCk7XG4gICAgcmV0dXJuIGdlbi5zY29wZVZhbHVlKFwia2V5d29yZFwiLCB0eXBlb2YgcmVzdWx0ID09IFwiZnVuY3Rpb25cIiA/IHsgcmVmOiByZXN1bHQgfSA6IHsgcmVmOiByZXN1bHQsIGNvZGU6ICgwLCBjb2RlZ2VuXzEuc3RyaW5naWZ5KShyZXN1bHQpIH0pO1xufVxuZnVuY3Rpb24gdmFsaWRTY2hlbWFUeXBlKHNjaGVtYSwgc2NoZW1hVHlwZSwgYWxsb3dVbmRlZmluZWQgPSBmYWxzZSkge1xuICAgIC8vIFRPRE8gYWRkIHRlc3RzXG4gICAgcmV0dXJuICghc2NoZW1hVHlwZS5sZW5ndGggfHxcbiAgICAgICAgc2NoZW1hVHlwZS5zb21lKChzdCkgPT4gc3QgPT09IFwiYXJyYXlcIlxuICAgICAgICAgICAgPyBBcnJheS5pc0FycmF5KHNjaGVtYSlcbiAgICAgICAgICAgIDogc3QgPT09IFwib2JqZWN0XCJcbiAgICAgICAgICAgICAgICA/IHNjaGVtYSAmJiB0eXBlb2Ygc2NoZW1hID09IFwib2JqZWN0XCIgJiYgIUFycmF5LmlzQXJyYXkoc2NoZW1hKVxuICAgICAgICAgICAgICAgIDogdHlwZW9mIHNjaGVtYSA9PSBzdCB8fCAoYWxsb3dVbmRlZmluZWQgJiYgdHlwZW9mIHNjaGVtYSA9PSBcInVuZGVmaW5lZFwiKSkpO1xufVxuZXhwb3J0cy52YWxpZFNjaGVtYVR5cGUgPSB2YWxpZFNjaGVtYVR5cGU7XG5mdW5jdGlvbiB2YWxpZGF0ZUtleXdvcmRVc2FnZSh7IHNjaGVtYSwgb3B0cywgc2VsZiwgZXJyU2NoZW1hUGF0aCB9LCBkZWYsIGtleXdvcmQpIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoQXJyYXkuaXNBcnJheShkZWYua2V5d29yZCkgPyAhZGVmLmtleXdvcmQuaW5jbHVkZXMoa2V5d29yZCkgOiBkZWYua2V5d29yZCAhPT0ga2V5d29yZCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJhanYgaW1wbGVtZW50YXRpb24gZXJyb3JcIik7XG4gICAgfVxuICAgIGNvbnN0IGRlcHMgPSBkZWYuZGVwZW5kZW5jaWVzO1xuICAgIGlmIChkZXBzID09PSBudWxsIHx8IGRlcHMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGRlcHMuc29tZSgoa3dkKSA9PiAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNjaGVtYSwga3dkKSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBwYXJlbnQgc2NoZW1hIG11c3QgaGF2ZSBkZXBlbmRlbmNpZXMgb2YgJHtrZXl3b3JkfTogJHtkZXBzLmpvaW4oXCIsXCIpfWApO1xuICAgIH1cbiAgICBpZiAoZGVmLnZhbGlkYXRlU2NoZW1hKSB7XG4gICAgICAgIGNvbnN0IHZhbGlkID0gZGVmLnZhbGlkYXRlU2NoZW1hKHNjaGVtYVtrZXl3b3JkXSk7XG4gICAgICAgIGlmICghdmFsaWQpIHtcbiAgICAgICAgICAgIGNvbnN0IG1zZyA9IGBrZXl3b3JkIFwiJHtrZXl3b3JkfVwiIHZhbHVlIGlzIGludmFsaWQgYXQgcGF0aCBcIiR7ZXJyU2NoZW1hUGF0aH1cIjogYCArXG4gICAgICAgICAgICAgICAgc2VsZi5lcnJvcnNUZXh0KGRlZi52YWxpZGF0ZVNjaGVtYS5lcnJvcnMpO1xuICAgICAgICAgICAgaWYgKG9wdHMudmFsaWRhdGVTY2hlbWEgPT09IFwibG9nXCIpXG4gICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuZXJyb3IobXNnKTtcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IobXNnKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMudmFsaWRhdGVLZXl3b3JkVXNhZ2UgPSB2YWxpZGF0ZUtleXdvcmRVc2FnZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWtleXdvcmQuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwidmFsaWRhdGVLZXl3b3JkVXNhZ2UiLCJ2YWxpZFNjaGVtYVR5cGUiLCJmdW5jS2V5d29yZENvZGUiLCJtYWNyb0tleXdvcmRDb2RlIiwiY29kZWdlbl8xIiwicmVxdWlyZSIsIm5hbWVzXzEiLCJjb2RlXzEiLCJlcnJvcnNfMSIsImN4dCIsImRlZiIsImdlbiIsImtleXdvcmQiLCJzY2hlbWEiLCJwYXJlbnRTY2hlbWEiLCJpdCIsIm1hY3JvU2NoZW1hIiwibWFjcm8iLCJjYWxsIiwic2VsZiIsInNjaGVtYVJlZiIsInVzZUtleXdvcmQiLCJvcHRzIiwidmFsaWRhdGVTY2hlbWEiLCJ2YWxpZCIsIm5hbWUiLCJzdWJzY2hlbWEiLCJzY2hlbWFQYXRoIiwibmlsIiwiZXJyU2NoZW1hUGF0aCIsInRvcFNjaGVtYVJlZiIsImNvbXBvc2l0ZVJ1bGUiLCJwYXNzIiwiZXJyb3IiLCJfYSIsIiRkYXRhIiwiY2hlY2tBc3luY0tleXdvcmQiLCJ2YWxpZGF0ZSIsImNvbXBpbGUiLCJ2YWxpZGF0ZVJlZiIsImxldCIsImJsb2NrJGRhdGEiLCJ2YWxpZGF0ZUtleXdvcmQiLCJvayIsImVycm9ycyIsImFzc2lnblZhbGlkIiwibW9kaWZ5aW5nIiwibW9kaWZ5RGF0YSIsInJlcG9ydEVycnMiLCJydWxlRXJycyIsImFzeW5jIiwidmFsaWRhdGVBc3luYyIsInZhbGlkYXRlU3luYyIsImFkZEVycnMiLCJ0cnkiLCJfIiwiZSIsImFzc2lnbiIsImlmIiwiVmFsaWRhdGlvbkVycm9yIiwidGhyb3ciLCJ2YWxpZGF0ZUVycnMiLCJfYXdhaXQiLCJwYXNzQ3h0IiwicGFzc0NvbnRleHQiLCJkZWZhdWx0IiwidGhpcyIsInBhc3NTY2hlbWEiLCJjYWxsVmFsaWRhdGVDb2RlIiwibm90IiwiZGF0YSIsInBhcmVudERhdGEiLCJwYXJlbnREYXRhUHJvcGVydHkiLCJlcnJzIiwidkVycm9ycyIsImV4dGVuZEVycm9ycyIsInNjaGVtYUVudiIsIiRhc3luYyIsIkVycm9yIiwicmVzdWx0IiwidW5kZWZpbmVkIiwic2NvcGVWYWx1ZSIsInJlZiIsImNvZGUiLCJzdHJpbmdpZnkiLCJzY2hlbWFUeXBlIiwiYWxsb3dVbmRlZmluZWQiLCJsZW5ndGgiLCJzb21lIiwic3QiLCJBcnJheSIsImlzQXJyYXkiLCJpbmNsdWRlcyIsImRlcHMiLCJkZXBlbmRlbmNpZXMiLCJrd2QiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImpvaW4iLCJtc2ciLCJlcnJvcnNUZXh0IiwibG9nZ2VyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/validate/keyword.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/validate/subschema.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/validate/subschema.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.extendSubschemaMode = exports.extendSubschemaData = exports.getSubschema = void 0;\nconst codegen_1 = __webpack_require__(/*! ../codegen */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/codegen/index.js\");\nconst util_1 = __webpack_require__(/*! ../util */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/util.js\");\nfunction getSubschema(it, { keyword, schemaProp, schema, schemaPath, errSchemaPath, topSchemaRef }) {\n    if (keyword !== undefined && schema !== undefined) {\n        throw new Error('both \"keyword\" and \"schema\" passed, only one allowed');\n    }\n    if (keyword !== undefined) {\n        const sch = it.schema[keyword];\n        return schemaProp === undefined ? {\n            schema: sch,\n            schemaPath: (0, codegen_1._)`${it.schemaPath}${(0, codegen_1.getProperty)(keyword)}`,\n            errSchemaPath: `${it.errSchemaPath}/${keyword}`\n        } : {\n            schema: sch[schemaProp],\n            schemaPath: (0, codegen_1._)`${it.schemaPath}${(0, codegen_1.getProperty)(keyword)}${(0, codegen_1.getProperty)(schemaProp)}`,\n            errSchemaPath: `${it.errSchemaPath}/${keyword}/${(0, util_1.escapeFragment)(schemaProp)}`\n        };\n    }\n    if (schema !== undefined) {\n        if (schemaPath === undefined || errSchemaPath === undefined || topSchemaRef === undefined) {\n            throw new Error('\"schemaPath\", \"errSchemaPath\" and \"topSchemaRef\" are required with \"schema\"');\n        }\n        return {\n            schema,\n            schemaPath,\n            topSchemaRef,\n            errSchemaPath\n        };\n    }\n    throw new Error('either \"keyword\" or \"schema\" must be passed');\n}\nexports.getSubschema = getSubschema;\nfunction extendSubschemaData(subschema, it, { dataProp, dataPropType: dpType, data, dataTypes, propertyName }) {\n    if (data !== undefined && dataProp !== undefined) {\n        throw new Error('both \"data\" and \"dataProp\" passed, only one allowed');\n    }\n    const { gen } = it;\n    if (dataProp !== undefined) {\n        const { errorPath, dataPathArr, opts } = it;\n        const nextData = gen.let(\"data\", (0, codegen_1._)`${it.data}${(0, codegen_1.getProperty)(dataProp)}`, true);\n        dataContextProps(nextData);\n        subschema.errorPath = (0, codegen_1.str)`${errorPath}${(0, util_1.getErrorPath)(dataProp, dpType, opts.jsPropertySyntax)}`;\n        subschema.parentDataProperty = (0, codegen_1._)`${dataProp}`;\n        subschema.dataPathArr = [\n            ...dataPathArr,\n            subschema.parentDataProperty\n        ];\n    }\n    if (data !== undefined) {\n        const nextData = data instanceof codegen_1.Name ? data : gen.let(\"data\", data, true); // replaceable if used once?\n        dataContextProps(nextData);\n        if (propertyName !== undefined) subschema.propertyName = propertyName;\n    // TODO something is possibly wrong here with not changing parentDataProperty and not appending dataPathArr\n    }\n    if (dataTypes) subschema.dataTypes = dataTypes;\n    function dataContextProps(_nextData) {\n        subschema.data = _nextData;\n        subschema.dataLevel = it.dataLevel + 1;\n        subschema.dataTypes = [];\n        it.definedProperties = new Set();\n        subschema.parentData = it.data;\n        subschema.dataNames = [\n            ...it.dataNames,\n            _nextData\n        ];\n    }\n}\nexports.extendSubschemaData = extendSubschemaData;\nfunction extendSubschemaMode(subschema, { jtdDiscriminator, jtdMetadata, compositeRule, createErrors, allErrors }) {\n    if (compositeRule !== undefined) subschema.compositeRule = compositeRule;\n    if (createErrors !== undefined) subschema.createErrors = createErrors;\n    if (allErrors !== undefined) subschema.allErrors = allErrors;\n    subschema.jtdDiscriminator = jtdDiscriminator; // not inherited\n    subschema.jtdMetadata = jtdMetadata; // not inherited\n}\nexports.extendSubschemaMode = extendSubschemaMode; //# sourceMappingURL=subschema.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/validate/subschema.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/core.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@near-js/accounts/node_modules/ajv/dist/core.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.CodeGen = exports.Name = exports.nil = exports.stringify = exports.str = exports._ = exports.KeywordCxt = void 0;\nvar validate_1 = __webpack_require__(/*! ./compile/validate */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/validate/index.js\");\nObject.defineProperty(exports, \"KeywordCxt\", ({\n    enumerable: true,\n    get: function() {\n        return validate_1.KeywordCxt;\n    }\n}));\nvar codegen_1 = __webpack_require__(/*! ./compile/codegen */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/codegen/index.js\");\nObject.defineProperty(exports, \"_\", ({\n    enumerable: true,\n    get: function() {\n        return codegen_1._;\n    }\n}));\nObject.defineProperty(exports, \"str\", ({\n    enumerable: true,\n    get: function() {\n        return codegen_1.str;\n    }\n}));\nObject.defineProperty(exports, \"stringify\", ({\n    enumerable: true,\n    get: function() {\n        return codegen_1.stringify;\n    }\n}));\nObject.defineProperty(exports, \"nil\", ({\n    enumerable: true,\n    get: function() {\n        return codegen_1.nil;\n    }\n}));\nObject.defineProperty(exports, \"Name\", ({\n    enumerable: true,\n    get: function() {\n        return codegen_1.Name;\n    }\n}));\nObject.defineProperty(exports, \"CodeGen\", ({\n    enumerable: true,\n    get: function() {\n        return codegen_1.CodeGen;\n    }\n}));\nconst validation_error_1 = __webpack_require__(/*! ./runtime/validation_error */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/runtime/validation_error.js\");\nconst ref_error_1 = __webpack_require__(/*! ./compile/ref_error */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/ref_error.js\");\nconst rules_1 = __webpack_require__(/*! ./compile/rules */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/rules.js\");\nconst compile_1 = __webpack_require__(/*! ./compile */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/index.js\");\nconst codegen_2 = __webpack_require__(/*! ./compile/codegen */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/codegen/index.js\");\nconst resolve_1 = __webpack_require__(/*! ./compile/resolve */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/resolve.js\");\nconst dataType_1 = __webpack_require__(/*! ./compile/validate/dataType */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/validate/dataType.js\");\nconst util_1 = __webpack_require__(/*! ./compile/util */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/util.js\");\nconst $dataRefSchema = __webpack_require__(/*! ./refs/data.json */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/refs/data.json\");\nconst uri_1 = __webpack_require__(/*! ./runtime/uri */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/runtime/uri.js\");\nconst defaultRegExp = (str, flags)=>new RegExp(str, flags);\ndefaultRegExp.code = \"new RegExp\";\nconst META_IGNORE_OPTIONS = [\n    \"removeAdditional\",\n    \"useDefaults\",\n    \"coerceTypes\"\n];\nconst EXT_SCOPE_NAMES = new Set([\n    \"validate\",\n    \"serialize\",\n    \"parse\",\n    \"wrapper\",\n    \"root\",\n    \"schema\",\n    \"keyword\",\n    \"pattern\",\n    \"formats\",\n    \"validate$data\",\n    \"func\",\n    \"obj\",\n    \"Error\"\n]);\nconst removedOptions = {\n    errorDataPath: \"\",\n    format: \"`validateFormats: false` can be used instead.\",\n    nullable: '\"nullable\" keyword is supported by default.',\n    jsonPointers: \"Deprecated jsPropertySyntax can be used instead.\",\n    extendRefs: \"Deprecated ignoreKeywordsWithRef can be used instead.\",\n    missingRefs: \"Pass empty schema with $id that should be ignored to ajv.addSchema.\",\n    processCode: \"Use option `code: {process: (code, schemaEnv: object) => string}`\",\n    sourceCode: \"Use option `code: {source: true}`\",\n    strictDefaults: \"It is default now, see option `strict`.\",\n    strictKeywords: \"It is default now, see option `strict`.\",\n    uniqueItems: '\"uniqueItems\" keyword is always validated.',\n    unknownFormats: \"Disable strict mode or pass `true` to `ajv.addFormat` (or `formats` option).\",\n    cache: \"Map is used as cache, schema object as key.\",\n    serialize: \"Map is used as cache, schema object as key.\",\n    ajvErrors: \"It is default now.\"\n};\nconst deprecatedOptions = {\n    ignoreKeywordsWithRef: \"\",\n    jsPropertySyntax: \"\",\n    unicode: '\"minLength\"/\"maxLength\" account for unicode characters by default.'\n};\nconst MAX_EXPRESSION = 200;\n// eslint-disable-next-line complexity\nfunction requiredOptions(o) {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0;\n    const s = o.strict;\n    const _optz = (_a = o.code) === null || _a === void 0 ? void 0 : _a.optimize;\n    const optimize = _optz === true || _optz === undefined ? 1 : _optz || 0;\n    const regExp = (_c = (_b = o.code) === null || _b === void 0 ? void 0 : _b.regExp) !== null && _c !== void 0 ? _c : defaultRegExp;\n    const uriResolver = (_d = o.uriResolver) !== null && _d !== void 0 ? _d : uri_1.default;\n    return {\n        strictSchema: (_f = (_e = o.strictSchema) !== null && _e !== void 0 ? _e : s) !== null && _f !== void 0 ? _f : true,\n        strictNumbers: (_h = (_g = o.strictNumbers) !== null && _g !== void 0 ? _g : s) !== null && _h !== void 0 ? _h : true,\n        strictTypes: (_k = (_j = o.strictTypes) !== null && _j !== void 0 ? _j : s) !== null && _k !== void 0 ? _k : \"log\",\n        strictTuples: (_m = (_l = o.strictTuples) !== null && _l !== void 0 ? _l : s) !== null && _m !== void 0 ? _m : \"log\",\n        strictRequired: (_p = (_o = o.strictRequired) !== null && _o !== void 0 ? _o : s) !== null && _p !== void 0 ? _p : false,\n        code: o.code ? {\n            ...o.code,\n            optimize,\n            regExp\n        } : {\n            optimize,\n            regExp\n        },\n        loopRequired: (_q = o.loopRequired) !== null && _q !== void 0 ? _q : MAX_EXPRESSION,\n        loopEnum: (_r = o.loopEnum) !== null && _r !== void 0 ? _r : MAX_EXPRESSION,\n        meta: (_s = o.meta) !== null && _s !== void 0 ? _s : true,\n        messages: (_t = o.messages) !== null && _t !== void 0 ? _t : true,\n        inlineRefs: (_u = o.inlineRefs) !== null && _u !== void 0 ? _u : true,\n        schemaId: (_v = o.schemaId) !== null && _v !== void 0 ? _v : \"$id\",\n        addUsedSchema: (_w = o.addUsedSchema) !== null && _w !== void 0 ? _w : true,\n        validateSchema: (_x = o.validateSchema) !== null && _x !== void 0 ? _x : true,\n        validateFormats: (_y = o.validateFormats) !== null && _y !== void 0 ? _y : true,\n        unicodeRegExp: (_z = o.unicodeRegExp) !== null && _z !== void 0 ? _z : true,\n        int32range: (_0 = o.int32range) !== null && _0 !== void 0 ? _0 : true,\n        uriResolver: uriResolver\n    };\n}\nclass Ajv {\n    constructor(opts = {}){\n        this.schemas = {};\n        this.refs = {};\n        this.formats = {};\n        this._compilations = new Set();\n        this._loading = {};\n        this._cache = new Map();\n        opts = this.opts = {\n            ...opts,\n            ...requiredOptions(opts)\n        };\n        const { es5, lines } = this.opts.code;\n        this.scope = new codegen_2.ValueScope({\n            scope: {},\n            prefixes: EXT_SCOPE_NAMES,\n            es5,\n            lines\n        });\n        this.logger = getLogger(opts.logger);\n        const formatOpt = opts.validateFormats;\n        opts.validateFormats = false;\n        this.RULES = (0, rules_1.getRules)();\n        checkOptions.call(this, removedOptions, opts, \"NOT SUPPORTED\");\n        checkOptions.call(this, deprecatedOptions, opts, \"DEPRECATED\", \"warn\");\n        this._metaOpts = getMetaSchemaOptions.call(this);\n        if (opts.formats) addInitialFormats.call(this);\n        this._addVocabularies();\n        this._addDefaultMetaSchema();\n        if (opts.keywords) addInitialKeywords.call(this, opts.keywords);\n        if (typeof opts.meta == \"object\") this.addMetaSchema(opts.meta);\n        addInitialSchemas.call(this);\n        opts.validateFormats = formatOpt;\n    }\n    _addVocabularies() {\n        this.addKeyword(\"$async\");\n    }\n    _addDefaultMetaSchema() {\n        const { $data, meta, schemaId } = this.opts;\n        let _dataRefSchema = $dataRefSchema;\n        if (schemaId === \"id\") {\n            _dataRefSchema = {\n                ...$dataRefSchema\n            };\n            _dataRefSchema.id = _dataRefSchema.$id;\n            delete _dataRefSchema.$id;\n        }\n        if (meta && $data) this.addMetaSchema(_dataRefSchema, _dataRefSchema[schemaId], false);\n    }\n    defaultMeta() {\n        const { meta, schemaId } = this.opts;\n        return this.opts.defaultMeta = typeof meta == \"object\" ? meta[schemaId] || meta : undefined;\n    }\n    validate(schemaKeyRef, data // to be validated\n    ) {\n        let v;\n        if (typeof schemaKeyRef == \"string\") {\n            v = this.getSchema(schemaKeyRef);\n            if (!v) throw new Error(`no schema with key or ref \"${schemaKeyRef}\"`);\n        } else {\n            v = this.compile(schemaKeyRef);\n        }\n        const valid = v(data);\n        if (!(\"$async\" in v)) this.errors = v.errors;\n        return valid;\n    }\n    compile(schema, _meta) {\n        const sch = this._addSchema(schema, _meta);\n        return sch.validate || this._compileSchemaEnv(sch);\n    }\n    compileAsync(schema, meta) {\n        if (typeof this.opts.loadSchema != \"function\") {\n            throw new Error(\"options.loadSchema should be a function\");\n        }\n        const { loadSchema } = this.opts;\n        return runCompileAsync.call(this, schema, meta);\n        async function runCompileAsync(_schema, _meta) {\n            await loadMetaSchema.call(this, _schema.$schema);\n            const sch = this._addSchema(_schema, _meta);\n            return sch.validate || _compileAsync.call(this, sch);\n        }\n        async function loadMetaSchema($ref) {\n            if ($ref && !this.getSchema($ref)) {\n                await runCompileAsync.call(this, {\n                    $ref\n                }, true);\n            }\n        }\n        async function _compileAsync(sch) {\n            try {\n                return this._compileSchemaEnv(sch);\n            } catch (e) {\n                if (!(e instanceof ref_error_1.default)) throw e;\n                checkLoaded.call(this, e);\n                await loadMissingSchema.call(this, e.missingSchema);\n                return _compileAsync.call(this, sch);\n            }\n        }\n        function checkLoaded({ missingSchema: ref, missingRef }) {\n            if (this.refs[ref]) {\n                throw new Error(`AnySchema ${ref} is loaded but ${missingRef} cannot be resolved`);\n            }\n        }\n        async function loadMissingSchema(ref) {\n            const _schema = await _loadSchema.call(this, ref);\n            if (!this.refs[ref]) await loadMetaSchema.call(this, _schema.$schema);\n            if (!this.refs[ref]) this.addSchema(_schema, ref, meta);\n        }\n        async function _loadSchema(ref) {\n            const p = this._loading[ref];\n            if (p) return p;\n            try {\n                return await (this._loading[ref] = loadSchema(ref));\n            } finally{\n                delete this._loading[ref];\n            }\n        }\n    }\n    // Adds schema to the instance\n    addSchema(schema, key, _meta, _validateSchema = this.opts.validateSchema // false to skip schema validation. Used internally, option validateSchema should be used instead.\n    ) {\n        if (Array.isArray(schema)) {\n            for (const sch of schema)this.addSchema(sch, undefined, _meta, _validateSchema);\n            return this;\n        }\n        let id;\n        if (typeof schema === \"object\") {\n            const { schemaId } = this.opts;\n            id = schema[schemaId];\n            if (id !== undefined && typeof id != \"string\") {\n                throw new Error(`schema ${schemaId} must be string`);\n            }\n        }\n        key = (0, resolve_1.normalizeId)(key || id);\n        this._checkUnique(key);\n        this.schemas[key] = this._addSchema(schema, _meta, key, _validateSchema, true);\n        return this;\n    }\n    // Add schema that will be used to validate other schemas\n    // options in META_IGNORE_OPTIONS are alway set to false\n    addMetaSchema(schema, key, _validateSchema = this.opts.validateSchema // false to skip schema validation, can be used to override validateSchema option for meta-schema\n    ) {\n        this.addSchema(schema, key, true, _validateSchema);\n        return this;\n    }\n    //  Validate schema against its meta-schema\n    validateSchema(schema, throwOrLogError) {\n        if (typeof schema == \"boolean\") return true;\n        let $schema;\n        $schema = schema.$schema;\n        if ($schema !== undefined && typeof $schema != \"string\") {\n            throw new Error(\"$schema must be a string\");\n        }\n        $schema = $schema || this.opts.defaultMeta || this.defaultMeta();\n        if (!$schema) {\n            this.logger.warn(\"meta-schema not available\");\n            this.errors = null;\n            return true;\n        }\n        const valid = this.validate($schema, schema);\n        if (!valid && throwOrLogError) {\n            const message = \"schema is invalid: \" + this.errorsText();\n            if (this.opts.validateSchema === \"log\") this.logger.error(message);\n            else throw new Error(message);\n        }\n        return valid;\n    }\n    // Get compiled schema by `key` or `ref`.\n    // (`key` that was passed to `addSchema` or full schema reference - `schema.$id` or resolved id)\n    getSchema(keyRef) {\n        let sch;\n        while(typeof (sch = getSchEnv.call(this, keyRef)) == \"string\")keyRef = sch;\n        if (sch === undefined) {\n            const { schemaId } = this.opts;\n            const root = new compile_1.SchemaEnv({\n                schema: {},\n                schemaId\n            });\n            sch = compile_1.resolveSchema.call(this, root, keyRef);\n            if (!sch) return;\n            this.refs[keyRef] = sch;\n        }\n        return sch.validate || this._compileSchemaEnv(sch);\n    }\n    // Remove cached schema(s).\n    // If no parameter is passed all schemas but meta-schemas are removed.\n    // If RegExp is passed all schemas with key/id matching pattern but meta-schemas are removed.\n    // Even if schema is referenced by other schemas it still can be removed as other schemas have local references.\n    removeSchema(schemaKeyRef) {\n        if (schemaKeyRef instanceof RegExp) {\n            this._removeAllSchemas(this.schemas, schemaKeyRef);\n            this._removeAllSchemas(this.refs, schemaKeyRef);\n            return this;\n        }\n        switch(typeof schemaKeyRef){\n            case \"undefined\":\n                this._removeAllSchemas(this.schemas);\n                this._removeAllSchemas(this.refs);\n                this._cache.clear();\n                return this;\n            case \"string\":\n                {\n                    const sch = getSchEnv.call(this, schemaKeyRef);\n                    if (typeof sch == \"object\") this._cache.delete(sch.schema);\n                    delete this.schemas[schemaKeyRef];\n                    delete this.refs[schemaKeyRef];\n                    return this;\n                }\n            case \"object\":\n                {\n                    const cacheKey = schemaKeyRef;\n                    this._cache.delete(cacheKey);\n                    let id = schemaKeyRef[this.opts.schemaId];\n                    if (id) {\n                        id = (0, resolve_1.normalizeId)(id);\n                        delete this.schemas[id];\n                        delete this.refs[id];\n                    }\n                    return this;\n                }\n            default:\n                throw new Error(\"ajv.removeSchema: invalid parameter\");\n        }\n    }\n    // add \"vocabulary\" - a collection of keywords\n    addVocabulary(definitions) {\n        for (const def of definitions)this.addKeyword(def);\n        return this;\n    }\n    addKeyword(kwdOrDef, def // deprecated\n    ) {\n        let keyword;\n        if (typeof kwdOrDef == \"string\") {\n            keyword = kwdOrDef;\n            if (typeof def == \"object\") {\n                this.logger.warn(\"these parameters are deprecated, see docs for addKeyword\");\n                def.keyword = keyword;\n            }\n        } else if (typeof kwdOrDef == \"object\" && def === undefined) {\n            def = kwdOrDef;\n            keyword = def.keyword;\n            if (Array.isArray(keyword) && !keyword.length) {\n                throw new Error(\"addKeywords: keyword must be string or non-empty array\");\n            }\n        } else {\n            throw new Error(\"invalid addKeywords parameters\");\n        }\n        checkKeyword.call(this, keyword, def);\n        if (!def) {\n            (0, util_1.eachItem)(keyword, (kwd)=>addRule.call(this, kwd));\n            return this;\n        }\n        keywordMetaschema.call(this, def);\n        const definition = {\n            ...def,\n            type: (0, dataType_1.getJSONTypes)(def.type),\n            schemaType: (0, dataType_1.getJSONTypes)(def.schemaType)\n        };\n        (0, util_1.eachItem)(keyword, definition.type.length === 0 ? (k)=>addRule.call(this, k, definition) : (k)=>definition.type.forEach((t)=>addRule.call(this, k, definition, t)));\n        return this;\n    }\n    getKeyword(keyword) {\n        const rule = this.RULES.all[keyword];\n        return typeof rule == \"object\" ? rule.definition : !!rule;\n    }\n    // Remove keyword\n    removeKeyword(keyword) {\n        // TODO return type should be Ajv\n        const { RULES } = this;\n        delete RULES.keywords[keyword];\n        delete RULES.all[keyword];\n        for (const group of RULES.rules){\n            const i = group.rules.findIndex((rule)=>rule.keyword === keyword);\n            if (i >= 0) group.rules.splice(i, 1);\n        }\n        return this;\n    }\n    // Add format\n    addFormat(name, format) {\n        if (typeof format == \"string\") format = new RegExp(format);\n        this.formats[name] = format;\n        return this;\n    }\n    errorsText(errors = this.errors, { separator = \", \", dataVar = \"data\" } = {} // optional options with properties `separator` and `dataVar`\n    ) {\n        if (!errors || errors.length === 0) return \"No errors\";\n        return errors.map((e)=>`${dataVar}${e.instancePath} ${e.message}`).reduce((text, msg)=>text + separator + msg);\n    }\n    $dataMetaSchema(metaSchema, keywordsJsonPointers) {\n        const rules = this.RULES.all;\n        metaSchema = JSON.parse(JSON.stringify(metaSchema));\n        for (const jsonPointer of keywordsJsonPointers){\n            const segments = jsonPointer.split(\"/\").slice(1); // first segment is an empty string\n            let keywords = metaSchema;\n            for (const seg of segments)keywords = keywords[seg];\n            for(const key in rules){\n                const rule = rules[key];\n                if (typeof rule != \"object\") continue;\n                const { $data } = rule.definition;\n                const schema = keywords[key];\n                if ($data && schema) keywords[key] = schemaOrData(schema);\n            }\n        }\n        return metaSchema;\n    }\n    _removeAllSchemas(schemas, regex) {\n        for(const keyRef in schemas){\n            const sch = schemas[keyRef];\n            if (!regex || regex.test(keyRef)) {\n                if (typeof sch == \"string\") {\n                    delete schemas[keyRef];\n                } else if (sch && !sch.meta) {\n                    this._cache.delete(sch.schema);\n                    delete schemas[keyRef];\n                }\n            }\n        }\n    }\n    _addSchema(schema, meta, baseId, validateSchema = this.opts.validateSchema, addSchema = this.opts.addUsedSchema) {\n        let id;\n        const { schemaId } = this.opts;\n        if (typeof schema == \"object\") {\n            id = schema[schemaId];\n        } else {\n            if (this.opts.jtd) throw new Error(\"schema must be object\");\n            else if (typeof schema != \"boolean\") throw new Error(\"schema must be object or boolean\");\n        }\n        let sch = this._cache.get(schema);\n        if (sch !== undefined) return sch;\n        baseId = (0, resolve_1.normalizeId)(id || baseId);\n        const localRefs = resolve_1.getSchemaRefs.call(this, schema, baseId);\n        sch = new compile_1.SchemaEnv({\n            schema,\n            schemaId,\n            meta,\n            baseId,\n            localRefs\n        });\n        this._cache.set(sch.schema, sch);\n        if (addSchema && !baseId.startsWith(\"#\")) {\n            // TODO atm it is allowed to overwrite schemas without id (instead of not adding them)\n            if (baseId) this._checkUnique(baseId);\n            this.refs[baseId] = sch;\n        }\n        if (validateSchema) this.validateSchema(schema, true);\n        return sch;\n    }\n    _checkUnique(id) {\n        if (this.schemas[id] || this.refs[id]) {\n            throw new Error(`schema with key or id \"${id}\" already exists`);\n        }\n    }\n    _compileSchemaEnv(sch) {\n        if (sch.meta) this._compileMetaSchema(sch);\n        else compile_1.compileSchema.call(this, sch);\n        /* istanbul ignore if */ if (!sch.validate) throw new Error(\"ajv implementation error\");\n        return sch.validate;\n    }\n    _compileMetaSchema(sch) {\n        const currentOpts = this.opts;\n        this.opts = this._metaOpts;\n        try {\n            compile_1.compileSchema.call(this, sch);\n        } finally{\n            this.opts = currentOpts;\n        }\n    }\n}\nexports[\"default\"] = Ajv;\nAjv.ValidationError = validation_error_1.default;\nAjv.MissingRefError = ref_error_1.default;\nfunction checkOptions(checkOpts, options, msg, log = \"error\") {\n    for(const key in checkOpts){\n        const opt = key;\n        if (opt in options) this.logger[log](`${msg}: option ${key}. ${checkOpts[opt]}`);\n    }\n}\nfunction getSchEnv(keyRef) {\n    keyRef = (0, resolve_1.normalizeId)(keyRef); // TODO tests fail without this line\n    return this.schemas[keyRef] || this.refs[keyRef];\n}\nfunction addInitialSchemas() {\n    const optsSchemas = this.opts.schemas;\n    if (!optsSchemas) return;\n    if (Array.isArray(optsSchemas)) this.addSchema(optsSchemas);\n    else for(const key in optsSchemas)this.addSchema(optsSchemas[key], key);\n}\nfunction addInitialFormats() {\n    for(const name in this.opts.formats){\n        const format = this.opts.formats[name];\n        if (format) this.addFormat(name, format);\n    }\n}\nfunction addInitialKeywords(defs) {\n    if (Array.isArray(defs)) {\n        this.addVocabulary(defs);\n        return;\n    }\n    this.logger.warn(\"keywords option as map is deprecated, pass array\");\n    for(const keyword in defs){\n        const def = defs[keyword];\n        if (!def.keyword) def.keyword = keyword;\n        this.addKeyword(def);\n    }\n}\nfunction getMetaSchemaOptions() {\n    const metaOpts = {\n        ...this.opts\n    };\n    for (const opt of META_IGNORE_OPTIONS)delete metaOpts[opt];\n    return metaOpts;\n}\nconst noLogs = {\n    log () {},\n    warn () {},\n    error () {}\n};\nfunction getLogger(logger) {\n    if (logger === false) return noLogs;\n    if (logger === undefined) return console;\n    if (logger.log && logger.warn && logger.error) return logger;\n    throw new Error(\"logger must implement log, warn and error methods\");\n}\nconst KEYWORD_NAME = /^[a-z_$][a-z0-9_$:-]*$/i;\nfunction checkKeyword(keyword, def) {\n    const { RULES } = this;\n    (0, util_1.eachItem)(keyword, (kwd)=>{\n        if (RULES.keywords[kwd]) throw new Error(`Keyword ${kwd} is already defined`);\n        if (!KEYWORD_NAME.test(kwd)) throw new Error(`Keyword ${kwd} has invalid name`);\n    });\n    if (!def) return;\n    if (def.$data && !(\"code\" in def || \"validate\" in def)) {\n        throw new Error('$data keyword must have \"code\" or \"validate\" function');\n    }\n}\nfunction addRule(keyword, definition, dataType) {\n    var _a;\n    const post = definition === null || definition === void 0 ? void 0 : definition.post;\n    if (dataType && post) throw new Error('keyword with \"post\" flag cannot have \"type\"');\n    const { RULES } = this;\n    let ruleGroup = post ? RULES.post : RULES.rules.find(({ type: t })=>t === dataType);\n    if (!ruleGroup) {\n        ruleGroup = {\n            type: dataType,\n            rules: []\n        };\n        RULES.rules.push(ruleGroup);\n    }\n    RULES.keywords[keyword] = true;\n    if (!definition) return;\n    const rule = {\n        keyword,\n        definition: {\n            ...definition,\n            type: (0, dataType_1.getJSONTypes)(definition.type),\n            schemaType: (0, dataType_1.getJSONTypes)(definition.schemaType)\n        }\n    };\n    if (definition.before) addBeforeRule.call(this, ruleGroup, rule, definition.before);\n    else ruleGroup.rules.push(rule);\n    RULES.all[keyword] = rule;\n    (_a = definition.implements) === null || _a === void 0 ? void 0 : _a.forEach((kwd)=>this.addKeyword(kwd));\n}\nfunction addBeforeRule(ruleGroup, rule, before) {\n    const i = ruleGroup.rules.findIndex((_rule)=>_rule.keyword === before);\n    if (i >= 0) {\n        ruleGroup.rules.splice(i, 0, rule);\n    } else {\n        ruleGroup.rules.push(rule);\n        this.logger.warn(`rule ${before} is not defined`);\n    }\n}\nfunction keywordMetaschema(def) {\n    let { metaSchema } = def;\n    if (metaSchema === undefined) return;\n    if (def.$data && this.opts.$data) metaSchema = schemaOrData(metaSchema);\n    def.validateSchema = this.compile(metaSchema, true);\n}\nconst $dataRef = {\n    $ref: \"https://raw.githubusercontent.com/ajv-validator/ajv/master/lib/refs/data.json#\"\n};\nfunction schemaOrData(schema) {\n    return {\n        anyOf: [\n            schema,\n            $dataRef\n        ]\n    };\n} //# sourceMappingURL=core.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/core.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/runtime/equal.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@near-js/accounts/node_modules/ajv/dist/runtime/equal.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n// https://github.com/ajv-validator/ajv/issues/889\nconst equal = __webpack_require__(/*! fast-deep-equal */ \"(ssr)/./node_modules/fast-deep-equal/index.js\");\nequal.code = 'require(\"ajv/dist/runtime/equal\").default';\nexports[\"default\"] = equal; //# sourceMappingURL=equal.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG5lYXItanMvYWNjb3VudHMvbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L3J1bnRpbWUvZXF1YWwuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0Qsa0RBQWtEO0FBQ2xELE1BQU1DLFFBQVFDLG1CQUFPQSxDQUFDLHNFQUFpQjtBQUN2Q0QsTUFBTUUsSUFBSSxHQUFHO0FBQ2JKLGtCQUFlLEdBQUdFLE9BQ2xCLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL2ktYW0tbmVhcmJ5Ly4vbm9kZV9tb2R1bGVzL0BuZWFyLWpzL2FjY291bnRzL25vZGVfbW9kdWxlcy9hanYvZGlzdC9ydW50aW1lL2VxdWFsLmpzPzhmMWYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vYWp2LXZhbGlkYXRvci9hanYvaXNzdWVzLzg4OVxuY29uc3QgZXF1YWwgPSByZXF1aXJlKFwiZmFzdC1kZWVwLWVxdWFsXCIpO1xuZXF1YWwuY29kZSA9ICdyZXF1aXJlKFwiYWp2L2Rpc3QvcnVudGltZS9lcXVhbFwiKS5kZWZhdWx0JztcbmV4cG9ydHMuZGVmYXVsdCA9IGVxdWFsO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXF1YWwuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZXF1YWwiLCJyZXF1aXJlIiwiY29kZSIsImRlZmF1bHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/runtime/equal.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/runtime/ucs2length.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@near-js/accounts/node_modules/ajv/dist/runtime/ucs2length.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n// https://mathiasbynens.be/notes/javascript-encoding\n// https://github.com/bestiejs/punycode.js - punycode.ucs2.decode\nfunction ucs2length(str) {\n    const len = str.length;\n    let length = 0;\n    let pos = 0;\n    let value;\n    while(pos < len){\n        length++;\n        value = str.charCodeAt(pos++);\n        if (value >= 0xd800 && value <= 0xdbff && pos < len) {\n            // high surrogate, and there is a next character\n            value = str.charCodeAt(pos);\n            if ((value & 0xfc00) === 0xdc00) pos++; // low surrogate\n        }\n    }\n    return length;\n}\nexports[\"default\"] = ucs2length;\nucs2length.code = 'require(\"ajv/dist/runtime/ucs2length\").default'; //# sourceMappingURL=ucs2length.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG5lYXItanMvYWNjb3VudHMvbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L3J1bnRpbWUvdWNzMmxlbmd0aC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3RCxxREFBcUQ7QUFDckQsaUVBQWlFO0FBQ2pFLFNBQVNDLFdBQVdDLEdBQUc7SUFDbkIsTUFBTUMsTUFBTUQsSUFBSUUsTUFBTTtJQUN0QixJQUFJQSxTQUFTO0lBQ2IsSUFBSUMsTUFBTTtJQUNWLElBQUlMO0lBQ0osTUFBT0ssTUFBTUYsSUFBSztRQUNkQztRQUNBSixRQUFRRSxJQUFJSSxVQUFVLENBQUNEO1FBQ3ZCLElBQUlMLFNBQVMsVUFBVUEsU0FBUyxVQUFVSyxNQUFNRixLQUFLO1lBQ2pELGdEQUFnRDtZQUNoREgsUUFBUUUsSUFBSUksVUFBVSxDQUFDRDtZQUN2QixJQUFJLENBQUNMLFFBQVEsTUFBSyxNQUFPLFFBQ3JCSyxPQUFPLGdCQUFnQjtRQUMvQjtJQUNKO0lBQ0EsT0FBT0Q7QUFDWDtBQUNBTCxrQkFBZSxHQUFHRTtBQUNsQkEsV0FBV08sSUFBSSxHQUFHLGtEQUNsQixzQ0FBc0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pLWFtLW5lYXJieS8uL25vZGVfbW9kdWxlcy9AbmVhci1qcy9hY2NvdW50cy9ub2RlX21vZHVsZXMvYWp2L2Rpc3QvcnVudGltZS91Y3MybGVuZ3RoLmpzPzI5YjciXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vLyBodHRwczovL21hdGhpYXNieW5lbnMuYmUvbm90ZXMvamF2YXNjcmlwdC1lbmNvZGluZ1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL2Jlc3RpZWpzL3B1bnljb2RlLmpzIC0gcHVueWNvZGUudWNzMi5kZWNvZGVcbmZ1bmN0aW9uIHVjczJsZW5ndGgoc3RyKSB7XG4gICAgY29uc3QgbGVuID0gc3RyLmxlbmd0aDtcbiAgICBsZXQgbGVuZ3RoID0gMDtcbiAgICBsZXQgcG9zID0gMDtcbiAgICBsZXQgdmFsdWU7XG4gICAgd2hpbGUgKHBvcyA8IGxlbikge1xuICAgICAgICBsZW5ndGgrKztcbiAgICAgICAgdmFsdWUgPSBzdHIuY2hhckNvZGVBdChwb3MrKyk7XG4gICAgICAgIGlmICh2YWx1ZSA+PSAweGQ4MDAgJiYgdmFsdWUgPD0gMHhkYmZmICYmIHBvcyA8IGxlbikge1xuICAgICAgICAgICAgLy8gaGlnaCBzdXJyb2dhdGUsIGFuZCB0aGVyZSBpcyBhIG5leHQgY2hhcmFjdGVyXG4gICAgICAgICAgICB2YWx1ZSA9IHN0ci5jaGFyQ29kZUF0KHBvcyk7XG4gICAgICAgICAgICBpZiAoKHZhbHVlICYgMHhmYzAwKSA9PT0gMHhkYzAwKVxuICAgICAgICAgICAgICAgIHBvcysrOyAvLyBsb3cgc3Vycm9nYXRlXG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGxlbmd0aDtcbn1cbmV4cG9ydHMuZGVmYXVsdCA9IHVjczJsZW5ndGg7XG51Y3MybGVuZ3RoLmNvZGUgPSAncmVxdWlyZShcImFqdi9kaXN0L3J1bnRpbWUvdWNzMmxlbmd0aFwiKS5kZWZhdWx0Jztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVjczJsZW5ndGguanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwidWNzMmxlbmd0aCIsInN0ciIsImxlbiIsImxlbmd0aCIsInBvcyIsImNoYXJDb2RlQXQiLCJkZWZhdWx0IiwiY29kZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/runtime/ucs2length.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/runtime/uri.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@near-js/accounts/node_modules/ajv/dist/runtime/uri.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst uri = __webpack_require__(/*! uri-js */ \"(ssr)/./node_modules/uri-js/dist/es5/uri.all.js\");\nuri.code = 'require(\"ajv/dist/runtime/uri\").default';\nexports[\"default\"] = uri; //# sourceMappingURL=uri.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG5lYXItanMvYWNjb3VudHMvbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L3J1bnRpbWUvdXJpLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdELE1BQU1DLE1BQU1DLG1CQUFPQSxDQUFDLCtEQUFRO0FBQzVCRCxJQUFJRSxJQUFJLEdBQUc7QUFDWEosa0JBQWUsR0FBR0UsS0FDbEIsK0JBQStCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaS1hbS1uZWFyYnkvLi9ub2RlX21vZHVsZXMvQG5lYXItanMvYWNjb3VudHMvbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L3J1bnRpbWUvdXJpLmpzP2ZiYmQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCB1cmkgPSByZXF1aXJlKFwidXJpLWpzXCIpO1xudXJpLmNvZGUgPSAncmVxdWlyZShcImFqdi9kaXN0L3J1bnRpbWUvdXJpXCIpLmRlZmF1bHQnO1xuZXhwb3J0cy5kZWZhdWx0ID0gdXJpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXJpLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInVyaSIsInJlcXVpcmUiLCJjb2RlIiwiZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/runtime/uri.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/runtime/validation_error.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@near-js/accounts/node_modules/ajv/dist/runtime/validation_error.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nclass ValidationError extends Error {\n    constructor(errors){\n        super(\"validation failed\");\n        this.errors = errors;\n        this.ajv = this.validation = true;\n    }\n}\nexports[\"default\"] = ValidationError; //# sourceMappingURL=validation_error.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG5lYXItanMvYWNjb3VudHMvbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L3J1bnRpbWUvdmFsaWRhdGlvbl9lcnJvci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3RCxNQUFNQyx3QkFBd0JDO0lBQzFCQyxZQUFZQyxNQUFNLENBQUU7UUFDaEIsS0FBSyxDQUFDO1FBQ04sSUFBSSxDQUFDQSxNQUFNLEdBQUdBO1FBQ2QsSUFBSSxDQUFDQyxHQUFHLEdBQUcsSUFBSSxDQUFDQyxVQUFVLEdBQUc7SUFDakM7QUFDSjtBQUNBUCxrQkFBZSxHQUFHRSxpQkFDbEIsNENBQTRDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaS1hbS1uZWFyYnkvLi9ub2RlX21vZHVsZXMvQG5lYXItanMvYWNjb3VudHMvbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L3J1bnRpbWUvdmFsaWRhdGlvbl9lcnJvci5qcz85ZGExIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY2xhc3MgVmFsaWRhdGlvbkVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKGVycm9ycykge1xuICAgICAgICBzdXBlcihcInZhbGlkYXRpb24gZmFpbGVkXCIpO1xuICAgICAgICB0aGlzLmVycm9ycyA9IGVycm9ycztcbiAgICAgICAgdGhpcy5hanYgPSB0aGlzLnZhbGlkYXRpb24gPSB0cnVlO1xuICAgIH1cbn1cbmV4cG9ydHMuZGVmYXVsdCA9IFZhbGlkYXRpb25FcnJvcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXZhbGlkYXRpb25fZXJyb3IuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiVmFsaWRhdGlvbkVycm9yIiwiRXJyb3IiLCJjb25zdHJ1Y3RvciIsImVycm9ycyIsImFqdiIsInZhbGlkYXRpb24iLCJkZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/runtime/validation_error.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/applicator/additionalItems.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/applicator/additionalItems.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.validateAdditionalItems = void 0;\nconst codegen_1 = __webpack_require__(/*! ../../compile/codegen */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/codegen/index.js\");\nconst util_1 = __webpack_require__(/*! ../../compile/util */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/util.js\");\nconst error = {\n    message: ({ params: { len } })=>(0, codegen_1.str)`must NOT have more than ${len} items`,\n    params: ({ params: { len } })=>(0, codegen_1._)`{limit: ${len}}`\n};\nconst def = {\n    keyword: \"additionalItems\",\n    type: \"array\",\n    schemaType: [\n        \"boolean\",\n        \"object\"\n    ],\n    before: \"uniqueItems\",\n    error,\n    code (cxt) {\n        const { parentSchema, it } = cxt;\n        const { items } = parentSchema;\n        if (!Array.isArray(items)) {\n            (0, util_1.checkStrictMode)(it, '\"additionalItems\" is ignored when \"items\" is not an array of schemas');\n            return;\n        }\n        validateAdditionalItems(cxt, items);\n    }\n};\nfunction validateAdditionalItems(cxt, items) {\n    const { gen, schema, data, keyword, it } = cxt;\n    it.items = true;\n    const len = gen.const(\"len\", (0, codegen_1._)`${data}.length`);\n    if (schema === false) {\n        cxt.setParams({\n            len: items.length\n        });\n        cxt.pass((0, codegen_1._)`${len} <= ${items.length}`);\n    } else if (typeof schema == \"object\" && !(0, util_1.alwaysValidSchema)(it, schema)) {\n        const valid = gen.var(\"valid\", (0, codegen_1._)`${len} <= ${items.length}`); // TODO var\n        gen.if((0, codegen_1.not)(valid), ()=>validateItems(valid));\n        cxt.ok(valid);\n    }\n    function validateItems(valid) {\n        gen.forRange(\"i\", items.length, len, (i)=>{\n            cxt.subschema({\n                keyword,\n                dataProp: i,\n                dataPropType: util_1.Type.Num\n            }, valid);\n            if (!it.allErrors) gen.if((0, codegen_1.not)(valid), ()=>gen.break());\n        });\n    }\n}\nexports.validateAdditionalItems = validateAdditionalItems;\nexports[\"default\"] = def; //# sourceMappingURL=additionalItems.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG5lYXItanMvYWNjb3VudHMvbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L3ZvY2FidWxhcmllcy9hcHBsaWNhdG9yL2FkZGl0aW9uYWxJdGVtcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsK0JBQStCLEdBQUcsS0FBSztBQUN2QyxNQUFNRyxZQUFZQyxtQkFBT0EsQ0FBQyxvSEFBdUI7QUFDakQsTUFBTUMsU0FBU0QsbUJBQU9BLENBQUMsd0dBQW9CO0FBQzNDLE1BQU1FLFFBQVE7SUFDVkMsU0FBUyxDQUFDLEVBQUVDLFFBQVEsRUFBRUMsR0FBRyxFQUFFLEVBQUUsR0FBSyxDQUFDLEdBQUdOLFVBQVVPLEdBQUcsQ0FBRSxDQUFDLHdCQUF3QixFQUFFRCxJQUFJLE1BQU0sQ0FBQztJQUMzRkQsUUFBUSxDQUFDLEVBQUVBLFFBQVEsRUFBRUMsR0FBRyxFQUFFLEVBQUUsR0FBSyxDQUFDLEdBQUdOLFVBQVVRLENBQUMsQ0FBRSxDQUFDLFFBQVEsRUFBRUYsSUFBSSxDQUFDLENBQUM7QUFDdkU7QUFDQSxNQUFNRyxNQUFNO0lBQ1JDLFNBQVM7SUFDVEMsTUFBTTtJQUNOQyxZQUFZO1FBQUM7UUFBVztLQUFTO0lBQ2pDQyxRQUFRO0lBQ1JWO0lBQ0FXLE1BQUtDLEdBQUc7UUFDSixNQUFNLEVBQUVDLFlBQVksRUFBRUMsRUFBRSxFQUFFLEdBQUdGO1FBQzdCLE1BQU0sRUFBRUcsS0FBSyxFQUFFLEdBQUdGO1FBQ2xCLElBQUksQ0FBQ0csTUFBTUMsT0FBTyxDQUFDRixRQUFRO1lBQ3RCLElBQUdoQixPQUFPbUIsZUFBZSxFQUFFSixJQUFJO1lBQ2hDO1FBQ0o7UUFDQWxCLHdCQUF3QmdCLEtBQUtHO0lBQ2pDO0FBQ0o7QUFDQSxTQUFTbkIsd0JBQXdCZ0IsR0FBRyxFQUFFRyxLQUFLO0lBQ3ZDLE1BQU0sRUFBRUksR0FBRyxFQUFFQyxNQUFNLEVBQUVDLElBQUksRUFBRWQsT0FBTyxFQUFFTyxFQUFFLEVBQUUsR0FBR0Y7SUFDM0NFLEdBQUdDLEtBQUssR0FBRztJQUNYLE1BQU1aLE1BQU1nQixJQUFJRyxLQUFLLENBQUMsT0FBTyxDQUFDLEdBQUd6QixVQUFVUSxDQUFDLENBQUUsQ0FBQyxFQUFFZ0IsS0FBSyxPQUFPLENBQUM7SUFDOUQsSUFBSUQsV0FBVyxPQUFPO1FBQ2xCUixJQUFJVyxTQUFTLENBQUM7WUFBRXBCLEtBQUtZLE1BQU1TLE1BQU07UUFBQztRQUNsQ1osSUFBSWEsSUFBSSxDQUFDLENBQUMsR0FBRzVCLFVBQVVRLENBQUMsQ0FBRSxDQUFDLEVBQUVGLElBQUksSUFBSSxFQUFFWSxNQUFNUyxNQUFNLENBQUMsQ0FBQztJQUN6RCxPQUNLLElBQUksT0FBT0osVUFBVSxZQUFZLENBQUMsQ0FBQyxHQUFHckIsT0FBTzJCLGlCQUFpQixFQUFFWixJQUFJTSxTQUFTO1FBQzlFLE1BQU1PLFFBQVFSLElBQUlTLEdBQUcsQ0FBQyxTQUFTLENBQUMsR0FBRy9CLFVBQVVRLENBQUMsQ0FBRSxDQUFDLEVBQUVGLElBQUksSUFBSSxFQUFFWSxNQUFNUyxNQUFNLENBQUMsQ0FBQyxHQUFHLFdBQVc7UUFDekZMLElBQUlVLEVBQUUsQ0FBQyxDQUFDLEdBQUdoQyxVQUFVaUMsR0FBRyxFQUFFSCxRQUFRLElBQU1JLGNBQWNKO1FBQ3REZixJQUFJb0IsRUFBRSxDQUFDTDtJQUNYO0lBQ0EsU0FBU0ksY0FBY0osS0FBSztRQUN4QlIsSUFBSWMsUUFBUSxDQUFDLEtBQUtsQixNQUFNUyxNQUFNLEVBQUVyQixLQUFLLENBQUMrQjtZQUNsQ3RCLElBQUl1QixTQUFTLENBQUM7Z0JBQUU1QjtnQkFBUzZCLFVBQVVGO2dCQUFHRyxjQUFjdEMsT0FBT3VDLElBQUksQ0FBQ0MsR0FBRztZQUFDLEdBQUdaO1lBQ3ZFLElBQUksQ0FBQ2IsR0FBRzBCLFNBQVMsRUFDYnJCLElBQUlVLEVBQUUsQ0FBQyxDQUFDLEdBQUdoQyxVQUFVaUMsR0FBRyxFQUFFSCxRQUFRLElBQU1SLElBQUlzQixLQUFLO1FBQ3pEO0lBQ0o7QUFDSjtBQUNBL0MsK0JBQStCLEdBQUdFO0FBQ2xDRixrQkFBZSxHQUFHWSxLQUNsQiwyQ0FBMkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pLWFtLW5lYXJieS8uL25vZGVfbW9kdWxlcy9AbmVhci1qcy9hY2NvdW50cy9ub2RlX21vZHVsZXMvYWp2L2Rpc3Qvdm9jYWJ1bGFyaWVzL2FwcGxpY2F0b3IvYWRkaXRpb25hbEl0ZW1zLmpzPzFlOTIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnZhbGlkYXRlQWRkaXRpb25hbEl0ZW1zID0gdm9pZCAwO1xuY29uc3QgY29kZWdlbl8xID0gcmVxdWlyZShcIi4uLy4uL2NvbXBpbGUvY29kZWdlblwiKTtcbmNvbnN0IHV0aWxfMSA9IHJlcXVpcmUoXCIuLi8uLi9jb21waWxlL3V0aWxcIik7XG5jb25zdCBlcnJvciA9IHtcbiAgICBtZXNzYWdlOiAoeyBwYXJhbXM6IHsgbGVuIH0gfSkgPT4gKDAsIGNvZGVnZW5fMS5zdHIpIGBtdXN0IE5PVCBoYXZlIG1vcmUgdGhhbiAke2xlbn0gaXRlbXNgLFxuICAgIHBhcmFtczogKHsgcGFyYW1zOiB7IGxlbiB9IH0pID0+ICgwLCBjb2RlZ2VuXzEuXykgYHtsaW1pdDogJHtsZW59fWAsXG59O1xuY29uc3QgZGVmID0ge1xuICAgIGtleXdvcmQ6IFwiYWRkaXRpb25hbEl0ZW1zXCIsXG4gICAgdHlwZTogXCJhcnJheVwiLFxuICAgIHNjaGVtYVR5cGU6IFtcImJvb2xlYW5cIiwgXCJvYmplY3RcIl0sXG4gICAgYmVmb3JlOiBcInVuaXF1ZUl0ZW1zXCIsXG4gICAgZXJyb3IsXG4gICAgY29kZShjeHQpIHtcbiAgICAgICAgY29uc3QgeyBwYXJlbnRTY2hlbWEsIGl0IH0gPSBjeHQ7XG4gICAgICAgIGNvbnN0IHsgaXRlbXMgfSA9IHBhcmVudFNjaGVtYTtcbiAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGl0ZW1zKSkge1xuICAgICAgICAgICAgKDAsIHV0aWxfMS5jaGVja1N0cmljdE1vZGUpKGl0LCAnXCJhZGRpdGlvbmFsSXRlbXNcIiBpcyBpZ25vcmVkIHdoZW4gXCJpdGVtc1wiIGlzIG5vdCBhbiBhcnJheSBvZiBzY2hlbWFzJyk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFsaWRhdGVBZGRpdGlvbmFsSXRlbXMoY3h0LCBpdGVtcyk7XG4gICAgfSxcbn07XG5mdW5jdGlvbiB2YWxpZGF0ZUFkZGl0aW9uYWxJdGVtcyhjeHQsIGl0ZW1zKSB7XG4gICAgY29uc3QgeyBnZW4sIHNjaGVtYSwgZGF0YSwga2V5d29yZCwgaXQgfSA9IGN4dDtcbiAgICBpdC5pdGVtcyA9IHRydWU7XG4gICAgY29uc3QgbGVuID0gZ2VuLmNvbnN0KFwibGVuXCIsICgwLCBjb2RlZ2VuXzEuXykgYCR7ZGF0YX0ubGVuZ3RoYCk7XG4gICAgaWYgKHNjaGVtYSA9PT0gZmFsc2UpIHtcbiAgICAgICAgY3h0LnNldFBhcmFtcyh7IGxlbjogaXRlbXMubGVuZ3RoIH0pO1xuICAgICAgICBjeHQucGFzcygoMCwgY29kZWdlbl8xLl8pIGAke2xlbn0gPD0gJHtpdGVtcy5sZW5ndGh9YCk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiBzY2hlbWEgPT0gXCJvYmplY3RcIiAmJiAhKDAsIHV0aWxfMS5hbHdheXNWYWxpZFNjaGVtYSkoaXQsIHNjaGVtYSkpIHtcbiAgICAgICAgY29uc3QgdmFsaWQgPSBnZW4udmFyKFwidmFsaWRcIiwgKDAsIGNvZGVnZW5fMS5fKSBgJHtsZW59IDw9ICR7aXRlbXMubGVuZ3RofWApOyAvLyBUT0RPIHZhclxuICAgICAgICBnZW4uaWYoKDAsIGNvZGVnZW5fMS5ub3QpKHZhbGlkKSwgKCkgPT4gdmFsaWRhdGVJdGVtcyh2YWxpZCkpO1xuICAgICAgICBjeHQub2sodmFsaWQpO1xuICAgIH1cbiAgICBmdW5jdGlvbiB2YWxpZGF0ZUl0ZW1zKHZhbGlkKSB7XG4gICAgICAgIGdlbi5mb3JSYW5nZShcImlcIiwgaXRlbXMubGVuZ3RoLCBsZW4sIChpKSA9PiB7XG4gICAgICAgICAgICBjeHQuc3Vic2NoZW1hKHsga2V5d29yZCwgZGF0YVByb3A6IGksIGRhdGFQcm9wVHlwZTogdXRpbF8xLlR5cGUuTnVtIH0sIHZhbGlkKTtcbiAgICAgICAgICAgIGlmICghaXQuYWxsRXJyb3JzKVxuICAgICAgICAgICAgICAgIGdlbi5pZigoMCwgY29kZWdlbl8xLm5vdCkodmFsaWQpLCAoKSA9PiBnZW4uYnJlYWsoKSk7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbmV4cG9ydHMudmFsaWRhdGVBZGRpdGlvbmFsSXRlbXMgPSB2YWxpZGF0ZUFkZGl0aW9uYWxJdGVtcztcbmV4cG9ydHMuZGVmYXVsdCA9IGRlZjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFkZGl0aW9uYWxJdGVtcy5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJ2YWxpZGF0ZUFkZGl0aW9uYWxJdGVtcyIsImNvZGVnZW5fMSIsInJlcXVpcmUiLCJ1dGlsXzEiLCJlcnJvciIsIm1lc3NhZ2UiLCJwYXJhbXMiLCJsZW4iLCJzdHIiLCJfIiwiZGVmIiwia2V5d29yZCIsInR5cGUiLCJzY2hlbWFUeXBlIiwiYmVmb3JlIiwiY29kZSIsImN4dCIsInBhcmVudFNjaGVtYSIsIml0IiwiaXRlbXMiLCJBcnJheSIsImlzQXJyYXkiLCJjaGVja1N0cmljdE1vZGUiLCJnZW4iLCJzY2hlbWEiLCJkYXRhIiwiY29uc3QiLCJzZXRQYXJhbXMiLCJsZW5ndGgiLCJwYXNzIiwiYWx3YXlzVmFsaWRTY2hlbWEiLCJ2YWxpZCIsInZhciIsImlmIiwibm90IiwidmFsaWRhdGVJdGVtcyIsIm9rIiwiZm9yUmFuZ2UiLCJpIiwic3Vic2NoZW1hIiwiZGF0YVByb3AiLCJkYXRhUHJvcFR5cGUiLCJUeXBlIiwiTnVtIiwiYWxsRXJyb3JzIiwiYnJlYWsiLCJkZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/applicator/additionalItems.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/applicator/additionalProperties.js":
/*!**************************************************************************************************************!*\
  !*** ./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/applicator/additionalProperties.js ***!
  \**************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst code_1 = __webpack_require__(/*! ../code */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/code.js\");\nconst codegen_1 = __webpack_require__(/*! ../../compile/codegen */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/codegen/index.js\");\nconst names_1 = __webpack_require__(/*! ../../compile/names */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/names.js\");\nconst util_1 = __webpack_require__(/*! ../../compile/util */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/util.js\");\nconst error = {\n    message: \"must NOT have additional properties\",\n    params: ({ params })=>(0, codegen_1._)`{additionalProperty: ${params.additionalProperty}}`\n};\nconst def = {\n    keyword: \"additionalProperties\",\n    type: [\n        \"object\"\n    ],\n    schemaType: [\n        \"boolean\",\n        \"object\"\n    ],\n    allowUndefined: true,\n    trackErrors: true,\n    error,\n    code (cxt) {\n        const { gen, schema, parentSchema, data, errsCount, it } = cxt;\n        /* istanbul ignore if */ if (!errsCount) throw new Error(\"ajv implementation error\");\n        const { allErrors, opts } = it;\n        it.props = true;\n        if (opts.removeAdditional !== \"all\" && (0, util_1.alwaysValidSchema)(it, schema)) return;\n        const props = (0, code_1.allSchemaProperties)(parentSchema.properties);\n        const patProps = (0, code_1.allSchemaProperties)(parentSchema.patternProperties);\n        checkAdditionalProperties();\n        cxt.ok((0, codegen_1._)`${errsCount} === ${names_1.default.errors}`);\n        function checkAdditionalProperties() {\n            gen.forIn(\"key\", data, (key)=>{\n                if (!props.length && !patProps.length) additionalPropertyCode(key);\n                else gen.if(isAdditional(key), ()=>additionalPropertyCode(key));\n            });\n        }\n        function isAdditional(key) {\n            let definedProp;\n            if (props.length > 8) {\n                // TODO maybe an option instead of hard-coded 8?\n                const propsSchema = (0, util_1.schemaRefOrVal)(it, parentSchema.properties, \"properties\");\n                definedProp = (0, code_1.isOwnProperty)(gen, propsSchema, key);\n            } else if (props.length) {\n                definedProp = (0, codegen_1.or)(...props.map((p)=>(0, codegen_1._)`${key} === ${p}`));\n            } else {\n                definedProp = codegen_1.nil;\n            }\n            if (patProps.length) {\n                definedProp = (0, codegen_1.or)(definedProp, ...patProps.map((p)=>(0, codegen_1._)`${(0, code_1.usePattern)(cxt, p)}.test(${key})`));\n            }\n            return (0, codegen_1.not)(definedProp);\n        }\n        function deleteAdditional(key) {\n            gen.code((0, codegen_1._)`delete ${data}[${key}]`);\n        }\n        function additionalPropertyCode(key) {\n            if (opts.removeAdditional === \"all\" || opts.removeAdditional && schema === false) {\n                deleteAdditional(key);\n                return;\n            }\n            if (schema === false) {\n                cxt.setParams({\n                    additionalProperty: key\n                });\n                cxt.error();\n                if (!allErrors) gen.break();\n                return;\n            }\n            if (typeof schema == \"object\" && !(0, util_1.alwaysValidSchema)(it, schema)) {\n                const valid = gen.name(\"valid\");\n                if (opts.removeAdditional === \"failing\") {\n                    applyAdditionalSchema(key, valid, false);\n                    gen.if((0, codegen_1.not)(valid), ()=>{\n                        cxt.reset();\n                        deleteAdditional(key);\n                    });\n                } else {\n                    applyAdditionalSchema(key, valid);\n                    if (!allErrors) gen.if((0, codegen_1.not)(valid), ()=>gen.break());\n                }\n            }\n        }\n        function applyAdditionalSchema(key, valid, errors) {\n            const subschema = {\n                keyword: \"additionalProperties\",\n                dataProp: key,\n                dataPropType: util_1.Type.Str\n            };\n            if (errors === false) {\n                Object.assign(subschema, {\n                    compositeRule: true,\n                    createErrors: false,\n                    allErrors: false\n                });\n            }\n            cxt.subschema(subschema, valid);\n        }\n    }\n};\nexports[\"default\"] = def; //# sourceMappingURL=additionalProperties.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/applicator/additionalProperties.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/applicator/allOf.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/applicator/allOf.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst util_1 = __webpack_require__(/*! ../../compile/util */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/util.js\");\nconst def = {\n    keyword: \"allOf\",\n    schemaType: \"array\",\n    code (cxt) {\n        const { gen, schema, it } = cxt;\n        /* istanbul ignore if */ if (!Array.isArray(schema)) throw new Error(\"ajv implementation error\");\n        const valid = gen.name(\"valid\");\n        schema.forEach((sch, i)=>{\n            if ((0, util_1.alwaysValidSchema)(it, sch)) return;\n            const schCxt = cxt.subschema({\n                keyword: \"allOf\",\n                schemaProp: i\n            }, valid);\n            cxt.ok(valid);\n            cxt.mergeEvaluated(schCxt);\n        });\n    }\n};\nexports[\"default\"] = def; //# sourceMappingURL=allOf.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG5lYXItanMvYWNjb3VudHMvbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L3ZvY2FidWxhcmllcy9hcHBsaWNhdG9yL2FsbE9mLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdELE1BQU1DLFNBQVNDLG1CQUFPQSxDQUFDLHdHQUFvQjtBQUMzQyxNQUFNQyxNQUFNO0lBQ1JDLFNBQVM7SUFDVEMsWUFBWTtJQUNaQyxNQUFLQyxHQUFHO1FBQ0osTUFBTSxFQUFFQyxHQUFHLEVBQUVDLE1BQU0sRUFBRUMsRUFBRSxFQUFFLEdBQUdIO1FBQzVCLHNCQUFzQixHQUN0QixJQUFJLENBQUNJLE1BQU1DLE9BQU8sQ0FBQ0gsU0FDZixNQUFNLElBQUlJLE1BQU07UUFDcEIsTUFBTUMsUUFBUU4sSUFBSU8sSUFBSSxDQUFDO1FBQ3ZCTixPQUFPTyxPQUFPLENBQUMsQ0FBQ0MsS0FBS0M7WUFDakIsSUFBSSxDQUFDLEdBQUdqQixPQUFPa0IsaUJBQWlCLEVBQUVULElBQUlPLE1BQ2xDO1lBQ0osTUFBTUcsU0FBU2IsSUFBSWMsU0FBUyxDQUFDO2dCQUFFakIsU0FBUztnQkFBU2tCLFlBQVlKO1lBQUUsR0FBR0o7WUFDbEVQLElBQUlnQixFQUFFLENBQUNUO1lBQ1BQLElBQUlpQixjQUFjLENBQUNKO1FBQ3ZCO0lBQ0o7QUFDSjtBQUNBckIsa0JBQWUsR0FBR0ksS0FDbEIsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaS1hbS1uZWFyYnkvLi9ub2RlX21vZHVsZXMvQG5lYXItanMvYWNjb3VudHMvbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L3ZvY2FidWxhcmllcy9hcHBsaWNhdG9yL2FsbE9mLmpzPzcyNWYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCB1dGlsXzEgPSByZXF1aXJlKFwiLi4vLi4vY29tcGlsZS91dGlsXCIpO1xuY29uc3QgZGVmID0ge1xuICAgIGtleXdvcmQ6IFwiYWxsT2ZcIixcbiAgICBzY2hlbWFUeXBlOiBcImFycmF5XCIsXG4gICAgY29kZShjeHQpIHtcbiAgICAgICAgY29uc3QgeyBnZW4sIHNjaGVtYSwgaXQgfSA9IGN4dDtcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgIGlmICghQXJyYXkuaXNBcnJheShzY2hlbWEpKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiYWp2IGltcGxlbWVudGF0aW9uIGVycm9yXCIpO1xuICAgICAgICBjb25zdCB2YWxpZCA9IGdlbi5uYW1lKFwidmFsaWRcIik7XG4gICAgICAgIHNjaGVtYS5mb3JFYWNoKChzY2gsIGkpID0+IHtcbiAgICAgICAgICAgIGlmICgoMCwgdXRpbF8xLmFsd2F5c1ZhbGlkU2NoZW1hKShpdCwgc2NoKSlcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICBjb25zdCBzY2hDeHQgPSBjeHQuc3Vic2NoZW1hKHsga2V5d29yZDogXCJhbGxPZlwiLCBzY2hlbWFQcm9wOiBpIH0sIHZhbGlkKTtcbiAgICAgICAgICAgIGN4dC5vayh2YWxpZCk7XG4gICAgICAgICAgICBjeHQubWVyZ2VFdmFsdWF0ZWQoc2NoQ3h0KTtcbiAgICAgICAgfSk7XG4gICAgfSxcbn07XG5leHBvcnRzLmRlZmF1bHQgPSBkZWY7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hbGxPZi5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJ1dGlsXzEiLCJyZXF1aXJlIiwiZGVmIiwia2V5d29yZCIsInNjaGVtYVR5cGUiLCJjb2RlIiwiY3h0IiwiZ2VuIiwic2NoZW1hIiwiaXQiLCJBcnJheSIsImlzQXJyYXkiLCJFcnJvciIsInZhbGlkIiwibmFtZSIsImZvckVhY2giLCJzY2giLCJpIiwiYWx3YXlzVmFsaWRTY2hlbWEiLCJzY2hDeHQiLCJzdWJzY2hlbWEiLCJzY2hlbWFQcm9wIiwib2siLCJtZXJnZUV2YWx1YXRlZCIsImRlZmF1bHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/applicator/allOf.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/applicator/anyOf.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/applicator/anyOf.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst code_1 = __webpack_require__(/*! ../code */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/code.js\");\nconst def = {\n    keyword: \"anyOf\",\n    schemaType: \"array\",\n    trackErrors: true,\n    code: code_1.validateUnion,\n    error: {\n        message: \"must match a schema in anyOf\"\n    }\n};\nexports[\"default\"] = def; //# sourceMappingURL=anyOf.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG5lYXItanMvYWNjb3VudHMvbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L3ZvY2FidWxhcmllcy9hcHBsaWNhdG9yL2FueU9mLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdELE1BQU1DLFNBQVNDLG1CQUFPQSxDQUFDLGtHQUFTO0FBQ2hDLE1BQU1DLE1BQU07SUFDUkMsU0FBUztJQUNUQyxZQUFZO0lBQ1pDLGFBQWE7SUFDYkMsTUFBTU4sT0FBT08sYUFBYTtJQUMxQkMsT0FBTztRQUFFQyxTQUFTO0lBQStCO0FBQ3JEO0FBQ0FYLGtCQUFlLEdBQUdJLEtBQ2xCLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL2ktYW0tbmVhcmJ5Ly4vbm9kZV9tb2R1bGVzL0BuZWFyLWpzL2FjY291bnRzL25vZGVfbW9kdWxlcy9hanYvZGlzdC92b2NhYnVsYXJpZXMvYXBwbGljYXRvci9hbnlPZi5qcz9iYTBkIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgY29kZV8xID0gcmVxdWlyZShcIi4uL2NvZGVcIik7XG5jb25zdCBkZWYgPSB7XG4gICAga2V5d29yZDogXCJhbnlPZlwiLFxuICAgIHNjaGVtYVR5cGU6IFwiYXJyYXlcIixcbiAgICB0cmFja0Vycm9yczogdHJ1ZSxcbiAgICBjb2RlOiBjb2RlXzEudmFsaWRhdGVVbmlvbixcbiAgICBlcnJvcjogeyBtZXNzYWdlOiBcIm11c3QgbWF0Y2ggYSBzY2hlbWEgaW4gYW55T2ZcIiB9LFxufTtcbmV4cG9ydHMuZGVmYXVsdCA9IGRlZjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFueU9mLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImNvZGVfMSIsInJlcXVpcmUiLCJkZWYiLCJrZXl3b3JkIiwic2NoZW1hVHlwZSIsInRyYWNrRXJyb3JzIiwiY29kZSIsInZhbGlkYXRlVW5pb24iLCJlcnJvciIsIm1lc3NhZ2UiLCJkZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/applicator/anyOf.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/applicator/contains.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/applicator/contains.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst codegen_1 = __webpack_require__(/*! ../../compile/codegen */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/codegen/index.js\");\nconst util_1 = __webpack_require__(/*! ../../compile/util */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/util.js\");\nconst error = {\n    message: ({ params: { min, max } })=>max === undefined ? (0, codegen_1.str)`must contain at least ${min} valid item(s)` : (0, codegen_1.str)`must contain at least ${min} and no more than ${max} valid item(s)`,\n    params: ({ params: { min, max } })=>max === undefined ? (0, codegen_1._)`{minContains: ${min}}` : (0, codegen_1._)`{minContains: ${min}, maxContains: ${max}}`\n};\nconst def = {\n    keyword: \"contains\",\n    type: \"array\",\n    schemaType: [\n        \"object\",\n        \"boolean\"\n    ],\n    before: \"uniqueItems\",\n    trackErrors: true,\n    error,\n    code (cxt) {\n        const { gen, schema, parentSchema, data, it } = cxt;\n        let min;\n        let max;\n        const { minContains, maxContains } = parentSchema;\n        if (it.opts.next) {\n            min = minContains === undefined ? 1 : minContains;\n            max = maxContains;\n        } else {\n            min = 1;\n        }\n        const len = gen.const(\"len\", (0, codegen_1._)`${data}.length`);\n        cxt.setParams({\n            min,\n            max\n        });\n        if (max === undefined && min === 0) {\n            (0, util_1.checkStrictMode)(it, `\"minContains\" == 0 without \"maxContains\": \"contains\" keyword ignored`);\n            return;\n        }\n        if (max !== undefined && min > max) {\n            (0, util_1.checkStrictMode)(it, `\"minContains\" > \"maxContains\" is always invalid`);\n            cxt.fail();\n            return;\n        }\n        if ((0, util_1.alwaysValidSchema)(it, schema)) {\n            let cond = (0, codegen_1._)`${len} >= ${min}`;\n            if (max !== undefined) cond = (0, codegen_1._)`${cond} && ${len} <= ${max}`;\n            cxt.pass(cond);\n            return;\n        }\n        it.items = true;\n        const valid = gen.name(\"valid\");\n        if (max === undefined && min === 1) {\n            validateItems(valid, ()=>gen.if(valid, ()=>gen.break()));\n        } else if (min === 0) {\n            gen.let(valid, true);\n            if (max !== undefined) gen.if((0, codegen_1._)`${data}.length > 0`, validateItemsWithCount);\n        } else {\n            gen.let(valid, false);\n            validateItemsWithCount();\n        }\n        cxt.result(valid, ()=>cxt.reset());\n        function validateItemsWithCount() {\n            const schValid = gen.name(\"_valid\");\n            const count = gen.let(\"count\", 0);\n            validateItems(schValid, ()=>gen.if(schValid, ()=>checkLimits(count)));\n        }\n        function validateItems(_valid, block) {\n            gen.forRange(\"i\", 0, len, (i)=>{\n                cxt.subschema({\n                    keyword: \"contains\",\n                    dataProp: i,\n                    dataPropType: util_1.Type.Num,\n                    compositeRule: true\n                }, _valid);\n                block();\n            });\n        }\n        function checkLimits(count) {\n            gen.code((0, codegen_1._)`${count}++`);\n            if (max === undefined) {\n                gen.if((0, codegen_1._)`${count} >= ${min}`, ()=>gen.assign(valid, true).break());\n            } else {\n                gen.if((0, codegen_1._)`${count} > ${max}`, ()=>gen.assign(valid, false).break());\n                if (min === 1) gen.assign(valid, true);\n                else gen.if((0, codegen_1._)`${count} >= ${min}`, ()=>gen.assign(valid, true));\n            }\n        }\n    }\n};\nexports[\"default\"] = def; //# sourceMappingURL=contains.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG5lYXItanMvYWNjb3VudHMvbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L3ZvY2FidWxhcmllcy9hcHBsaWNhdG9yL2NvbnRhaW5zLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdELE1BQU1DLFlBQVlDLG1CQUFPQSxDQUFDLG9IQUF1QjtBQUNqRCxNQUFNQyxTQUFTRCxtQkFBT0EsQ0FBQyx3R0FBb0I7QUFDM0MsTUFBTUUsUUFBUTtJQUNWQyxTQUFTLENBQUMsRUFBRUMsUUFBUSxFQUFFQyxHQUFHLEVBQUVDLEdBQUcsRUFBRSxFQUFFLEdBQUtBLFFBQVFDLFlBQ3pDLENBQUMsR0FBR1IsVUFBVVMsR0FBRyxDQUFFLENBQUMsc0JBQXNCLEVBQUVILElBQUksY0FBYyxDQUFDLEdBQy9ELENBQUMsR0FBR04sVUFBVVMsR0FBRyxDQUFFLENBQUMsc0JBQXNCLEVBQUVILElBQUksa0JBQWtCLEVBQUVDLElBQUksY0FBYyxDQUFDO0lBQzdGRixRQUFRLENBQUMsRUFBRUEsUUFBUSxFQUFFQyxHQUFHLEVBQUVDLEdBQUcsRUFBRSxFQUFFLEdBQUtBLFFBQVFDLFlBQVksQ0FBQyxHQUFHUixVQUFVVSxDQUFDLENBQUUsQ0FBQyxjQUFjLEVBQUVKLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHTixVQUFVVSxDQUFDLENBQUUsQ0FBQyxjQUFjLEVBQUVKLElBQUksZUFBZSxFQUFFQyxJQUFJLENBQUMsQ0FBQztBQUN0SztBQUNBLE1BQU1JLE1BQU07SUFDUkMsU0FBUztJQUNUQyxNQUFNO0lBQ05DLFlBQVk7UUFBQztRQUFVO0tBQVU7SUFDakNDLFFBQVE7SUFDUkMsYUFBYTtJQUNiYjtJQUNBYyxNQUFLQyxHQUFHO1FBQ0osTUFBTSxFQUFFQyxHQUFHLEVBQUVDLE1BQU0sRUFBRUMsWUFBWSxFQUFFQyxJQUFJLEVBQUVDLEVBQUUsRUFBRSxHQUFHTDtRQUNoRCxJQUFJWjtRQUNKLElBQUlDO1FBQ0osTUFBTSxFQUFFaUIsV0FBVyxFQUFFQyxXQUFXLEVBQUUsR0FBR0o7UUFDckMsSUFBSUUsR0FBR0csSUFBSSxDQUFDQyxJQUFJLEVBQUU7WUFDZHJCLE1BQU1rQixnQkFBZ0JoQixZQUFZLElBQUlnQjtZQUN0Q2pCLE1BQU1rQjtRQUNWLE9BQ0s7WUFDRG5CLE1BQU07UUFDVjtRQUNBLE1BQU1zQixNQUFNVCxJQUFJVSxLQUFLLENBQUMsT0FBTyxDQUFDLEdBQUc3QixVQUFVVSxDQUFDLENBQUUsQ0FBQyxFQUFFWSxLQUFLLE9BQU8sQ0FBQztRQUM5REosSUFBSVksU0FBUyxDQUFDO1lBQUV4QjtZQUFLQztRQUFJO1FBQ3pCLElBQUlBLFFBQVFDLGFBQWFGLFFBQVEsR0FBRztZQUMvQixJQUFHSixPQUFPNkIsZUFBZSxFQUFFUixJQUFJLENBQUMsb0VBQW9FLENBQUM7WUFDdEc7UUFDSjtRQUNBLElBQUloQixRQUFRQyxhQUFhRixNQUFNQyxLQUFLO1lBQy9CLElBQUdMLE9BQU82QixlQUFlLEVBQUVSLElBQUksQ0FBQywrQ0FBK0MsQ0FBQztZQUNqRkwsSUFBSWMsSUFBSTtZQUNSO1FBQ0o7UUFDQSxJQUFJLENBQUMsR0FBRzlCLE9BQU8rQixpQkFBaUIsRUFBRVYsSUFBSUgsU0FBUztZQUMzQyxJQUFJYyxPQUFPLENBQUMsR0FBR2xDLFVBQVVVLENBQUMsQ0FBRSxDQUFDLEVBQUVrQixJQUFJLElBQUksRUFBRXRCLElBQUksQ0FBQztZQUM5QyxJQUFJQyxRQUFRQyxXQUNSMEIsT0FBTyxDQUFDLEdBQUdsQyxVQUFVVSxDQUFDLENBQUUsQ0FBQyxFQUFFd0IsS0FBSyxJQUFJLEVBQUVOLElBQUksSUFBSSxFQUFFckIsSUFBSSxDQUFDO1lBQ3pEVyxJQUFJaUIsSUFBSSxDQUFDRDtZQUNUO1FBQ0o7UUFDQVgsR0FBR2EsS0FBSyxHQUFHO1FBQ1gsTUFBTUMsUUFBUWxCLElBQUltQixJQUFJLENBQUM7UUFDdkIsSUFBSS9CLFFBQVFDLGFBQWFGLFFBQVEsR0FBRztZQUNoQ2lDLGNBQWNGLE9BQU8sSUFBTWxCLElBQUlxQixFQUFFLENBQUNILE9BQU8sSUFBTWxCLElBQUlzQixLQUFLO1FBQzVELE9BQ0ssSUFBSW5DLFFBQVEsR0FBRztZQUNoQmEsSUFBSXVCLEdBQUcsQ0FBQ0wsT0FBTztZQUNmLElBQUk5QixRQUFRQyxXQUNSVyxJQUFJcUIsRUFBRSxDQUFDLENBQUMsR0FBR3hDLFVBQVVVLENBQUMsQ0FBRSxDQUFDLEVBQUVZLEtBQUssV0FBVyxDQUFDLEVBQUVxQjtRQUN0RCxPQUNLO1lBQ0R4QixJQUFJdUIsR0FBRyxDQUFDTCxPQUFPO1lBQ2ZNO1FBQ0o7UUFDQXpCLElBQUkwQixNQUFNLENBQUNQLE9BQU8sSUFBTW5CLElBQUkyQixLQUFLO1FBQ2pDLFNBQVNGO1lBQ0wsTUFBTUcsV0FBVzNCLElBQUltQixJQUFJLENBQUM7WUFDMUIsTUFBTVMsUUFBUTVCLElBQUl1QixHQUFHLENBQUMsU0FBUztZQUMvQkgsY0FBY08sVUFBVSxJQUFNM0IsSUFBSXFCLEVBQUUsQ0FBQ00sVUFBVSxJQUFNRSxZQUFZRDtRQUNyRTtRQUNBLFNBQVNSLGNBQWNVLE1BQU0sRUFBRUMsS0FBSztZQUNoQy9CLElBQUlnQyxRQUFRLENBQUMsS0FBSyxHQUFHdkIsS0FBSyxDQUFDd0I7Z0JBQ3ZCbEMsSUFBSW1DLFNBQVMsQ0FBQztvQkFDVnpDLFNBQVM7b0JBQ1QwQyxVQUFVRjtvQkFDVkcsY0FBY3JELE9BQU9zRCxJQUFJLENBQUNDLEdBQUc7b0JBQzdCQyxlQUFlO2dCQUNuQixHQUFHVDtnQkFDSEM7WUFDSjtRQUNKO1FBQ0EsU0FBU0YsWUFBWUQsS0FBSztZQUN0QjVCLElBQUlGLElBQUksQ0FBQyxDQUFDLEdBQUdqQixVQUFVVSxDQUFDLENBQUUsQ0FBQyxFQUFFcUMsTUFBTSxFQUFFLENBQUM7WUFDdEMsSUFBSXhDLFFBQVFDLFdBQVc7Z0JBQ25CVyxJQUFJcUIsRUFBRSxDQUFDLENBQUMsR0FBR3hDLFVBQVVVLENBQUMsQ0FBRSxDQUFDLEVBQUVxQyxNQUFNLElBQUksRUFBRXpDLElBQUksQ0FBQyxFQUFFLElBQU1hLElBQUl3QyxNQUFNLENBQUN0QixPQUFPLE1BQU1JLEtBQUs7WUFDckYsT0FDSztnQkFDRHRCLElBQUlxQixFQUFFLENBQUMsQ0FBQyxHQUFHeEMsVUFBVVUsQ0FBQyxDQUFFLENBQUMsRUFBRXFDLE1BQU0sR0FBRyxFQUFFeEMsSUFBSSxDQUFDLEVBQUUsSUFBTVksSUFBSXdDLE1BQU0sQ0FBQ3RCLE9BQU8sT0FBT0ksS0FBSztnQkFDakYsSUFBSW5DLFFBQVEsR0FDUmEsSUFBSXdDLE1BQU0sQ0FBQ3RCLE9BQU87cUJBRWxCbEIsSUFBSXFCLEVBQUUsQ0FBQyxDQUFDLEdBQUd4QyxVQUFVVSxDQUFDLENBQUUsQ0FBQyxFQUFFcUMsTUFBTSxJQUFJLEVBQUV6QyxJQUFJLENBQUMsRUFBRSxJQUFNYSxJQUFJd0MsTUFBTSxDQUFDdEIsT0FBTztZQUM5RTtRQUNKO0lBQ0o7QUFDSjtBQUNBdkMsa0JBQWUsR0FBR2EsS0FDbEIsb0NBQW9DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaS1hbS1uZWFyYnkvLi9ub2RlX21vZHVsZXMvQG5lYXItanMvYWNjb3VudHMvbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L3ZvY2FidWxhcmllcy9hcHBsaWNhdG9yL2NvbnRhaW5zLmpzP2FiMTYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBjb2RlZ2VuXzEgPSByZXF1aXJlKFwiLi4vLi4vY29tcGlsZS9jb2RlZ2VuXCIpO1xuY29uc3QgdXRpbF8xID0gcmVxdWlyZShcIi4uLy4uL2NvbXBpbGUvdXRpbFwiKTtcbmNvbnN0IGVycm9yID0ge1xuICAgIG1lc3NhZ2U6ICh7IHBhcmFtczogeyBtaW4sIG1heCB9IH0pID0+IG1heCA9PT0gdW5kZWZpbmVkXG4gICAgICAgID8gKDAsIGNvZGVnZW5fMS5zdHIpIGBtdXN0IGNvbnRhaW4gYXQgbGVhc3QgJHttaW59IHZhbGlkIGl0ZW0ocylgXG4gICAgICAgIDogKDAsIGNvZGVnZW5fMS5zdHIpIGBtdXN0IGNvbnRhaW4gYXQgbGVhc3QgJHttaW59IGFuZCBubyBtb3JlIHRoYW4gJHttYXh9IHZhbGlkIGl0ZW0ocylgLFxuICAgIHBhcmFtczogKHsgcGFyYW1zOiB7IG1pbiwgbWF4IH0gfSkgPT4gbWF4ID09PSB1bmRlZmluZWQgPyAoMCwgY29kZWdlbl8xLl8pIGB7bWluQ29udGFpbnM6ICR7bWlufX1gIDogKDAsIGNvZGVnZW5fMS5fKSBge21pbkNvbnRhaW5zOiAke21pbn0sIG1heENvbnRhaW5zOiAke21heH19YCxcbn07XG5jb25zdCBkZWYgPSB7XG4gICAga2V5d29yZDogXCJjb250YWluc1wiLFxuICAgIHR5cGU6IFwiYXJyYXlcIixcbiAgICBzY2hlbWFUeXBlOiBbXCJvYmplY3RcIiwgXCJib29sZWFuXCJdLFxuICAgIGJlZm9yZTogXCJ1bmlxdWVJdGVtc1wiLFxuICAgIHRyYWNrRXJyb3JzOiB0cnVlLFxuICAgIGVycm9yLFxuICAgIGNvZGUoY3h0KSB7XG4gICAgICAgIGNvbnN0IHsgZ2VuLCBzY2hlbWEsIHBhcmVudFNjaGVtYSwgZGF0YSwgaXQgfSA9IGN4dDtcbiAgICAgICAgbGV0IG1pbjtcbiAgICAgICAgbGV0IG1heDtcbiAgICAgICAgY29uc3QgeyBtaW5Db250YWlucywgbWF4Q29udGFpbnMgfSA9IHBhcmVudFNjaGVtYTtcbiAgICAgICAgaWYgKGl0Lm9wdHMubmV4dCkge1xuICAgICAgICAgICAgbWluID0gbWluQ29udGFpbnMgPT09IHVuZGVmaW5lZCA/IDEgOiBtaW5Db250YWlucztcbiAgICAgICAgICAgIG1heCA9IG1heENvbnRhaW5zO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgbWluID0gMTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBsZW4gPSBnZW4uY29uc3QoXCJsZW5cIiwgKDAsIGNvZGVnZW5fMS5fKSBgJHtkYXRhfS5sZW5ndGhgKTtcbiAgICAgICAgY3h0LnNldFBhcmFtcyh7IG1pbiwgbWF4IH0pO1xuICAgICAgICBpZiAobWF4ID09PSB1bmRlZmluZWQgJiYgbWluID09PSAwKSB7XG4gICAgICAgICAgICAoMCwgdXRpbF8xLmNoZWNrU3RyaWN0TW9kZSkoaXQsIGBcIm1pbkNvbnRhaW5zXCIgPT0gMCB3aXRob3V0IFwibWF4Q29udGFpbnNcIjogXCJjb250YWluc1wiIGtleXdvcmQgaWdub3JlZGApO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtYXggIT09IHVuZGVmaW5lZCAmJiBtaW4gPiBtYXgpIHtcbiAgICAgICAgICAgICgwLCB1dGlsXzEuY2hlY2tTdHJpY3RNb2RlKShpdCwgYFwibWluQ29udGFpbnNcIiA+IFwibWF4Q29udGFpbnNcIiBpcyBhbHdheXMgaW52YWxpZGApO1xuICAgICAgICAgICAgY3h0LmZhaWwoKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoKDAsIHV0aWxfMS5hbHdheXNWYWxpZFNjaGVtYSkoaXQsIHNjaGVtYSkpIHtcbiAgICAgICAgICAgIGxldCBjb25kID0gKDAsIGNvZGVnZW5fMS5fKSBgJHtsZW59ID49ICR7bWlufWA7XG4gICAgICAgICAgICBpZiAobWF4ICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICAgICAgY29uZCA9ICgwLCBjb2RlZ2VuXzEuXykgYCR7Y29uZH0gJiYgJHtsZW59IDw9ICR7bWF4fWA7XG4gICAgICAgICAgICBjeHQucGFzcyhjb25kKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpdC5pdGVtcyA9IHRydWU7XG4gICAgICAgIGNvbnN0IHZhbGlkID0gZ2VuLm5hbWUoXCJ2YWxpZFwiKTtcbiAgICAgICAgaWYgKG1heCA9PT0gdW5kZWZpbmVkICYmIG1pbiA9PT0gMSkge1xuICAgICAgICAgICAgdmFsaWRhdGVJdGVtcyh2YWxpZCwgKCkgPT4gZ2VuLmlmKHZhbGlkLCAoKSA9PiBnZW4uYnJlYWsoKSkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKG1pbiA9PT0gMCkge1xuICAgICAgICAgICAgZ2VuLmxldCh2YWxpZCwgdHJ1ZSk7XG4gICAgICAgICAgICBpZiAobWF4ICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICAgICAgZ2VuLmlmKCgwLCBjb2RlZ2VuXzEuXykgYCR7ZGF0YX0ubGVuZ3RoID4gMGAsIHZhbGlkYXRlSXRlbXNXaXRoQ291bnQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZ2VuLmxldCh2YWxpZCwgZmFsc2UpO1xuICAgICAgICAgICAgdmFsaWRhdGVJdGVtc1dpdGhDb3VudCgpO1xuICAgICAgICB9XG4gICAgICAgIGN4dC5yZXN1bHQodmFsaWQsICgpID0+IGN4dC5yZXNldCgpKTtcbiAgICAgICAgZnVuY3Rpb24gdmFsaWRhdGVJdGVtc1dpdGhDb3VudCgpIHtcbiAgICAgICAgICAgIGNvbnN0IHNjaFZhbGlkID0gZ2VuLm5hbWUoXCJfdmFsaWRcIik7XG4gICAgICAgICAgICBjb25zdCBjb3VudCA9IGdlbi5sZXQoXCJjb3VudFwiLCAwKTtcbiAgICAgICAgICAgIHZhbGlkYXRlSXRlbXMoc2NoVmFsaWQsICgpID0+IGdlbi5pZihzY2hWYWxpZCwgKCkgPT4gY2hlY2tMaW1pdHMoY291bnQpKSk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gdmFsaWRhdGVJdGVtcyhfdmFsaWQsIGJsb2NrKSB7XG4gICAgICAgICAgICBnZW4uZm9yUmFuZ2UoXCJpXCIsIDAsIGxlbiwgKGkpID0+IHtcbiAgICAgICAgICAgICAgICBjeHQuc3Vic2NoZW1hKHtcbiAgICAgICAgICAgICAgICAgICAga2V5d29yZDogXCJjb250YWluc1wiLFxuICAgICAgICAgICAgICAgICAgICBkYXRhUHJvcDogaSxcbiAgICAgICAgICAgICAgICAgICAgZGF0YVByb3BUeXBlOiB1dGlsXzEuVHlwZS5OdW0sXG4gICAgICAgICAgICAgICAgICAgIGNvbXBvc2l0ZVJ1bGU6IHRydWUsXG4gICAgICAgICAgICAgICAgfSwgX3ZhbGlkKTtcbiAgICAgICAgICAgICAgICBibG9jaygpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gY2hlY2tMaW1pdHMoY291bnQpIHtcbiAgICAgICAgICAgIGdlbi5jb2RlKCgwLCBjb2RlZ2VuXzEuXykgYCR7Y291bnR9KytgKTtcbiAgICAgICAgICAgIGlmIChtYXggPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGdlbi5pZigoMCwgY29kZWdlbl8xLl8pIGAke2NvdW50fSA+PSAke21pbn1gLCAoKSA9PiBnZW4uYXNzaWduKHZhbGlkLCB0cnVlKS5icmVhaygpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGdlbi5pZigoMCwgY29kZWdlbl8xLl8pIGAke2NvdW50fSA+ICR7bWF4fWAsICgpID0+IGdlbi5hc3NpZ24odmFsaWQsIGZhbHNlKS5icmVhaygpKTtcbiAgICAgICAgICAgICAgICBpZiAobWluID09PSAxKVxuICAgICAgICAgICAgICAgICAgICBnZW4uYXNzaWduKHZhbGlkLCB0cnVlKTtcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIGdlbi5pZigoMCwgY29kZWdlbl8xLl8pIGAke2NvdW50fSA+PSAke21pbn1gLCAoKSA9PiBnZW4uYXNzaWduKHZhbGlkLCB0cnVlKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LFxufTtcbmV4cG9ydHMuZGVmYXVsdCA9IGRlZjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbnRhaW5zLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImNvZGVnZW5fMSIsInJlcXVpcmUiLCJ1dGlsXzEiLCJlcnJvciIsIm1lc3NhZ2UiLCJwYXJhbXMiLCJtaW4iLCJtYXgiLCJ1bmRlZmluZWQiLCJzdHIiLCJfIiwiZGVmIiwia2V5d29yZCIsInR5cGUiLCJzY2hlbWFUeXBlIiwiYmVmb3JlIiwidHJhY2tFcnJvcnMiLCJjb2RlIiwiY3h0IiwiZ2VuIiwic2NoZW1hIiwicGFyZW50U2NoZW1hIiwiZGF0YSIsIml0IiwibWluQ29udGFpbnMiLCJtYXhDb250YWlucyIsIm9wdHMiLCJuZXh0IiwibGVuIiwiY29uc3QiLCJzZXRQYXJhbXMiLCJjaGVja1N0cmljdE1vZGUiLCJmYWlsIiwiYWx3YXlzVmFsaWRTY2hlbWEiLCJjb25kIiwicGFzcyIsIml0ZW1zIiwidmFsaWQiLCJuYW1lIiwidmFsaWRhdGVJdGVtcyIsImlmIiwiYnJlYWsiLCJsZXQiLCJ2YWxpZGF0ZUl0ZW1zV2l0aENvdW50IiwicmVzdWx0IiwicmVzZXQiLCJzY2hWYWxpZCIsImNvdW50IiwiY2hlY2tMaW1pdHMiLCJfdmFsaWQiLCJibG9jayIsImZvclJhbmdlIiwiaSIsInN1YnNjaGVtYSIsImRhdGFQcm9wIiwiZGF0YVByb3BUeXBlIiwiVHlwZSIsIk51bSIsImNvbXBvc2l0ZVJ1bGUiLCJhc3NpZ24iLCJkZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/applicator/contains.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/applicator/dependencies.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/applicator/dependencies.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.validateSchemaDeps = exports.validatePropertyDeps = exports.error = void 0;\nconst codegen_1 = __webpack_require__(/*! ../../compile/codegen */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/codegen/index.js\");\nconst util_1 = __webpack_require__(/*! ../../compile/util */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/util.js\");\nconst code_1 = __webpack_require__(/*! ../code */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/code.js\");\nexports.error = {\n    message: ({ params: { property, depsCount, deps } })=>{\n        const property_ies = depsCount === 1 ? \"property\" : \"properties\";\n        return (0, codegen_1.str)`must have ${property_ies} ${deps} when property ${property} is present`;\n    },\n    params: ({ params: { property, depsCount, deps, missingProperty } })=>(0, codegen_1._)`{property: ${property},\n    missingProperty: ${missingProperty},\n    depsCount: ${depsCount},\n    deps: ${deps}}`\n};\nconst def = {\n    keyword: \"dependencies\",\n    type: \"object\",\n    schemaType: \"object\",\n    error: exports.error,\n    code (cxt) {\n        const [propDeps, schDeps] = splitDependencies(cxt);\n        validatePropertyDeps(cxt, propDeps);\n        validateSchemaDeps(cxt, schDeps);\n    }\n};\nfunction splitDependencies({ schema }) {\n    const propertyDeps = {};\n    const schemaDeps = {};\n    for(const key in schema){\n        if (key === \"__proto__\") continue;\n        const deps = Array.isArray(schema[key]) ? propertyDeps : schemaDeps;\n        deps[key] = schema[key];\n    }\n    return [\n        propertyDeps,\n        schemaDeps\n    ];\n}\nfunction validatePropertyDeps(cxt, propertyDeps = cxt.schema) {\n    const { gen, data, it } = cxt;\n    if (Object.keys(propertyDeps).length === 0) return;\n    const missing = gen.let(\"missing\");\n    for(const prop in propertyDeps){\n        const deps = propertyDeps[prop];\n        if (deps.length === 0) continue;\n        const hasProperty = (0, code_1.propertyInData)(gen, data, prop, it.opts.ownProperties);\n        cxt.setParams({\n            property: prop,\n            depsCount: deps.length,\n            deps: deps.join(\", \")\n        });\n        if (it.allErrors) {\n            gen.if(hasProperty, ()=>{\n                for (const depProp of deps){\n                    (0, code_1.checkReportMissingProp)(cxt, depProp);\n                }\n            });\n        } else {\n            gen.if((0, codegen_1._)`${hasProperty} && (${(0, code_1.checkMissingProp)(cxt, deps, missing)})`);\n            (0, code_1.reportMissingProp)(cxt, missing);\n            gen.else();\n        }\n    }\n}\nexports.validatePropertyDeps = validatePropertyDeps;\nfunction validateSchemaDeps(cxt, schemaDeps = cxt.schema) {\n    const { gen, data, keyword, it } = cxt;\n    const valid = gen.name(\"valid\");\n    for(const prop in schemaDeps){\n        if ((0, util_1.alwaysValidSchema)(it, schemaDeps[prop])) continue;\n        gen.if((0, code_1.propertyInData)(gen, data, prop, it.opts.ownProperties), ()=>{\n            const schCxt = cxt.subschema({\n                keyword,\n                schemaProp: prop\n            }, valid);\n            cxt.mergeValidEvaluated(schCxt, valid);\n        }, ()=>gen.var(valid, true) // TODO var\n        );\n        cxt.ok(valid);\n    }\n}\nexports.validateSchemaDeps = validateSchemaDeps;\nexports[\"default\"] = def; //# sourceMappingURL=dependencies.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/applicator/dependencies.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/applicator/if.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/applicator/if.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst codegen_1 = __webpack_require__(/*! ../../compile/codegen */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/codegen/index.js\");\nconst util_1 = __webpack_require__(/*! ../../compile/util */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/util.js\");\nconst error = {\n    message: ({ params })=>(0, codegen_1.str)`must match \"${params.ifClause}\" schema`,\n    params: ({ params })=>(0, codegen_1._)`{failingKeyword: ${params.ifClause}}`\n};\nconst def = {\n    keyword: \"if\",\n    schemaType: [\n        \"object\",\n        \"boolean\"\n    ],\n    trackErrors: true,\n    error,\n    code (cxt) {\n        const { gen, parentSchema, it } = cxt;\n        if (parentSchema.then === undefined && parentSchema.else === undefined) {\n            (0, util_1.checkStrictMode)(it, '\"if\" without \"then\" and \"else\" is ignored');\n        }\n        const hasThen = hasSchema(it, \"then\");\n        const hasElse = hasSchema(it, \"else\");\n        if (!hasThen && !hasElse) return;\n        const valid = gen.let(\"valid\", true);\n        const schValid = gen.name(\"_valid\");\n        validateIf();\n        cxt.reset();\n        if (hasThen && hasElse) {\n            const ifClause = gen.let(\"ifClause\");\n            cxt.setParams({\n                ifClause\n            });\n            gen.if(schValid, validateClause(\"then\", ifClause), validateClause(\"else\", ifClause));\n        } else if (hasThen) {\n            gen.if(schValid, validateClause(\"then\"));\n        } else {\n            gen.if((0, codegen_1.not)(schValid), validateClause(\"else\"));\n        }\n        cxt.pass(valid, ()=>cxt.error(true));\n        function validateIf() {\n            const schCxt = cxt.subschema({\n                keyword: \"if\",\n                compositeRule: true,\n                createErrors: false,\n                allErrors: false\n            }, schValid);\n            cxt.mergeEvaluated(schCxt);\n        }\n        function validateClause(keyword, ifClause) {\n            return ()=>{\n                const schCxt = cxt.subschema({\n                    keyword\n                }, schValid);\n                gen.assign(valid, schValid);\n                cxt.mergeValidEvaluated(schCxt, valid);\n                if (ifClause) gen.assign(ifClause, (0, codegen_1._)`${keyword}`);\n                else cxt.setParams({\n                    ifClause: keyword\n                });\n            };\n        }\n    }\n};\nfunction hasSchema(it, keyword) {\n    const schema = it.schema[keyword];\n    return schema !== undefined && !(0, util_1.alwaysValidSchema)(it, schema);\n}\nexports[\"default\"] = def; //# sourceMappingURL=if.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG5lYXItanMvYWNjb3VudHMvbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L3ZvY2FidWxhcmllcy9hcHBsaWNhdG9yL2lmLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdELE1BQU1DLFlBQVlDLG1CQUFPQSxDQUFDLG9IQUF1QjtBQUNqRCxNQUFNQyxTQUFTRCxtQkFBT0EsQ0FBQyx3R0FBb0I7QUFDM0MsTUFBTUUsUUFBUTtJQUNWQyxTQUFTLENBQUMsRUFBRUMsTUFBTSxFQUFFLEdBQUssQ0FBQyxHQUFHTCxVQUFVTSxHQUFHLENBQUUsQ0FBQyxZQUFZLEVBQUVELE9BQU9FLFFBQVEsQ0FBQyxRQUFRLENBQUM7SUFDcEZGLFFBQVEsQ0FBQyxFQUFFQSxNQUFNLEVBQUUsR0FBSyxDQUFDLEdBQUdMLFVBQVVRLENBQUMsQ0FBRSxDQUFDLGlCQUFpQixFQUFFSCxPQUFPRSxRQUFRLENBQUMsQ0FBQyxDQUFDO0FBQ25GO0FBQ0EsTUFBTUUsTUFBTTtJQUNSQyxTQUFTO0lBQ1RDLFlBQVk7UUFBQztRQUFVO0tBQVU7SUFDakNDLGFBQWE7SUFDYlQ7SUFDQVUsTUFBS0MsR0FBRztRQUNKLE1BQU0sRUFBRUMsR0FBRyxFQUFFQyxZQUFZLEVBQUVDLEVBQUUsRUFBRSxHQUFHSDtRQUNsQyxJQUFJRSxhQUFhRSxJQUFJLEtBQUtDLGFBQWFILGFBQWFJLElBQUksS0FBS0QsV0FBVztZQUNuRSxJQUFHakIsT0FBT21CLGVBQWUsRUFBRUosSUFBSTtRQUNwQztRQUNBLE1BQU1LLFVBQVVDLFVBQVVOLElBQUk7UUFDOUIsTUFBTU8sVUFBVUQsVUFBVU4sSUFBSTtRQUM5QixJQUFJLENBQUNLLFdBQVcsQ0FBQ0UsU0FDYjtRQUNKLE1BQU1DLFFBQVFWLElBQUlXLEdBQUcsQ0FBQyxTQUFTO1FBQy9CLE1BQU1DLFdBQVdaLElBQUlhLElBQUksQ0FBQztRQUMxQkM7UUFDQWYsSUFBSWdCLEtBQUs7UUFDVCxJQUFJUixXQUFXRSxTQUFTO1lBQ3BCLE1BQU1qQixXQUFXUSxJQUFJVyxHQUFHLENBQUM7WUFDekJaLElBQUlpQixTQUFTLENBQUM7Z0JBQUV4QjtZQUFTO1lBQ3pCUSxJQUFJaUIsRUFBRSxDQUFDTCxVQUFVTSxlQUFlLFFBQVExQixXQUFXMEIsZUFBZSxRQUFRMUI7UUFDOUUsT0FDSyxJQUFJZSxTQUFTO1lBQ2RQLElBQUlpQixFQUFFLENBQUNMLFVBQVVNLGVBQWU7UUFDcEMsT0FDSztZQUNEbEIsSUFBSWlCLEVBQUUsQ0FBQyxDQUFDLEdBQUdoQyxVQUFVa0MsR0FBRyxFQUFFUCxXQUFXTSxlQUFlO1FBQ3hEO1FBQ0FuQixJQUFJcUIsSUFBSSxDQUFDVixPQUFPLElBQU1YLElBQUlYLEtBQUssQ0FBQztRQUNoQyxTQUFTMEI7WUFDTCxNQUFNTyxTQUFTdEIsSUFBSXVCLFNBQVMsQ0FBQztnQkFDekIzQixTQUFTO2dCQUNUNEIsZUFBZTtnQkFDZkMsY0FBYztnQkFDZEMsV0FBVztZQUNmLEdBQUdiO1lBQ0hiLElBQUkyQixjQUFjLENBQUNMO1FBQ3ZCO1FBQ0EsU0FBU0gsZUFBZXZCLE9BQU8sRUFBRUgsUUFBUTtZQUNyQyxPQUFPO2dCQUNILE1BQU02QixTQUFTdEIsSUFBSXVCLFNBQVMsQ0FBQztvQkFBRTNCO2dCQUFRLEdBQUdpQjtnQkFDMUNaLElBQUkyQixNQUFNLENBQUNqQixPQUFPRTtnQkFDbEJiLElBQUk2QixtQkFBbUIsQ0FBQ1AsUUFBUVg7Z0JBQ2hDLElBQUlsQixVQUNBUSxJQUFJMkIsTUFBTSxDQUFDbkMsVUFBVSxDQUFDLEdBQUdQLFVBQVVRLENBQUMsQ0FBRSxDQUFDLEVBQUVFLFFBQVEsQ0FBQztxQkFFbERJLElBQUlpQixTQUFTLENBQUM7b0JBQUV4QixVQUFVRztnQkFBUTtZQUMxQztRQUNKO0lBQ0o7QUFDSjtBQUNBLFNBQVNhLFVBQVVOLEVBQUUsRUFBRVAsT0FBTztJQUMxQixNQUFNa0MsU0FBUzNCLEdBQUcyQixNQUFNLENBQUNsQyxRQUFRO0lBQ2pDLE9BQU9rQyxXQUFXekIsYUFBYSxDQUFDLENBQUMsR0FBR2pCLE9BQU8yQyxpQkFBaUIsRUFBRTVCLElBQUkyQjtBQUN0RTtBQUNBOUMsa0JBQWUsR0FBR1csS0FDbEIsOEJBQThCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaS1hbS1uZWFyYnkvLi9ub2RlX21vZHVsZXMvQG5lYXItanMvYWNjb3VudHMvbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L3ZvY2FidWxhcmllcy9hcHBsaWNhdG9yL2lmLmpzP2QzYTQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBjb2RlZ2VuXzEgPSByZXF1aXJlKFwiLi4vLi4vY29tcGlsZS9jb2RlZ2VuXCIpO1xuY29uc3QgdXRpbF8xID0gcmVxdWlyZShcIi4uLy4uL2NvbXBpbGUvdXRpbFwiKTtcbmNvbnN0IGVycm9yID0ge1xuICAgIG1lc3NhZ2U6ICh7IHBhcmFtcyB9KSA9PiAoMCwgY29kZWdlbl8xLnN0cikgYG11c3QgbWF0Y2ggXCIke3BhcmFtcy5pZkNsYXVzZX1cIiBzY2hlbWFgLFxuICAgIHBhcmFtczogKHsgcGFyYW1zIH0pID0+ICgwLCBjb2RlZ2VuXzEuXykgYHtmYWlsaW5nS2V5d29yZDogJHtwYXJhbXMuaWZDbGF1c2V9fWAsXG59O1xuY29uc3QgZGVmID0ge1xuICAgIGtleXdvcmQ6IFwiaWZcIixcbiAgICBzY2hlbWFUeXBlOiBbXCJvYmplY3RcIiwgXCJib29sZWFuXCJdLFxuICAgIHRyYWNrRXJyb3JzOiB0cnVlLFxuICAgIGVycm9yLFxuICAgIGNvZGUoY3h0KSB7XG4gICAgICAgIGNvbnN0IHsgZ2VuLCBwYXJlbnRTY2hlbWEsIGl0IH0gPSBjeHQ7XG4gICAgICAgIGlmIChwYXJlbnRTY2hlbWEudGhlbiA9PT0gdW5kZWZpbmVkICYmIHBhcmVudFNjaGVtYS5lbHNlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICgwLCB1dGlsXzEuY2hlY2tTdHJpY3RNb2RlKShpdCwgJ1wiaWZcIiB3aXRob3V0IFwidGhlblwiIGFuZCBcImVsc2VcIiBpcyBpZ25vcmVkJyk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaGFzVGhlbiA9IGhhc1NjaGVtYShpdCwgXCJ0aGVuXCIpO1xuICAgICAgICBjb25zdCBoYXNFbHNlID0gaGFzU2NoZW1hKGl0LCBcImVsc2VcIik7XG4gICAgICAgIGlmICghaGFzVGhlbiAmJiAhaGFzRWxzZSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgY29uc3QgdmFsaWQgPSBnZW4ubGV0KFwidmFsaWRcIiwgdHJ1ZSk7XG4gICAgICAgIGNvbnN0IHNjaFZhbGlkID0gZ2VuLm5hbWUoXCJfdmFsaWRcIik7XG4gICAgICAgIHZhbGlkYXRlSWYoKTtcbiAgICAgICAgY3h0LnJlc2V0KCk7XG4gICAgICAgIGlmIChoYXNUaGVuICYmIGhhc0Vsc2UpIHtcbiAgICAgICAgICAgIGNvbnN0IGlmQ2xhdXNlID0gZ2VuLmxldChcImlmQ2xhdXNlXCIpO1xuICAgICAgICAgICAgY3h0LnNldFBhcmFtcyh7IGlmQ2xhdXNlIH0pO1xuICAgICAgICAgICAgZ2VuLmlmKHNjaFZhbGlkLCB2YWxpZGF0ZUNsYXVzZShcInRoZW5cIiwgaWZDbGF1c2UpLCB2YWxpZGF0ZUNsYXVzZShcImVsc2VcIiwgaWZDbGF1c2UpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChoYXNUaGVuKSB7XG4gICAgICAgICAgICBnZW4uaWYoc2NoVmFsaWQsIHZhbGlkYXRlQ2xhdXNlKFwidGhlblwiKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBnZW4uaWYoKDAsIGNvZGVnZW5fMS5ub3QpKHNjaFZhbGlkKSwgdmFsaWRhdGVDbGF1c2UoXCJlbHNlXCIpKTtcbiAgICAgICAgfVxuICAgICAgICBjeHQucGFzcyh2YWxpZCwgKCkgPT4gY3h0LmVycm9yKHRydWUpKTtcbiAgICAgICAgZnVuY3Rpb24gdmFsaWRhdGVJZigpIHtcbiAgICAgICAgICAgIGNvbnN0IHNjaEN4dCA9IGN4dC5zdWJzY2hlbWEoe1xuICAgICAgICAgICAgICAgIGtleXdvcmQ6IFwiaWZcIixcbiAgICAgICAgICAgICAgICBjb21wb3NpdGVSdWxlOiB0cnVlLFxuICAgICAgICAgICAgICAgIGNyZWF0ZUVycm9yczogZmFsc2UsXG4gICAgICAgICAgICAgICAgYWxsRXJyb3JzOiBmYWxzZSxcbiAgICAgICAgICAgIH0sIHNjaFZhbGlkKTtcbiAgICAgICAgICAgIGN4dC5tZXJnZUV2YWx1YXRlZChzY2hDeHQpO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIHZhbGlkYXRlQ2xhdXNlKGtleXdvcmQsIGlmQ2xhdXNlKSB7XG4gICAgICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHNjaEN4dCA9IGN4dC5zdWJzY2hlbWEoeyBrZXl3b3JkIH0sIHNjaFZhbGlkKTtcbiAgICAgICAgICAgICAgICBnZW4uYXNzaWduKHZhbGlkLCBzY2hWYWxpZCk7XG4gICAgICAgICAgICAgICAgY3h0Lm1lcmdlVmFsaWRFdmFsdWF0ZWQoc2NoQ3h0LCB2YWxpZCk7XG4gICAgICAgICAgICAgICAgaWYgKGlmQ2xhdXNlKVxuICAgICAgICAgICAgICAgICAgICBnZW4uYXNzaWduKGlmQ2xhdXNlLCAoMCwgY29kZWdlbl8xLl8pIGAke2tleXdvcmR9YCk7XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICBjeHQuc2V0UGFyYW1zKHsgaWZDbGF1c2U6IGtleXdvcmQgfSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfSxcbn07XG5mdW5jdGlvbiBoYXNTY2hlbWEoaXQsIGtleXdvcmQpIHtcbiAgICBjb25zdCBzY2hlbWEgPSBpdC5zY2hlbWFba2V5d29yZF07XG4gICAgcmV0dXJuIHNjaGVtYSAhPT0gdW5kZWZpbmVkICYmICEoMCwgdXRpbF8xLmFsd2F5c1ZhbGlkU2NoZW1hKShpdCwgc2NoZW1hKTtcbn1cbmV4cG9ydHMuZGVmYXVsdCA9IGRlZjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlmLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImNvZGVnZW5fMSIsInJlcXVpcmUiLCJ1dGlsXzEiLCJlcnJvciIsIm1lc3NhZ2UiLCJwYXJhbXMiLCJzdHIiLCJpZkNsYXVzZSIsIl8iLCJkZWYiLCJrZXl3b3JkIiwic2NoZW1hVHlwZSIsInRyYWNrRXJyb3JzIiwiY29kZSIsImN4dCIsImdlbiIsInBhcmVudFNjaGVtYSIsIml0IiwidGhlbiIsInVuZGVmaW5lZCIsImVsc2UiLCJjaGVja1N0cmljdE1vZGUiLCJoYXNUaGVuIiwiaGFzU2NoZW1hIiwiaGFzRWxzZSIsInZhbGlkIiwibGV0Iiwic2NoVmFsaWQiLCJuYW1lIiwidmFsaWRhdGVJZiIsInJlc2V0Iiwic2V0UGFyYW1zIiwiaWYiLCJ2YWxpZGF0ZUNsYXVzZSIsIm5vdCIsInBhc3MiLCJzY2hDeHQiLCJzdWJzY2hlbWEiLCJjb21wb3NpdGVSdWxlIiwiY3JlYXRlRXJyb3JzIiwiYWxsRXJyb3JzIiwibWVyZ2VFdmFsdWF0ZWQiLCJhc3NpZ24iLCJtZXJnZVZhbGlkRXZhbHVhdGVkIiwic2NoZW1hIiwiYWx3YXlzVmFsaWRTY2hlbWEiLCJkZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/applicator/if.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/applicator/index.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/applicator/index.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst additionalItems_1 = __webpack_require__(/*! ./additionalItems */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/applicator/additionalItems.js\");\nconst prefixItems_1 = __webpack_require__(/*! ./prefixItems */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/applicator/prefixItems.js\");\nconst items_1 = __webpack_require__(/*! ./items */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/applicator/items.js\");\nconst items2020_1 = __webpack_require__(/*! ./items2020 */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/applicator/items2020.js\");\nconst contains_1 = __webpack_require__(/*! ./contains */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/applicator/contains.js\");\nconst dependencies_1 = __webpack_require__(/*! ./dependencies */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/applicator/dependencies.js\");\nconst propertyNames_1 = __webpack_require__(/*! ./propertyNames */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/applicator/propertyNames.js\");\nconst additionalProperties_1 = __webpack_require__(/*! ./additionalProperties */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/applicator/additionalProperties.js\");\nconst properties_1 = __webpack_require__(/*! ./properties */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/applicator/properties.js\");\nconst patternProperties_1 = __webpack_require__(/*! ./patternProperties */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/applicator/patternProperties.js\");\nconst not_1 = __webpack_require__(/*! ./not */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/applicator/not.js\");\nconst anyOf_1 = __webpack_require__(/*! ./anyOf */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/applicator/anyOf.js\");\nconst oneOf_1 = __webpack_require__(/*! ./oneOf */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/applicator/oneOf.js\");\nconst allOf_1 = __webpack_require__(/*! ./allOf */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/applicator/allOf.js\");\nconst if_1 = __webpack_require__(/*! ./if */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/applicator/if.js\");\nconst thenElse_1 = __webpack_require__(/*! ./thenElse */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/applicator/thenElse.js\");\nfunction getApplicator(draft2020 = false) {\n    const applicator = [\n        // any\n        not_1.default,\n        anyOf_1.default,\n        oneOf_1.default,\n        allOf_1.default,\n        if_1.default,\n        thenElse_1.default,\n        // object\n        propertyNames_1.default,\n        additionalProperties_1.default,\n        dependencies_1.default,\n        properties_1.default,\n        patternProperties_1.default\n    ];\n    // array\n    if (draft2020) applicator.push(prefixItems_1.default, items2020_1.default);\n    else applicator.push(additionalItems_1.default, items_1.default);\n    applicator.push(contains_1.default);\n    return applicator;\n}\nexports[\"default\"] = getApplicator; //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG5lYXItanMvYWNjb3VudHMvbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L3ZvY2FidWxhcmllcy9hcHBsaWNhdG9yL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdELE1BQU1DLG9CQUFvQkMsbUJBQU9BLENBQUMsa0lBQW1CO0FBQ3JELE1BQU1DLGdCQUFnQkQsbUJBQU9BLENBQUMsMEhBQWU7QUFDN0MsTUFBTUUsVUFBVUYsbUJBQU9BLENBQUMsOEdBQVM7QUFDakMsTUFBTUcsY0FBY0gsbUJBQU9BLENBQUMsc0hBQWE7QUFDekMsTUFBTUksYUFBYUosbUJBQU9BLENBQUMsb0hBQVk7QUFDdkMsTUFBTUssaUJBQWlCTCxtQkFBT0EsQ0FBQyw0SEFBZ0I7QUFDL0MsTUFBTU0sa0JBQWtCTixtQkFBT0EsQ0FBQyw4SEFBaUI7QUFDakQsTUFBTU8seUJBQXlCUCxtQkFBT0EsQ0FBQyw0SUFBd0I7QUFDL0QsTUFBTVEsZUFBZVIsbUJBQU9BLENBQUMsd0hBQWM7QUFDM0MsTUFBTVMsc0JBQXNCVCxtQkFBT0EsQ0FBQyxzSUFBcUI7QUFDekQsTUFBTVUsUUFBUVYsbUJBQU9BLENBQUMsMEdBQU87QUFDN0IsTUFBTVcsVUFBVVgsbUJBQU9BLENBQUMsOEdBQVM7QUFDakMsTUFBTVksVUFBVVosbUJBQU9BLENBQUMsOEdBQVM7QUFDakMsTUFBTWEsVUFBVWIsbUJBQU9BLENBQUMsOEdBQVM7QUFDakMsTUFBTWMsT0FBT2QsbUJBQU9BLENBQUMsd0dBQU07QUFDM0IsTUFBTWUsYUFBYWYsbUJBQU9BLENBQUMsb0hBQVk7QUFDdkMsU0FBU2dCLGNBQWNDLFlBQVksS0FBSztJQUNwQyxNQUFNQyxhQUFhO1FBQ2YsTUFBTTtRQUNOUixNQUFNUyxPQUFPO1FBQ2JSLFFBQVFRLE9BQU87UUFDZlAsUUFBUU8sT0FBTztRQUNmTixRQUFRTSxPQUFPO1FBQ2ZMLEtBQUtLLE9BQU87UUFDWkosV0FBV0ksT0FBTztRQUNsQixTQUFTO1FBQ1RiLGdCQUFnQmEsT0FBTztRQUN2QlosdUJBQXVCWSxPQUFPO1FBQzlCZCxlQUFlYyxPQUFPO1FBQ3RCWCxhQUFhVyxPQUFPO1FBQ3BCVixvQkFBb0JVLE9BQU87S0FDOUI7SUFDRCxRQUFRO0lBQ1IsSUFBSUYsV0FDQUMsV0FBV0UsSUFBSSxDQUFDbkIsY0FBY2tCLE9BQU8sRUFBRWhCLFlBQVlnQixPQUFPO1NBRTFERCxXQUFXRSxJQUFJLENBQUNyQixrQkFBa0JvQixPQUFPLEVBQUVqQixRQUFRaUIsT0FBTztJQUM5REQsV0FBV0UsSUFBSSxDQUFDaEIsV0FBV2UsT0FBTztJQUNsQyxPQUFPRDtBQUNYO0FBQ0FyQixrQkFBZSxHQUFHbUIsZUFDbEIsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaS1hbS1uZWFyYnkvLi9ub2RlX21vZHVsZXMvQG5lYXItanMvYWNjb3VudHMvbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L3ZvY2FidWxhcmllcy9hcHBsaWNhdG9yL2luZGV4LmpzP2MyZDYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBhZGRpdGlvbmFsSXRlbXNfMSA9IHJlcXVpcmUoXCIuL2FkZGl0aW9uYWxJdGVtc1wiKTtcbmNvbnN0IHByZWZpeEl0ZW1zXzEgPSByZXF1aXJlKFwiLi9wcmVmaXhJdGVtc1wiKTtcbmNvbnN0IGl0ZW1zXzEgPSByZXF1aXJlKFwiLi9pdGVtc1wiKTtcbmNvbnN0IGl0ZW1zMjAyMF8xID0gcmVxdWlyZShcIi4vaXRlbXMyMDIwXCIpO1xuY29uc3QgY29udGFpbnNfMSA9IHJlcXVpcmUoXCIuL2NvbnRhaW5zXCIpO1xuY29uc3QgZGVwZW5kZW5jaWVzXzEgPSByZXF1aXJlKFwiLi9kZXBlbmRlbmNpZXNcIik7XG5jb25zdCBwcm9wZXJ0eU5hbWVzXzEgPSByZXF1aXJlKFwiLi9wcm9wZXJ0eU5hbWVzXCIpO1xuY29uc3QgYWRkaXRpb25hbFByb3BlcnRpZXNfMSA9IHJlcXVpcmUoXCIuL2FkZGl0aW9uYWxQcm9wZXJ0aWVzXCIpO1xuY29uc3QgcHJvcGVydGllc18xID0gcmVxdWlyZShcIi4vcHJvcGVydGllc1wiKTtcbmNvbnN0IHBhdHRlcm5Qcm9wZXJ0aWVzXzEgPSByZXF1aXJlKFwiLi9wYXR0ZXJuUHJvcGVydGllc1wiKTtcbmNvbnN0IG5vdF8xID0gcmVxdWlyZShcIi4vbm90XCIpO1xuY29uc3QgYW55T2ZfMSA9IHJlcXVpcmUoXCIuL2FueU9mXCIpO1xuY29uc3Qgb25lT2ZfMSA9IHJlcXVpcmUoXCIuL29uZU9mXCIpO1xuY29uc3QgYWxsT2ZfMSA9IHJlcXVpcmUoXCIuL2FsbE9mXCIpO1xuY29uc3QgaWZfMSA9IHJlcXVpcmUoXCIuL2lmXCIpO1xuY29uc3QgdGhlbkVsc2VfMSA9IHJlcXVpcmUoXCIuL3RoZW5FbHNlXCIpO1xuZnVuY3Rpb24gZ2V0QXBwbGljYXRvcihkcmFmdDIwMjAgPSBmYWxzZSkge1xuICAgIGNvbnN0IGFwcGxpY2F0b3IgPSBbXG4gICAgICAgIC8vIGFueVxuICAgICAgICBub3RfMS5kZWZhdWx0LFxuICAgICAgICBhbnlPZl8xLmRlZmF1bHQsXG4gICAgICAgIG9uZU9mXzEuZGVmYXVsdCxcbiAgICAgICAgYWxsT2ZfMS5kZWZhdWx0LFxuICAgICAgICBpZl8xLmRlZmF1bHQsXG4gICAgICAgIHRoZW5FbHNlXzEuZGVmYXVsdCxcbiAgICAgICAgLy8gb2JqZWN0XG4gICAgICAgIHByb3BlcnR5TmFtZXNfMS5kZWZhdWx0LFxuICAgICAgICBhZGRpdGlvbmFsUHJvcGVydGllc18xLmRlZmF1bHQsXG4gICAgICAgIGRlcGVuZGVuY2llc18xLmRlZmF1bHQsXG4gICAgICAgIHByb3BlcnRpZXNfMS5kZWZhdWx0LFxuICAgICAgICBwYXR0ZXJuUHJvcGVydGllc18xLmRlZmF1bHQsXG4gICAgXTtcbiAgICAvLyBhcnJheVxuICAgIGlmIChkcmFmdDIwMjApXG4gICAgICAgIGFwcGxpY2F0b3IucHVzaChwcmVmaXhJdGVtc18xLmRlZmF1bHQsIGl0ZW1zMjAyMF8xLmRlZmF1bHQpO1xuICAgIGVsc2VcbiAgICAgICAgYXBwbGljYXRvci5wdXNoKGFkZGl0aW9uYWxJdGVtc18xLmRlZmF1bHQsIGl0ZW1zXzEuZGVmYXVsdCk7XG4gICAgYXBwbGljYXRvci5wdXNoKGNvbnRhaW5zXzEuZGVmYXVsdCk7XG4gICAgcmV0dXJuIGFwcGxpY2F0b3I7XG59XG5leHBvcnRzLmRlZmF1bHQgPSBnZXRBcHBsaWNhdG9yO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiYWRkaXRpb25hbEl0ZW1zXzEiLCJyZXF1aXJlIiwicHJlZml4SXRlbXNfMSIsIml0ZW1zXzEiLCJpdGVtczIwMjBfMSIsImNvbnRhaW5zXzEiLCJkZXBlbmRlbmNpZXNfMSIsInByb3BlcnR5TmFtZXNfMSIsImFkZGl0aW9uYWxQcm9wZXJ0aWVzXzEiLCJwcm9wZXJ0aWVzXzEiLCJwYXR0ZXJuUHJvcGVydGllc18xIiwibm90XzEiLCJhbnlPZl8xIiwib25lT2ZfMSIsImFsbE9mXzEiLCJpZl8xIiwidGhlbkVsc2VfMSIsImdldEFwcGxpY2F0b3IiLCJkcmFmdDIwMjAiLCJhcHBsaWNhdG9yIiwiZGVmYXVsdCIsInB1c2giXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/applicator/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/applicator/items.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/applicator/items.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.validateTuple = void 0;\nconst codegen_1 = __webpack_require__(/*! ../../compile/codegen */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/codegen/index.js\");\nconst util_1 = __webpack_require__(/*! ../../compile/util */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/util.js\");\nconst code_1 = __webpack_require__(/*! ../code */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/code.js\");\nconst def = {\n    keyword: \"items\",\n    type: \"array\",\n    schemaType: [\n        \"object\",\n        \"array\",\n        \"boolean\"\n    ],\n    before: \"uniqueItems\",\n    code (cxt) {\n        const { schema, it } = cxt;\n        if (Array.isArray(schema)) return validateTuple(cxt, \"additionalItems\", schema);\n        it.items = true;\n        if ((0, util_1.alwaysValidSchema)(it, schema)) return;\n        cxt.ok((0, code_1.validateArray)(cxt));\n    }\n};\nfunction validateTuple(cxt, extraItems, schArr = cxt.schema) {\n    const { gen, parentSchema, data, keyword, it } = cxt;\n    checkStrictTuple(parentSchema);\n    if (it.opts.unevaluated && schArr.length && it.items !== true) {\n        it.items = util_1.mergeEvaluated.items(gen, schArr.length, it.items);\n    }\n    const valid = gen.name(\"valid\");\n    const len = gen.const(\"len\", (0, codegen_1._)`${data}.length`);\n    schArr.forEach((sch, i)=>{\n        if ((0, util_1.alwaysValidSchema)(it, sch)) return;\n        gen.if((0, codegen_1._)`${len} > ${i}`, ()=>cxt.subschema({\n                keyword,\n                schemaProp: i,\n                dataProp: i\n            }, valid));\n        cxt.ok(valid);\n    });\n    function checkStrictTuple(sch) {\n        const { opts, errSchemaPath } = it;\n        const l = schArr.length;\n        const fullTuple = l === sch.minItems && (l === sch.maxItems || sch[extraItems] === false);\n        if (opts.strictTuples && !fullTuple) {\n            const msg = `\"${keyword}\" is ${l}-tuple, but minItems or maxItems/${extraItems} are not specified or different at path \"${errSchemaPath}\"`;\n            (0, util_1.checkStrictMode)(it, msg, opts.strictTuples);\n        }\n    }\n}\nexports.validateTuple = validateTuple;\nexports[\"default\"] = def; //# sourceMappingURL=items.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG5lYXItanMvYWNjb3VudHMvbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L3ZvY2FidWxhcmllcy9hcHBsaWNhdG9yL2l0ZW1zLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxxQkFBcUIsR0FBRyxLQUFLO0FBQzdCLE1BQU1HLFlBQVlDLG1CQUFPQSxDQUFDLG9IQUF1QjtBQUNqRCxNQUFNQyxTQUFTRCxtQkFBT0EsQ0FBQyx3R0FBb0I7QUFDM0MsTUFBTUUsU0FBU0YsbUJBQU9BLENBQUMsa0dBQVM7QUFDaEMsTUFBTUcsTUFBTTtJQUNSQyxTQUFTO0lBQ1RDLE1BQU07SUFDTkMsWUFBWTtRQUFDO1FBQVU7UUFBUztLQUFVO0lBQzFDQyxRQUFRO0lBQ1JDLE1BQUtDLEdBQUc7UUFDSixNQUFNLEVBQUVDLE1BQU0sRUFBRUMsRUFBRSxFQUFFLEdBQUdGO1FBQ3ZCLElBQUlHLE1BQU1DLE9BQU8sQ0FBQ0gsU0FDZCxPQUFPWixjQUFjVyxLQUFLLG1CQUFtQkM7UUFDakRDLEdBQUdHLEtBQUssR0FBRztRQUNYLElBQUksQ0FBQyxHQUFHYixPQUFPYyxpQkFBaUIsRUFBRUosSUFBSUQsU0FDbEM7UUFDSkQsSUFBSU8sRUFBRSxDQUFDLENBQUMsR0FBR2QsT0FBT2UsYUFBYSxFQUFFUjtJQUNyQztBQUNKO0FBQ0EsU0FBU1gsY0FBY1csR0FBRyxFQUFFUyxVQUFVLEVBQUVDLFNBQVNWLElBQUlDLE1BQU07SUFDdkQsTUFBTSxFQUFFVSxHQUFHLEVBQUVDLFlBQVksRUFBRUMsSUFBSSxFQUFFbEIsT0FBTyxFQUFFTyxFQUFFLEVBQUUsR0FBR0Y7SUFDakRjLGlCQUFpQkY7SUFDakIsSUFBSVYsR0FBR2EsSUFBSSxDQUFDQyxXQUFXLElBQUlOLE9BQU9PLE1BQU0sSUFBSWYsR0FBR0csS0FBSyxLQUFLLE1BQU07UUFDM0RILEdBQUdHLEtBQUssR0FBR2IsT0FBTzBCLGNBQWMsQ0FBQ2IsS0FBSyxDQUFDTSxLQUFLRCxPQUFPTyxNQUFNLEVBQUVmLEdBQUdHLEtBQUs7SUFDdkU7SUFDQSxNQUFNYyxRQUFRUixJQUFJUyxJQUFJLENBQUM7SUFDdkIsTUFBTUMsTUFBTVYsSUFBSVcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxHQUFHaEMsVUFBVWlDLENBQUMsQ0FBRSxDQUFDLEVBQUVWLEtBQUssT0FBTyxDQUFDO0lBQzlESCxPQUFPYyxPQUFPLENBQUMsQ0FBQ0MsS0FBS0M7UUFDakIsSUFBSSxDQUFDLEdBQUdsQyxPQUFPYyxpQkFBaUIsRUFBRUosSUFBSXVCLE1BQ2xDO1FBQ0pkLElBQUlnQixFQUFFLENBQUMsQ0FBQyxHQUFHckMsVUFBVWlDLENBQUMsQ0FBRSxDQUFDLEVBQUVGLElBQUksR0FBRyxFQUFFSyxFQUFFLENBQUMsRUFBRSxJQUFNMUIsSUFBSTRCLFNBQVMsQ0FBQztnQkFDekRqQztnQkFDQWtDLFlBQVlIO2dCQUNaSSxVQUFVSjtZQUNkLEdBQUdQO1FBQ0huQixJQUFJTyxFQUFFLENBQUNZO0lBQ1g7SUFDQSxTQUFTTCxpQkFBaUJXLEdBQUc7UUFDekIsTUFBTSxFQUFFVixJQUFJLEVBQUVnQixhQUFhLEVBQUUsR0FBRzdCO1FBQ2hDLE1BQU04QixJQUFJdEIsT0FBT08sTUFBTTtRQUN2QixNQUFNZ0IsWUFBWUQsTUFBTVAsSUFBSVMsUUFBUSxJQUFLRixDQUFBQSxNQUFNUCxJQUFJVSxRQUFRLElBQUlWLEdBQUcsQ0FBQ2hCLFdBQVcsS0FBSyxLQUFJO1FBQ3ZGLElBQUlNLEtBQUtxQixZQUFZLElBQUksQ0FBQ0gsV0FBVztZQUNqQyxNQUFNSSxNQUFNLENBQUMsQ0FBQyxFQUFFMUMsUUFBUSxLQUFLLEVBQUVxQyxFQUFFLGlDQUFpQyxFQUFFdkIsV0FBVyx5Q0FBeUMsRUFBRXNCLGNBQWMsQ0FBQyxDQUFDO1lBQ3pJLElBQUd2QyxPQUFPOEMsZUFBZSxFQUFFcEMsSUFBSW1DLEtBQUt0QixLQUFLcUIsWUFBWTtRQUMxRDtJQUNKO0FBQ0o7QUFDQWpELHFCQUFxQixHQUFHRTtBQUN4QkYsa0JBQWUsR0FBR08sS0FDbEIsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaS1hbS1uZWFyYnkvLi9ub2RlX21vZHVsZXMvQG5lYXItanMvYWNjb3VudHMvbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L3ZvY2FidWxhcmllcy9hcHBsaWNhdG9yL2l0ZW1zLmpzP2I3ZTgiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnZhbGlkYXRlVHVwbGUgPSB2b2lkIDA7XG5jb25zdCBjb2RlZ2VuXzEgPSByZXF1aXJlKFwiLi4vLi4vY29tcGlsZS9jb2RlZ2VuXCIpO1xuY29uc3QgdXRpbF8xID0gcmVxdWlyZShcIi4uLy4uL2NvbXBpbGUvdXRpbFwiKTtcbmNvbnN0IGNvZGVfMSA9IHJlcXVpcmUoXCIuLi9jb2RlXCIpO1xuY29uc3QgZGVmID0ge1xuICAgIGtleXdvcmQ6IFwiaXRlbXNcIixcbiAgICB0eXBlOiBcImFycmF5XCIsXG4gICAgc2NoZW1hVHlwZTogW1wib2JqZWN0XCIsIFwiYXJyYXlcIiwgXCJib29sZWFuXCJdLFxuICAgIGJlZm9yZTogXCJ1bmlxdWVJdGVtc1wiLFxuICAgIGNvZGUoY3h0KSB7XG4gICAgICAgIGNvbnN0IHsgc2NoZW1hLCBpdCB9ID0gY3h0O1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShzY2hlbWEpKVxuICAgICAgICAgICAgcmV0dXJuIHZhbGlkYXRlVHVwbGUoY3h0LCBcImFkZGl0aW9uYWxJdGVtc1wiLCBzY2hlbWEpO1xuICAgICAgICBpdC5pdGVtcyA9IHRydWU7XG4gICAgICAgIGlmICgoMCwgdXRpbF8xLmFsd2F5c1ZhbGlkU2NoZW1hKShpdCwgc2NoZW1hKSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgY3h0Lm9rKCgwLCBjb2RlXzEudmFsaWRhdGVBcnJheSkoY3h0KSk7XG4gICAgfSxcbn07XG5mdW5jdGlvbiB2YWxpZGF0ZVR1cGxlKGN4dCwgZXh0cmFJdGVtcywgc2NoQXJyID0gY3h0LnNjaGVtYSkge1xuICAgIGNvbnN0IHsgZ2VuLCBwYXJlbnRTY2hlbWEsIGRhdGEsIGtleXdvcmQsIGl0IH0gPSBjeHQ7XG4gICAgY2hlY2tTdHJpY3RUdXBsZShwYXJlbnRTY2hlbWEpO1xuICAgIGlmIChpdC5vcHRzLnVuZXZhbHVhdGVkICYmIHNjaEFyci5sZW5ndGggJiYgaXQuaXRlbXMgIT09IHRydWUpIHtcbiAgICAgICAgaXQuaXRlbXMgPSB1dGlsXzEubWVyZ2VFdmFsdWF0ZWQuaXRlbXMoZ2VuLCBzY2hBcnIubGVuZ3RoLCBpdC5pdGVtcyk7XG4gICAgfVxuICAgIGNvbnN0IHZhbGlkID0gZ2VuLm5hbWUoXCJ2YWxpZFwiKTtcbiAgICBjb25zdCBsZW4gPSBnZW4uY29uc3QoXCJsZW5cIiwgKDAsIGNvZGVnZW5fMS5fKSBgJHtkYXRhfS5sZW5ndGhgKTtcbiAgICBzY2hBcnIuZm9yRWFjaCgoc2NoLCBpKSA9PiB7XG4gICAgICAgIGlmICgoMCwgdXRpbF8xLmFsd2F5c1ZhbGlkU2NoZW1hKShpdCwgc2NoKSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgZ2VuLmlmKCgwLCBjb2RlZ2VuXzEuXykgYCR7bGVufSA+ICR7aX1gLCAoKSA9PiBjeHQuc3Vic2NoZW1hKHtcbiAgICAgICAgICAgIGtleXdvcmQsXG4gICAgICAgICAgICBzY2hlbWFQcm9wOiBpLFxuICAgICAgICAgICAgZGF0YVByb3A6IGksXG4gICAgICAgIH0sIHZhbGlkKSk7XG4gICAgICAgIGN4dC5vayh2YWxpZCk7XG4gICAgfSk7XG4gICAgZnVuY3Rpb24gY2hlY2tTdHJpY3RUdXBsZShzY2gpIHtcbiAgICAgICAgY29uc3QgeyBvcHRzLCBlcnJTY2hlbWFQYXRoIH0gPSBpdDtcbiAgICAgICAgY29uc3QgbCA9IHNjaEFyci5sZW5ndGg7XG4gICAgICAgIGNvbnN0IGZ1bGxUdXBsZSA9IGwgPT09IHNjaC5taW5JdGVtcyAmJiAobCA9PT0gc2NoLm1heEl0ZW1zIHx8IHNjaFtleHRyYUl0ZW1zXSA9PT0gZmFsc2UpO1xuICAgICAgICBpZiAob3B0cy5zdHJpY3RUdXBsZXMgJiYgIWZ1bGxUdXBsZSkge1xuICAgICAgICAgICAgY29uc3QgbXNnID0gYFwiJHtrZXl3b3JkfVwiIGlzICR7bH0tdHVwbGUsIGJ1dCBtaW5JdGVtcyBvciBtYXhJdGVtcy8ke2V4dHJhSXRlbXN9IGFyZSBub3Qgc3BlY2lmaWVkIG9yIGRpZmZlcmVudCBhdCBwYXRoIFwiJHtlcnJTY2hlbWFQYXRofVwiYDtcbiAgICAgICAgICAgICgwLCB1dGlsXzEuY2hlY2tTdHJpY3RNb2RlKShpdCwgbXNnLCBvcHRzLnN0cmljdFR1cGxlcyk7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLnZhbGlkYXRlVHVwbGUgPSB2YWxpZGF0ZVR1cGxlO1xuZXhwb3J0cy5kZWZhdWx0ID0gZGVmO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXRlbXMuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwidmFsaWRhdGVUdXBsZSIsImNvZGVnZW5fMSIsInJlcXVpcmUiLCJ1dGlsXzEiLCJjb2RlXzEiLCJkZWYiLCJrZXl3b3JkIiwidHlwZSIsInNjaGVtYVR5cGUiLCJiZWZvcmUiLCJjb2RlIiwiY3h0Iiwic2NoZW1hIiwiaXQiLCJBcnJheSIsImlzQXJyYXkiLCJpdGVtcyIsImFsd2F5c1ZhbGlkU2NoZW1hIiwib2siLCJ2YWxpZGF0ZUFycmF5IiwiZXh0cmFJdGVtcyIsInNjaEFyciIsImdlbiIsInBhcmVudFNjaGVtYSIsImRhdGEiLCJjaGVja1N0cmljdFR1cGxlIiwib3B0cyIsInVuZXZhbHVhdGVkIiwibGVuZ3RoIiwibWVyZ2VFdmFsdWF0ZWQiLCJ2YWxpZCIsIm5hbWUiLCJsZW4iLCJjb25zdCIsIl8iLCJmb3JFYWNoIiwic2NoIiwiaSIsImlmIiwic3Vic2NoZW1hIiwic2NoZW1hUHJvcCIsImRhdGFQcm9wIiwiZXJyU2NoZW1hUGF0aCIsImwiLCJmdWxsVHVwbGUiLCJtaW5JdGVtcyIsIm1heEl0ZW1zIiwic3RyaWN0VHVwbGVzIiwibXNnIiwiY2hlY2tTdHJpY3RNb2RlIiwiZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/applicator/items.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/applicator/items2020.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/applicator/items2020.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst codegen_1 = __webpack_require__(/*! ../../compile/codegen */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/codegen/index.js\");\nconst util_1 = __webpack_require__(/*! ../../compile/util */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/util.js\");\nconst code_1 = __webpack_require__(/*! ../code */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/code.js\");\nconst additionalItems_1 = __webpack_require__(/*! ./additionalItems */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/applicator/additionalItems.js\");\nconst error = {\n    message: ({ params: { len } })=>(0, codegen_1.str)`must NOT have more than ${len} items`,\n    params: ({ params: { len } })=>(0, codegen_1._)`{limit: ${len}}`\n};\nconst def = {\n    keyword: \"items\",\n    type: \"array\",\n    schemaType: [\n        \"object\",\n        \"boolean\"\n    ],\n    before: \"uniqueItems\",\n    error,\n    code (cxt) {\n        const { schema, parentSchema, it } = cxt;\n        const { prefixItems } = parentSchema;\n        it.items = true;\n        if ((0, util_1.alwaysValidSchema)(it, schema)) return;\n        if (prefixItems) (0, additionalItems_1.validateAdditionalItems)(cxt, prefixItems);\n        else cxt.ok((0, code_1.validateArray)(cxt));\n    }\n};\nexports[\"default\"] = def; //# sourceMappingURL=items2020.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG5lYXItanMvYWNjb3VudHMvbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L3ZvY2FidWxhcmllcy9hcHBsaWNhdG9yL2l0ZW1zMjAyMC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3RCxNQUFNQyxZQUFZQyxtQkFBT0EsQ0FBQyxvSEFBdUI7QUFDakQsTUFBTUMsU0FBU0QsbUJBQU9BLENBQUMsd0dBQW9CO0FBQzNDLE1BQU1FLFNBQVNGLG1CQUFPQSxDQUFDLGtHQUFTO0FBQ2hDLE1BQU1HLG9CQUFvQkgsbUJBQU9BLENBQUMsa0lBQW1CO0FBQ3JELE1BQU1JLFFBQVE7SUFDVkMsU0FBUyxDQUFDLEVBQUVDLFFBQVEsRUFBRUMsR0FBRyxFQUFFLEVBQUUsR0FBSyxDQUFDLEdBQUdSLFVBQVVTLEdBQUcsQ0FBRSxDQUFDLHdCQUF3QixFQUFFRCxJQUFJLE1BQU0sQ0FBQztJQUMzRkQsUUFBUSxDQUFDLEVBQUVBLFFBQVEsRUFBRUMsR0FBRyxFQUFFLEVBQUUsR0FBSyxDQUFDLEdBQUdSLFVBQVVVLENBQUMsQ0FBRSxDQUFDLFFBQVEsRUFBRUYsSUFBSSxDQUFDLENBQUM7QUFDdkU7QUFDQSxNQUFNRyxNQUFNO0lBQ1JDLFNBQVM7SUFDVEMsTUFBTTtJQUNOQyxZQUFZO1FBQUM7UUFBVTtLQUFVO0lBQ2pDQyxRQUFRO0lBQ1JWO0lBQ0FXLE1BQUtDLEdBQUc7UUFDSixNQUFNLEVBQUVDLE1BQU0sRUFBRUMsWUFBWSxFQUFFQyxFQUFFLEVBQUUsR0FBR0g7UUFDckMsTUFBTSxFQUFFSSxXQUFXLEVBQUUsR0FBR0Y7UUFDeEJDLEdBQUdFLEtBQUssR0FBRztRQUNYLElBQUksQ0FBQyxHQUFHcEIsT0FBT3FCLGlCQUFpQixFQUFFSCxJQUFJRixTQUNsQztRQUNKLElBQUlHLGFBQ0EsQ0FBQyxHQUFHakIsa0JBQWtCb0IsdUJBQXVCLEVBQUVQLEtBQUtJO2FBRXBESixJQUFJUSxFQUFFLENBQUMsQ0FBQyxHQUFHdEIsT0FBT3VCLGFBQWEsRUFBRVQ7SUFDekM7QUFDSjtBQUNBbkIsa0JBQWUsR0FBR2EsS0FDbEIscUNBQXFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaS1hbS1uZWFyYnkvLi9ub2RlX21vZHVsZXMvQG5lYXItanMvYWNjb3VudHMvbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L3ZvY2FidWxhcmllcy9hcHBsaWNhdG9yL2l0ZW1zMjAyMC5qcz8wMTI1Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgY29kZWdlbl8xID0gcmVxdWlyZShcIi4uLy4uL2NvbXBpbGUvY29kZWdlblwiKTtcbmNvbnN0IHV0aWxfMSA9IHJlcXVpcmUoXCIuLi8uLi9jb21waWxlL3V0aWxcIik7XG5jb25zdCBjb2RlXzEgPSByZXF1aXJlKFwiLi4vY29kZVwiKTtcbmNvbnN0IGFkZGl0aW9uYWxJdGVtc18xID0gcmVxdWlyZShcIi4vYWRkaXRpb25hbEl0ZW1zXCIpO1xuY29uc3QgZXJyb3IgPSB7XG4gICAgbWVzc2FnZTogKHsgcGFyYW1zOiB7IGxlbiB9IH0pID0+ICgwLCBjb2RlZ2VuXzEuc3RyKSBgbXVzdCBOT1QgaGF2ZSBtb3JlIHRoYW4gJHtsZW59IGl0ZW1zYCxcbiAgICBwYXJhbXM6ICh7IHBhcmFtczogeyBsZW4gfSB9KSA9PiAoMCwgY29kZWdlbl8xLl8pIGB7bGltaXQ6ICR7bGVufX1gLFxufTtcbmNvbnN0IGRlZiA9IHtcbiAgICBrZXl3b3JkOiBcIml0ZW1zXCIsXG4gICAgdHlwZTogXCJhcnJheVwiLFxuICAgIHNjaGVtYVR5cGU6IFtcIm9iamVjdFwiLCBcImJvb2xlYW5cIl0sXG4gICAgYmVmb3JlOiBcInVuaXF1ZUl0ZW1zXCIsXG4gICAgZXJyb3IsXG4gICAgY29kZShjeHQpIHtcbiAgICAgICAgY29uc3QgeyBzY2hlbWEsIHBhcmVudFNjaGVtYSwgaXQgfSA9IGN4dDtcbiAgICAgICAgY29uc3QgeyBwcmVmaXhJdGVtcyB9ID0gcGFyZW50U2NoZW1hO1xuICAgICAgICBpdC5pdGVtcyA9IHRydWU7XG4gICAgICAgIGlmICgoMCwgdXRpbF8xLmFsd2F5c1ZhbGlkU2NoZW1hKShpdCwgc2NoZW1hKSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgaWYgKHByZWZpeEl0ZW1zKVxuICAgICAgICAgICAgKDAsIGFkZGl0aW9uYWxJdGVtc18xLnZhbGlkYXRlQWRkaXRpb25hbEl0ZW1zKShjeHQsIHByZWZpeEl0ZW1zKTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgY3h0Lm9rKCgwLCBjb2RlXzEudmFsaWRhdGVBcnJheSkoY3h0KSk7XG4gICAgfSxcbn07XG5leHBvcnRzLmRlZmF1bHQgPSBkZWY7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pdGVtczIwMjAuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiY29kZWdlbl8xIiwicmVxdWlyZSIsInV0aWxfMSIsImNvZGVfMSIsImFkZGl0aW9uYWxJdGVtc18xIiwiZXJyb3IiLCJtZXNzYWdlIiwicGFyYW1zIiwibGVuIiwic3RyIiwiXyIsImRlZiIsImtleXdvcmQiLCJ0eXBlIiwic2NoZW1hVHlwZSIsImJlZm9yZSIsImNvZGUiLCJjeHQiLCJzY2hlbWEiLCJwYXJlbnRTY2hlbWEiLCJpdCIsInByZWZpeEl0ZW1zIiwiaXRlbXMiLCJhbHdheXNWYWxpZFNjaGVtYSIsInZhbGlkYXRlQWRkaXRpb25hbEl0ZW1zIiwib2siLCJ2YWxpZGF0ZUFycmF5IiwiZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/applicator/items2020.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/applicator/not.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/applicator/not.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst util_1 = __webpack_require__(/*! ../../compile/util */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/util.js\");\nconst def = {\n    keyword: \"not\",\n    schemaType: [\n        \"object\",\n        \"boolean\"\n    ],\n    trackErrors: true,\n    code (cxt) {\n        const { gen, schema, it } = cxt;\n        if ((0, util_1.alwaysValidSchema)(it, schema)) {\n            cxt.fail();\n            return;\n        }\n        const valid = gen.name(\"valid\");\n        cxt.subschema({\n            keyword: \"not\",\n            compositeRule: true,\n            createErrors: false,\n            allErrors: false\n        }, valid);\n        cxt.failResult(valid, ()=>cxt.reset(), ()=>cxt.error());\n    },\n    error: {\n        message: \"must NOT be valid\"\n    }\n};\nexports[\"default\"] = def; //# sourceMappingURL=not.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG5lYXItanMvYWNjb3VudHMvbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L3ZvY2FidWxhcmllcy9hcHBsaWNhdG9yL25vdC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3RCxNQUFNQyxTQUFTQyxtQkFBT0EsQ0FBQyx3R0FBb0I7QUFDM0MsTUFBTUMsTUFBTTtJQUNSQyxTQUFTO0lBQ1RDLFlBQVk7UUFBQztRQUFVO0tBQVU7SUFDakNDLGFBQWE7SUFDYkMsTUFBS0MsR0FBRztRQUNKLE1BQU0sRUFBRUMsR0FBRyxFQUFFQyxNQUFNLEVBQUVDLEVBQUUsRUFBRSxHQUFHSDtRQUM1QixJQUFJLENBQUMsR0FBR1AsT0FBT1csaUJBQWlCLEVBQUVELElBQUlELFNBQVM7WUFDM0NGLElBQUlLLElBQUk7WUFDUjtRQUNKO1FBQ0EsTUFBTUMsUUFBUUwsSUFBSU0sSUFBSSxDQUFDO1FBQ3ZCUCxJQUFJUSxTQUFTLENBQUM7WUFDVlosU0FBUztZQUNUYSxlQUFlO1lBQ2ZDLGNBQWM7WUFDZEMsV0FBVztRQUNmLEdBQUdMO1FBQ0hOLElBQUlZLFVBQVUsQ0FBQ04sT0FBTyxJQUFNTixJQUFJYSxLQUFLLElBQUksSUFBTWIsSUFBSWMsS0FBSztJQUM1RDtJQUNBQSxPQUFPO1FBQUVDLFNBQVM7SUFBb0I7QUFDMUM7QUFDQXhCLGtCQUFlLEdBQUdJLEtBQ2xCLCtCQUErQiIsInNvdXJjZXMiOlsid2VicGFjazovL2ktYW0tbmVhcmJ5Ly4vbm9kZV9tb2R1bGVzL0BuZWFyLWpzL2FjY291bnRzL25vZGVfbW9kdWxlcy9hanYvZGlzdC92b2NhYnVsYXJpZXMvYXBwbGljYXRvci9ub3QuanM/YTA4OCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IHV0aWxfMSA9IHJlcXVpcmUoXCIuLi8uLi9jb21waWxlL3V0aWxcIik7XG5jb25zdCBkZWYgPSB7XG4gICAga2V5d29yZDogXCJub3RcIixcbiAgICBzY2hlbWFUeXBlOiBbXCJvYmplY3RcIiwgXCJib29sZWFuXCJdLFxuICAgIHRyYWNrRXJyb3JzOiB0cnVlLFxuICAgIGNvZGUoY3h0KSB7XG4gICAgICAgIGNvbnN0IHsgZ2VuLCBzY2hlbWEsIGl0IH0gPSBjeHQ7XG4gICAgICAgIGlmICgoMCwgdXRpbF8xLmFsd2F5c1ZhbGlkU2NoZW1hKShpdCwgc2NoZW1hKSkge1xuICAgICAgICAgICAgY3h0LmZhaWwoKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB2YWxpZCA9IGdlbi5uYW1lKFwidmFsaWRcIik7XG4gICAgICAgIGN4dC5zdWJzY2hlbWEoe1xuICAgICAgICAgICAga2V5d29yZDogXCJub3RcIixcbiAgICAgICAgICAgIGNvbXBvc2l0ZVJ1bGU6IHRydWUsXG4gICAgICAgICAgICBjcmVhdGVFcnJvcnM6IGZhbHNlLFxuICAgICAgICAgICAgYWxsRXJyb3JzOiBmYWxzZSxcbiAgICAgICAgfSwgdmFsaWQpO1xuICAgICAgICBjeHQuZmFpbFJlc3VsdCh2YWxpZCwgKCkgPT4gY3h0LnJlc2V0KCksICgpID0+IGN4dC5lcnJvcigpKTtcbiAgICB9LFxuICAgIGVycm9yOiB7IG1lc3NhZ2U6IFwibXVzdCBOT1QgYmUgdmFsaWRcIiB9LFxufTtcbmV4cG9ydHMuZGVmYXVsdCA9IGRlZjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW5vdC5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJ1dGlsXzEiLCJyZXF1aXJlIiwiZGVmIiwia2V5d29yZCIsInNjaGVtYVR5cGUiLCJ0cmFja0Vycm9ycyIsImNvZGUiLCJjeHQiLCJnZW4iLCJzY2hlbWEiLCJpdCIsImFsd2F5c1ZhbGlkU2NoZW1hIiwiZmFpbCIsInZhbGlkIiwibmFtZSIsInN1YnNjaGVtYSIsImNvbXBvc2l0ZVJ1bGUiLCJjcmVhdGVFcnJvcnMiLCJhbGxFcnJvcnMiLCJmYWlsUmVzdWx0IiwicmVzZXQiLCJlcnJvciIsIm1lc3NhZ2UiLCJkZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/applicator/not.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/applicator/oneOf.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/applicator/oneOf.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst codegen_1 = __webpack_require__(/*! ../../compile/codegen */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/codegen/index.js\");\nconst util_1 = __webpack_require__(/*! ../../compile/util */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/util.js\");\nconst error = {\n    message: \"must match exactly one schema in oneOf\",\n    params: ({ params })=>(0, codegen_1._)`{passingSchemas: ${params.passing}}`\n};\nconst def = {\n    keyword: \"oneOf\",\n    schemaType: \"array\",\n    trackErrors: true,\n    error,\n    code (cxt) {\n        const { gen, schema, parentSchema, it } = cxt;\n        /* istanbul ignore if */ if (!Array.isArray(schema)) throw new Error(\"ajv implementation error\");\n        if (it.opts.discriminator && parentSchema.discriminator) return;\n        const schArr = schema;\n        const valid = gen.let(\"valid\", false);\n        const passing = gen.let(\"passing\", null);\n        const schValid = gen.name(\"_valid\");\n        cxt.setParams({\n            passing\n        });\n        // TODO possibly fail straight away (with warning or exception) if there are two empty always valid schemas\n        gen.block(validateOneOf);\n        cxt.result(valid, ()=>cxt.reset(), ()=>cxt.error(true));\n        function validateOneOf() {\n            schArr.forEach((sch, i)=>{\n                let schCxt;\n                if ((0, util_1.alwaysValidSchema)(it, sch)) {\n                    gen.var(schValid, true);\n                } else {\n                    schCxt = cxt.subschema({\n                        keyword: \"oneOf\",\n                        schemaProp: i,\n                        compositeRule: true\n                    }, schValid);\n                }\n                if (i > 0) {\n                    gen.if((0, codegen_1._)`${schValid} && ${valid}`).assign(valid, false).assign(passing, (0, codegen_1._)`[${passing}, ${i}]`).else();\n                }\n                gen.if(schValid, ()=>{\n                    gen.assign(valid, true);\n                    gen.assign(passing, i);\n                    if (schCxt) cxt.mergeEvaluated(schCxt, codegen_1.Name);\n                });\n            });\n        }\n    }\n};\nexports[\"default\"] = def; //# sourceMappingURL=oneOf.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG5lYXItanMvYWNjb3VudHMvbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L3ZvY2FidWxhcmllcy9hcHBsaWNhdG9yL29uZU9mLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdELE1BQU1DLFlBQVlDLG1CQUFPQSxDQUFDLG9IQUF1QjtBQUNqRCxNQUFNQyxTQUFTRCxtQkFBT0EsQ0FBQyx3R0FBb0I7QUFDM0MsTUFBTUUsUUFBUTtJQUNWQyxTQUFTO0lBQ1RDLFFBQVEsQ0FBQyxFQUFFQSxNQUFNLEVBQUUsR0FBSyxDQUFDLEdBQUdMLFVBQVVNLENBQUMsQ0FBRSxDQUFDLGlCQUFpQixFQUFFRCxPQUFPRSxPQUFPLENBQUMsQ0FBQyxDQUFDO0FBQ2xGO0FBQ0EsTUFBTUMsTUFBTTtJQUNSQyxTQUFTO0lBQ1RDLFlBQVk7SUFDWkMsYUFBYTtJQUNiUjtJQUNBUyxNQUFLQyxHQUFHO1FBQ0osTUFBTSxFQUFFQyxHQUFHLEVBQUVDLE1BQU0sRUFBRUMsWUFBWSxFQUFFQyxFQUFFLEVBQUUsR0FBR0o7UUFDMUMsc0JBQXNCLEdBQ3RCLElBQUksQ0FBQ0ssTUFBTUMsT0FBTyxDQUFDSixTQUNmLE1BQU0sSUFBSUssTUFBTTtRQUNwQixJQUFJSCxHQUFHSSxJQUFJLENBQUNDLGFBQWEsSUFBSU4sYUFBYU0sYUFBYSxFQUNuRDtRQUNKLE1BQU1DLFNBQVNSO1FBQ2YsTUFBTVMsUUFBUVYsSUFBSVcsR0FBRyxDQUFDLFNBQVM7UUFDL0IsTUFBTWxCLFVBQVVPLElBQUlXLEdBQUcsQ0FBQyxXQUFXO1FBQ25DLE1BQU1DLFdBQVdaLElBQUlhLElBQUksQ0FBQztRQUMxQmQsSUFBSWUsU0FBUyxDQUFDO1lBQUVyQjtRQUFRO1FBQ3hCLDJHQUEyRztRQUMzR08sSUFBSWUsS0FBSyxDQUFDQztRQUNWakIsSUFBSWtCLE1BQU0sQ0FBQ1AsT0FBTyxJQUFNWCxJQUFJbUIsS0FBSyxJQUFJLElBQU1uQixJQUFJVixLQUFLLENBQUM7UUFDckQsU0FBUzJCO1lBQ0xQLE9BQU9VLE9BQU8sQ0FBQyxDQUFDQyxLQUFLQztnQkFDakIsSUFBSUM7Z0JBQ0osSUFBSSxDQUFDLEdBQUdsQyxPQUFPbUMsaUJBQWlCLEVBQUVwQixJQUFJaUIsTUFBTTtvQkFDeENwQixJQUFJd0IsR0FBRyxDQUFDWixVQUFVO2dCQUN0QixPQUNLO29CQUNEVSxTQUFTdkIsSUFBSTBCLFNBQVMsQ0FBQzt3QkFDbkI5QixTQUFTO3dCQUNUK0IsWUFBWUw7d0JBQ1pNLGVBQWU7b0JBQ25CLEdBQUdmO2dCQUNQO2dCQUNBLElBQUlTLElBQUksR0FBRztvQkFDUHJCLElBQ0s0QixFQUFFLENBQUMsQ0FBQyxHQUFHMUMsVUFBVU0sQ0FBQyxDQUFFLENBQUMsRUFBRW9CLFNBQVMsSUFBSSxFQUFFRixNQUFNLENBQUMsRUFDN0NtQixNQUFNLENBQUNuQixPQUFPLE9BQ2RtQixNQUFNLENBQUNwQyxTQUFTLENBQUMsR0FBR1AsVUFBVU0sQ0FBQyxDQUFFLENBQUMsQ0FBQyxFQUFFQyxRQUFRLEVBQUUsRUFBRTRCLEVBQUUsQ0FBQyxDQUFDLEVBQ3JEUyxJQUFJO2dCQUNiO2dCQUNBOUIsSUFBSTRCLEVBQUUsQ0FBQ2hCLFVBQVU7b0JBQ2JaLElBQUk2QixNQUFNLENBQUNuQixPQUFPO29CQUNsQlYsSUFBSTZCLE1BQU0sQ0FBQ3BDLFNBQVM0QjtvQkFDcEIsSUFBSUMsUUFDQXZCLElBQUlnQyxjQUFjLENBQUNULFFBQVFwQyxVQUFVOEMsSUFBSTtnQkFDakQ7WUFDSjtRQUNKO0lBQ0o7QUFDSjtBQUNBaEQsa0JBQWUsR0FBR1UsS0FDbEIsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaS1hbS1uZWFyYnkvLi9ub2RlX21vZHVsZXMvQG5lYXItanMvYWNjb3VudHMvbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L3ZvY2FidWxhcmllcy9hcHBsaWNhdG9yL29uZU9mLmpzPzk4OTgiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBjb2RlZ2VuXzEgPSByZXF1aXJlKFwiLi4vLi4vY29tcGlsZS9jb2RlZ2VuXCIpO1xuY29uc3QgdXRpbF8xID0gcmVxdWlyZShcIi4uLy4uL2NvbXBpbGUvdXRpbFwiKTtcbmNvbnN0IGVycm9yID0ge1xuICAgIG1lc3NhZ2U6IFwibXVzdCBtYXRjaCBleGFjdGx5IG9uZSBzY2hlbWEgaW4gb25lT2ZcIixcbiAgICBwYXJhbXM6ICh7IHBhcmFtcyB9KSA9PiAoMCwgY29kZWdlbl8xLl8pIGB7cGFzc2luZ1NjaGVtYXM6ICR7cGFyYW1zLnBhc3Npbmd9fWAsXG59O1xuY29uc3QgZGVmID0ge1xuICAgIGtleXdvcmQ6IFwib25lT2ZcIixcbiAgICBzY2hlbWFUeXBlOiBcImFycmF5XCIsXG4gICAgdHJhY2tFcnJvcnM6IHRydWUsXG4gICAgZXJyb3IsXG4gICAgY29kZShjeHQpIHtcbiAgICAgICAgY29uc3QgeyBnZW4sIHNjaGVtYSwgcGFyZW50U2NoZW1hLCBpdCB9ID0gY3h0O1xuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHNjaGVtYSkpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJhanYgaW1wbGVtZW50YXRpb24gZXJyb3JcIik7XG4gICAgICAgIGlmIChpdC5vcHRzLmRpc2NyaW1pbmF0b3IgJiYgcGFyZW50U2NoZW1hLmRpc2NyaW1pbmF0b3IpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGNvbnN0IHNjaEFyciA9IHNjaGVtYTtcbiAgICAgICAgY29uc3QgdmFsaWQgPSBnZW4ubGV0KFwidmFsaWRcIiwgZmFsc2UpO1xuICAgICAgICBjb25zdCBwYXNzaW5nID0gZ2VuLmxldChcInBhc3NpbmdcIiwgbnVsbCk7XG4gICAgICAgIGNvbnN0IHNjaFZhbGlkID0gZ2VuLm5hbWUoXCJfdmFsaWRcIik7XG4gICAgICAgIGN4dC5zZXRQYXJhbXMoeyBwYXNzaW5nIH0pO1xuICAgICAgICAvLyBUT0RPIHBvc3NpYmx5IGZhaWwgc3RyYWlnaHQgYXdheSAod2l0aCB3YXJuaW5nIG9yIGV4Y2VwdGlvbikgaWYgdGhlcmUgYXJlIHR3byBlbXB0eSBhbHdheXMgdmFsaWQgc2NoZW1hc1xuICAgICAgICBnZW4uYmxvY2sodmFsaWRhdGVPbmVPZik7XG4gICAgICAgIGN4dC5yZXN1bHQodmFsaWQsICgpID0+IGN4dC5yZXNldCgpLCAoKSA9PiBjeHQuZXJyb3IodHJ1ZSkpO1xuICAgICAgICBmdW5jdGlvbiB2YWxpZGF0ZU9uZU9mKCkge1xuICAgICAgICAgICAgc2NoQXJyLmZvckVhY2goKHNjaCwgaSkgPT4ge1xuICAgICAgICAgICAgICAgIGxldCBzY2hDeHQ7XG4gICAgICAgICAgICAgICAgaWYgKCgwLCB1dGlsXzEuYWx3YXlzVmFsaWRTY2hlbWEpKGl0LCBzY2gpKSB7XG4gICAgICAgICAgICAgICAgICAgIGdlbi52YXIoc2NoVmFsaWQsIHRydWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgc2NoQ3h0ID0gY3h0LnN1YnNjaGVtYSh7XG4gICAgICAgICAgICAgICAgICAgICAgICBrZXl3b3JkOiBcIm9uZU9mXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBzY2hlbWFQcm9wOiBpLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29tcG9zaXRlUnVsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgfSwgc2NoVmFsaWQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoaSA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgZ2VuXG4gICAgICAgICAgICAgICAgICAgICAgICAuaWYoKDAsIGNvZGVnZW5fMS5fKSBgJHtzY2hWYWxpZH0gJiYgJHt2YWxpZH1gKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmFzc2lnbih2YWxpZCwgZmFsc2UpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYXNzaWduKHBhc3NpbmcsICgwLCBjb2RlZ2VuXzEuXykgYFske3Bhc3Npbmd9LCAke2l9XWApXG4gICAgICAgICAgICAgICAgICAgICAgICAuZWxzZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBnZW4uaWYoc2NoVmFsaWQsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgZ2VuLmFzc2lnbih2YWxpZCwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIGdlbi5hc3NpZ24ocGFzc2luZywgaSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzY2hDeHQpXG4gICAgICAgICAgICAgICAgICAgICAgICBjeHQubWVyZ2VFdmFsdWF0ZWQoc2NoQ3h0LCBjb2RlZ2VuXzEuTmFtZSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH0sXG59O1xuZXhwb3J0cy5kZWZhdWx0ID0gZGVmO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9b25lT2YuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiY29kZWdlbl8xIiwicmVxdWlyZSIsInV0aWxfMSIsImVycm9yIiwibWVzc2FnZSIsInBhcmFtcyIsIl8iLCJwYXNzaW5nIiwiZGVmIiwia2V5d29yZCIsInNjaGVtYVR5cGUiLCJ0cmFja0Vycm9ycyIsImNvZGUiLCJjeHQiLCJnZW4iLCJzY2hlbWEiLCJwYXJlbnRTY2hlbWEiLCJpdCIsIkFycmF5IiwiaXNBcnJheSIsIkVycm9yIiwib3B0cyIsImRpc2NyaW1pbmF0b3IiLCJzY2hBcnIiLCJ2YWxpZCIsImxldCIsInNjaFZhbGlkIiwibmFtZSIsInNldFBhcmFtcyIsImJsb2NrIiwidmFsaWRhdGVPbmVPZiIsInJlc3VsdCIsInJlc2V0IiwiZm9yRWFjaCIsInNjaCIsImkiLCJzY2hDeHQiLCJhbHdheXNWYWxpZFNjaGVtYSIsInZhciIsInN1YnNjaGVtYSIsInNjaGVtYVByb3AiLCJjb21wb3NpdGVSdWxlIiwiaWYiLCJhc3NpZ24iLCJlbHNlIiwibWVyZ2VFdmFsdWF0ZWQiLCJOYW1lIiwiZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/applicator/oneOf.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/applicator/patternProperties.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/applicator/patternProperties.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst code_1 = __webpack_require__(/*! ../code */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/code.js\");\nconst codegen_1 = __webpack_require__(/*! ../../compile/codegen */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/codegen/index.js\");\nconst util_1 = __webpack_require__(/*! ../../compile/util */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/util.js\");\nconst util_2 = __webpack_require__(/*! ../../compile/util */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/util.js\");\nconst def = {\n    keyword: \"patternProperties\",\n    type: \"object\",\n    schemaType: \"object\",\n    code (cxt) {\n        const { gen, schema, data, parentSchema, it } = cxt;\n        const { opts } = it;\n        const patterns = (0, code_1.allSchemaProperties)(schema);\n        const alwaysValidPatterns = patterns.filter((p)=>(0, util_1.alwaysValidSchema)(it, schema[p]));\n        if (patterns.length === 0 || alwaysValidPatterns.length === patterns.length && (!it.opts.unevaluated || it.props === true)) {\n            return;\n        }\n        const checkProperties = opts.strictSchema && !opts.allowMatchingProperties && parentSchema.properties;\n        const valid = gen.name(\"valid\");\n        if (it.props !== true && !(it.props instanceof codegen_1.Name)) {\n            it.props = (0, util_2.evaluatedPropsToName)(gen, it.props);\n        }\n        const { props } = it;\n        validatePatternProperties();\n        function validatePatternProperties() {\n            for (const pat of patterns){\n                if (checkProperties) checkMatchingProperties(pat);\n                if (it.allErrors) {\n                    validateProperties(pat);\n                } else {\n                    gen.var(valid, true); // TODO var\n                    validateProperties(pat);\n                    gen.if(valid);\n                }\n            }\n        }\n        function checkMatchingProperties(pat) {\n            for(const prop in checkProperties){\n                if (new RegExp(pat).test(prop)) {\n                    (0, util_1.checkStrictMode)(it, `property ${prop} matches pattern ${pat} (use allowMatchingProperties)`);\n                }\n            }\n        }\n        function validateProperties(pat) {\n            gen.forIn(\"key\", data, (key)=>{\n                gen.if((0, codegen_1._)`${(0, code_1.usePattern)(cxt, pat)}.test(${key})`, ()=>{\n                    const alwaysValid = alwaysValidPatterns.includes(pat);\n                    if (!alwaysValid) {\n                        cxt.subschema({\n                            keyword: \"patternProperties\",\n                            schemaProp: pat,\n                            dataProp: key,\n                            dataPropType: util_2.Type.Str\n                        }, valid);\n                    }\n                    if (it.opts.unevaluated && props !== true) {\n                        gen.assign((0, codegen_1._)`${props}[${key}]`, true);\n                    } else if (!alwaysValid && !it.allErrors) {\n                        // can short-circuit if `unevaluatedProperties` is not supported (opts.next === false)\n                        // or if all properties were evaluated (props === true)\n                        gen.if((0, codegen_1.not)(valid), ()=>gen.break());\n                    }\n                });\n            });\n        }\n    }\n};\nexports[\"default\"] = def; //# sourceMappingURL=patternProperties.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/applicator/patternProperties.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/applicator/prefixItems.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/applicator/prefixItems.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst items_1 = __webpack_require__(/*! ./items */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/applicator/items.js\");\nconst def = {\n    keyword: \"prefixItems\",\n    type: \"array\",\n    schemaType: [\n        \"array\"\n    ],\n    before: \"uniqueItems\",\n    code: (cxt)=>(0, items_1.validateTuple)(cxt, \"items\")\n};\nexports[\"default\"] = def; //# sourceMappingURL=prefixItems.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG5lYXItanMvYWNjb3VudHMvbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L3ZvY2FidWxhcmllcy9hcHBsaWNhdG9yL3ByZWZpeEl0ZW1zLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdELE1BQU1DLFVBQVVDLG1CQUFPQSxDQUFDLDhHQUFTO0FBQ2pDLE1BQU1DLE1BQU07SUFDUkMsU0FBUztJQUNUQyxNQUFNO0lBQ05DLFlBQVk7UUFBQztLQUFRO0lBQ3JCQyxRQUFRO0lBQ1JDLE1BQU0sQ0FBQ0MsTUFBUSxDQUFDLEdBQUdSLFFBQVFTLGFBQWEsRUFBRUQsS0FBSztBQUNuRDtBQUNBVixrQkFBZSxHQUFHSSxLQUNsQix1Q0FBdUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pLWFtLW5lYXJieS8uL25vZGVfbW9kdWxlcy9AbmVhci1qcy9hY2NvdW50cy9ub2RlX21vZHVsZXMvYWp2L2Rpc3Qvdm9jYWJ1bGFyaWVzL2FwcGxpY2F0b3IvcHJlZml4SXRlbXMuanM/N2MwZSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGl0ZW1zXzEgPSByZXF1aXJlKFwiLi9pdGVtc1wiKTtcbmNvbnN0IGRlZiA9IHtcbiAgICBrZXl3b3JkOiBcInByZWZpeEl0ZW1zXCIsXG4gICAgdHlwZTogXCJhcnJheVwiLFxuICAgIHNjaGVtYVR5cGU6IFtcImFycmF5XCJdLFxuICAgIGJlZm9yZTogXCJ1bmlxdWVJdGVtc1wiLFxuICAgIGNvZGU6IChjeHQpID0+ICgwLCBpdGVtc18xLnZhbGlkYXRlVHVwbGUpKGN4dCwgXCJpdGVtc1wiKSxcbn07XG5leHBvcnRzLmRlZmF1bHQgPSBkZWY7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wcmVmaXhJdGVtcy5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJpdGVtc18xIiwicmVxdWlyZSIsImRlZiIsImtleXdvcmQiLCJ0eXBlIiwic2NoZW1hVHlwZSIsImJlZm9yZSIsImNvZGUiLCJjeHQiLCJ2YWxpZGF0ZVR1cGxlIiwiZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/applicator/prefixItems.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/applicator/properties.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/applicator/properties.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst validate_1 = __webpack_require__(/*! ../../compile/validate */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/validate/index.js\");\nconst code_1 = __webpack_require__(/*! ../code */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/code.js\");\nconst util_1 = __webpack_require__(/*! ../../compile/util */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/util.js\");\nconst additionalProperties_1 = __webpack_require__(/*! ./additionalProperties */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/applicator/additionalProperties.js\");\nconst def = {\n    keyword: \"properties\",\n    type: \"object\",\n    schemaType: \"object\",\n    code (cxt) {\n        const { gen, schema, parentSchema, data, it } = cxt;\n        if (it.opts.removeAdditional === \"all\" && parentSchema.additionalProperties === undefined) {\n            additionalProperties_1.default.code(new validate_1.KeywordCxt(it, additionalProperties_1.default, \"additionalProperties\"));\n        }\n        const allProps = (0, code_1.allSchemaProperties)(schema);\n        for (const prop of allProps){\n            it.definedProperties.add(prop);\n        }\n        if (it.opts.unevaluated && allProps.length && it.props !== true) {\n            it.props = util_1.mergeEvaluated.props(gen, (0, util_1.toHash)(allProps), it.props);\n        }\n        const properties = allProps.filter((p)=>!(0, util_1.alwaysValidSchema)(it, schema[p]));\n        if (properties.length === 0) return;\n        const valid = gen.name(\"valid\");\n        for (const prop of properties){\n            if (hasDefault(prop)) {\n                applyPropertySchema(prop);\n            } else {\n                gen.if((0, code_1.propertyInData)(gen, data, prop, it.opts.ownProperties));\n                applyPropertySchema(prop);\n                if (!it.allErrors) gen.else().var(valid, true);\n                gen.endIf();\n            }\n            cxt.it.definedProperties.add(prop);\n            cxt.ok(valid);\n        }\n        function hasDefault(prop) {\n            return it.opts.useDefaults && !it.compositeRule && schema[prop].default !== undefined;\n        }\n        function applyPropertySchema(prop) {\n            cxt.subschema({\n                keyword: \"properties\",\n                schemaProp: prop,\n                dataProp: prop\n            }, valid);\n        }\n    }\n};\nexports[\"default\"] = def; //# sourceMappingURL=properties.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG5lYXItanMvYWNjb3VudHMvbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L3ZvY2FidWxhcmllcy9hcHBsaWNhdG9yL3Byb3BlcnRpZXMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0QsTUFBTUMsYUFBYUMsbUJBQU9BLENBQUMsc0hBQXdCO0FBQ25ELE1BQU1DLFNBQVNELG1CQUFPQSxDQUFDLGtHQUFTO0FBQ2hDLE1BQU1FLFNBQVNGLG1CQUFPQSxDQUFDLHdHQUFvQjtBQUMzQyxNQUFNRyx5QkFBeUJILG1CQUFPQSxDQUFDLDRJQUF3QjtBQUMvRCxNQUFNSSxNQUFNO0lBQ1JDLFNBQVM7SUFDVEMsTUFBTTtJQUNOQyxZQUFZO0lBQ1pDLE1BQUtDLEdBQUc7UUFDSixNQUFNLEVBQUVDLEdBQUcsRUFBRUMsTUFBTSxFQUFFQyxZQUFZLEVBQUVDLElBQUksRUFBRUMsRUFBRSxFQUFFLEdBQUdMO1FBQ2hELElBQUlLLEdBQUdDLElBQUksQ0FBQ0MsZ0JBQWdCLEtBQUssU0FBU0osYUFBYUssb0JBQW9CLEtBQUtDLFdBQVc7WUFDdkZmLHVCQUF1QmdCLE9BQU8sQ0FBQ1gsSUFBSSxDQUFDLElBQUlULFdBQVdxQixVQUFVLENBQUNOLElBQUlYLHVCQUF1QmdCLE9BQU8sRUFBRTtRQUN0RztRQUNBLE1BQU1FLFdBQVcsQ0FBQyxHQUFHcEIsT0FBT3FCLG1CQUFtQixFQUFFWDtRQUNqRCxLQUFLLE1BQU1ZLFFBQVFGLFNBQVU7WUFDekJQLEdBQUdVLGlCQUFpQixDQUFDQyxHQUFHLENBQUNGO1FBQzdCO1FBQ0EsSUFBSVQsR0FBR0MsSUFBSSxDQUFDVyxXQUFXLElBQUlMLFNBQVNNLE1BQU0sSUFBSWIsR0FBR2MsS0FBSyxLQUFLLE1BQU07WUFDN0RkLEdBQUdjLEtBQUssR0FBRzFCLE9BQU8yQixjQUFjLENBQUNELEtBQUssQ0FBQ2xCLEtBQUssQ0FBQyxHQUFHUixPQUFPNEIsTUFBTSxFQUFFVCxXQUFXUCxHQUFHYyxLQUFLO1FBQ3RGO1FBQ0EsTUFBTUcsYUFBYVYsU0FBU1csTUFBTSxDQUFDLENBQUNDLElBQU0sQ0FBQyxDQUFDLEdBQUcvQixPQUFPZ0MsaUJBQWlCLEVBQUVwQixJQUFJSCxNQUFNLENBQUNzQixFQUFFO1FBQ3RGLElBQUlGLFdBQVdKLE1BQU0sS0FBSyxHQUN0QjtRQUNKLE1BQU1RLFFBQVF6QixJQUFJMEIsSUFBSSxDQUFDO1FBQ3ZCLEtBQUssTUFBTWIsUUFBUVEsV0FBWTtZQUMzQixJQUFJTSxXQUFXZCxPQUFPO2dCQUNsQmUsb0JBQW9CZjtZQUN4QixPQUNLO2dCQUNEYixJQUFJNkIsRUFBRSxDQUFDLENBQUMsR0FBR3RDLE9BQU91QyxjQUFjLEVBQUU5QixLQUFLRyxNQUFNVSxNQUFNVCxHQUFHQyxJQUFJLENBQUMwQixhQUFhO2dCQUN4RUgsb0JBQW9CZjtnQkFDcEIsSUFBSSxDQUFDVCxHQUFHNEIsU0FBUyxFQUNiaEMsSUFBSWlDLElBQUksR0FBR0MsR0FBRyxDQUFDVCxPQUFPO2dCQUMxQnpCLElBQUltQyxLQUFLO1lBQ2I7WUFDQXBDLElBQUlLLEVBQUUsQ0FBQ1UsaUJBQWlCLENBQUNDLEdBQUcsQ0FBQ0Y7WUFDN0JkLElBQUlxQyxFQUFFLENBQUNYO1FBQ1g7UUFDQSxTQUFTRSxXQUFXZCxJQUFJO1lBQ3BCLE9BQU9ULEdBQUdDLElBQUksQ0FBQ2dDLFdBQVcsSUFBSSxDQUFDakMsR0FBR2tDLGFBQWEsSUFBSXJDLE1BQU0sQ0FBQ1ksS0FBSyxDQUFDSixPQUFPLEtBQUtEO1FBQ2hGO1FBQ0EsU0FBU29CLG9CQUFvQmYsSUFBSTtZQUM3QmQsSUFBSXdDLFNBQVMsQ0FBQztnQkFDVjVDLFNBQVM7Z0JBQ1Q2QyxZQUFZM0I7Z0JBQ1o0QixVQUFVNUI7WUFDZCxHQUFHWTtRQUNQO0lBQ0o7QUFDSjtBQUNBdEMsa0JBQWUsR0FBR08sS0FDbEIsc0NBQXNDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaS1hbS1uZWFyYnkvLi9ub2RlX21vZHVsZXMvQG5lYXItanMvYWNjb3VudHMvbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L3ZvY2FidWxhcmllcy9hcHBsaWNhdG9yL3Byb3BlcnRpZXMuanM/N2Y1OCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IHZhbGlkYXRlXzEgPSByZXF1aXJlKFwiLi4vLi4vY29tcGlsZS92YWxpZGF0ZVwiKTtcbmNvbnN0IGNvZGVfMSA9IHJlcXVpcmUoXCIuLi9jb2RlXCIpO1xuY29uc3QgdXRpbF8xID0gcmVxdWlyZShcIi4uLy4uL2NvbXBpbGUvdXRpbFwiKTtcbmNvbnN0IGFkZGl0aW9uYWxQcm9wZXJ0aWVzXzEgPSByZXF1aXJlKFwiLi9hZGRpdGlvbmFsUHJvcGVydGllc1wiKTtcbmNvbnN0IGRlZiA9IHtcbiAgICBrZXl3b3JkOiBcInByb3BlcnRpZXNcIixcbiAgICB0eXBlOiBcIm9iamVjdFwiLFxuICAgIHNjaGVtYVR5cGU6IFwib2JqZWN0XCIsXG4gICAgY29kZShjeHQpIHtcbiAgICAgICAgY29uc3QgeyBnZW4sIHNjaGVtYSwgcGFyZW50U2NoZW1hLCBkYXRhLCBpdCB9ID0gY3h0O1xuICAgICAgICBpZiAoaXQub3B0cy5yZW1vdmVBZGRpdGlvbmFsID09PSBcImFsbFwiICYmIHBhcmVudFNjaGVtYS5hZGRpdGlvbmFsUHJvcGVydGllcyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBhZGRpdGlvbmFsUHJvcGVydGllc18xLmRlZmF1bHQuY29kZShuZXcgdmFsaWRhdGVfMS5LZXl3b3JkQ3h0KGl0LCBhZGRpdGlvbmFsUHJvcGVydGllc18xLmRlZmF1bHQsIFwiYWRkaXRpb25hbFByb3BlcnRpZXNcIikpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGFsbFByb3BzID0gKDAsIGNvZGVfMS5hbGxTY2hlbWFQcm9wZXJ0aWVzKShzY2hlbWEpO1xuICAgICAgICBmb3IgKGNvbnN0IHByb3Agb2YgYWxsUHJvcHMpIHtcbiAgICAgICAgICAgIGl0LmRlZmluZWRQcm9wZXJ0aWVzLmFkZChwcm9wKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXQub3B0cy51bmV2YWx1YXRlZCAmJiBhbGxQcm9wcy5sZW5ndGggJiYgaXQucHJvcHMgIT09IHRydWUpIHtcbiAgICAgICAgICAgIGl0LnByb3BzID0gdXRpbF8xLm1lcmdlRXZhbHVhdGVkLnByb3BzKGdlbiwgKDAsIHV0aWxfMS50b0hhc2gpKGFsbFByb3BzKSwgaXQucHJvcHMpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHByb3BlcnRpZXMgPSBhbGxQcm9wcy5maWx0ZXIoKHApID0+ICEoMCwgdXRpbF8xLmFsd2F5c1ZhbGlkU2NoZW1hKShpdCwgc2NoZW1hW3BdKSk7XG4gICAgICAgIGlmIChwcm9wZXJ0aWVzLmxlbmd0aCA9PT0gMClcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgY29uc3QgdmFsaWQgPSBnZW4ubmFtZShcInZhbGlkXCIpO1xuICAgICAgICBmb3IgKGNvbnN0IHByb3Agb2YgcHJvcGVydGllcykge1xuICAgICAgICAgICAgaWYgKGhhc0RlZmF1bHQocHJvcCkpIHtcbiAgICAgICAgICAgICAgICBhcHBseVByb3BlcnR5U2NoZW1hKHByb3ApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZ2VuLmlmKCgwLCBjb2RlXzEucHJvcGVydHlJbkRhdGEpKGdlbiwgZGF0YSwgcHJvcCwgaXQub3B0cy5vd25Qcm9wZXJ0aWVzKSk7XG4gICAgICAgICAgICAgICAgYXBwbHlQcm9wZXJ0eVNjaGVtYShwcm9wKTtcbiAgICAgICAgICAgICAgICBpZiAoIWl0LmFsbEVycm9ycylcbiAgICAgICAgICAgICAgICAgICAgZ2VuLmVsc2UoKS52YXIodmFsaWQsIHRydWUpO1xuICAgICAgICAgICAgICAgIGdlbi5lbmRJZigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY3h0Lml0LmRlZmluZWRQcm9wZXJ0aWVzLmFkZChwcm9wKTtcbiAgICAgICAgICAgIGN4dC5vayh2YWxpZCk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gaGFzRGVmYXVsdChwcm9wKSB7XG4gICAgICAgICAgICByZXR1cm4gaXQub3B0cy51c2VEZWZhdWx0cyAmJiAhaXQuY29tcG9zaXRlUnVsZSAmJiBzY2hlbWFbcHJvcF0uZGVmYXVsdCAhPT0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGFwcGx5UHJvcGVydHlTY2hlbWEocHJvcCkge1xuICAgICAgICAgICAgY3h0LnN1YnNjaGVtYSh7XG4gICAgICAgICAgICAgICAga2V5d29yZDogXCJwcm9wZXJ0aWVzXCIsXG4gICAgICAgICAgICAgICAgc2NoZW1hUHJvcDogcHJvcCxcbiAgICAgICAgICAgICAgICBkYXRhUHJvcDogcHJvcCxcbiAgICAgICAgICAgIH0sIHZhbGlkKTtcbiAgICAgICAgfVxuICAgIH0sXG59O1xuZXhwb3J0cy5kZWZhdWx0ID0gZGVmO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cHJvcGVydGllcy5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJ2YWxpZGF0ZV8xIiwicmVxdWlyZSIsImNvZGVfMSIsInV0aWxfMSIsImFkZGl0aW9uYWxQcm9wZXJ0aWVzXzEiLCJkZWYiLCJrZXl3b3JkIiwidHlwZSIsInNjaGVtYVR5cGUiLCJjb2RlIiwiY3h0IiwiZ2VuIiwic2NoZW1hIiwicGFyZW50U2NoZW1hIiwiZGF0YSIsIml0Iiwib3B0cyIsInJlbW92ZUFkZGl0aW9uYWwiLCJhZGRpdGlvbmFsUHJvcGVydGllcyIsInVuZGVmaW5lZCIsImRlZmF1bHQiLCJLZXl3b3JkQ3h0IiwiYWxsUHJvcHMiLCJhbGxTY2hlbWFQcm9wZXJ0aWVzIiwicHJvcCIsImRlZmluZWRQcm9wZXJ0aWVzIiwiYWRkIiwidW5ldmFsdWF0ZWQiLCJsZW5ndGgiLCJwcm9wcyIsIm1lcmdlRXZhbHVhdGVkIiwidG9IYXNoIiwicHJvcGVydGllcyIsImZpbHRlciIsInAiLCJhbHdheXNWYWxpZFNjaGVtYSIsInZhbGlkIiwibmFtZSIsImhhc0RlZmF1bHQiLCJhcHBseVByb3BlcnR5U2NoZW1hIiwiaWYiLCJwcm9wZXJ0eUluRGF0YSIsIm93blByb3BlcnRpZXMiLCJhbGxFcnJvcnMiLCJlbHNlIiwidmFyIiwiZW5kSWYiLCJvayIsInVzZURlZmF1bHRzIiwiY29tcG9zaXRlUnVsZSIsInN1YnNjaGVtYSIsInNjaGVtYVByb3AiLCJkYXRhUHJvcCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/applicator/properties.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/applicator/propertyNames.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/applicator/propertyNames.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst codegen_1 = __webpack_require__(/*! ../../compile/codegen */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/codegen/index.js\");\nconst util_1 = __webpack_require__(/*! ../../compile/util */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/util.js\");\nconst error = {\n    message: \"property name must be valid\",\n    params: ({ params })=>(0, codegen_1._)`{propertyName: ${params.propertyName}}`\n};\nconst def = {\n    keyword: \"propertyNames\",\n    type: \"object\",\n    schemaType: [\n        \"object\",\n        \"boolean\"\n    ],\n    error,\n    code (cxt) {\n        const { gen, schema, data, it } = cxt;\n        if ((0, util_1.alwaysValidSchema)(it, schema)) return;\n        const valid = gen.name(\"valid\");\n        gen.forIn(\"key\", data, (key)=>{\n            cxt.setParams({\n                propertyName: key\n            });\n            cxt.subschema({\n                keyword: \"propertyNames\",\n                data: key,\n                dataTypes: [\n                    \"string\"\n                ],\n                propertyName: key,\n                compositeRule: true\n            }, valid);\n            gen.if((0, codegen_1.not)(valid), ()=>{\n                cxt.error(true);\n                if (!it.allErrors) gen.break();\n            });\n        });\n        cxt.ok(valid);\n    }\n};\nexports[\"default\"] = def; //# sourceMappingURL=propertyNames.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG5lYXItanMvYWNjb3VudHMvbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L3ZvY2FidWxhcmllcy9hcHBsaWNhdG9yL3Byb3BlcnR5TmFtZXMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0QsTUFBTUMsWUFBWUMsbUJBQU9BLENBQUMsb0hBQXVCO0FBQ2pELE1BQU1DLFNBQVNELG1CQUFPQSxDQUFDLHdHQUFvQjtBQUMzQyxNQUFNRSxRQUFRO0lBQ1ZDLFNBQVM7SUFDVEMsUUFBUSxDQUFDLEVBQUVBLE1BQU0sRUFBRSxHQUFLLENBQUMsR0FBR0wsVUFBVU0sQ0FBQyxDQUFFLENBQUMsZUFBZSxFQUFFRCxPQUFPRSxZQUFZLENBQUMsQ0FBQyxDQUFDO0FBQ3JGO0FBQ0EsTUFBTUMsTUFBTTtJQUNSQyxTQUFTO0lBQ1RDLE1BQU07SUFDTkMsWUFBWTtRQUFDO1FBQVU7S0FBVTtJQUNqQ1I7SUFDQVMsTUFBS0MsR0FBRztRQUNKLE1BQU0sRUFBRUMsR0FBRyxFQUFFQyxNQUFNLEVBQUVDLElBQUksRUFBRUMsRUFBRSxFQUFFLEdBQUdKO1FBQ2xDLElBQUksQ0FBQyxHQUFHWCxPQUFPZ0IsaUJBQWlCLEVBQUVELElBQUlGLFNBQ2xDO1FBQ0osTUFBTUksUUFBUUwsSUFBSU0sSUFBSSxDQUFDO1FBQ3ZCTixJQUFJTyxLQUFLLENBQUMsT0FBT0wsTUFBTSxDQUFDTTtZQUNwQlQsSUFBSVUsU0FBUyxDQUFDO2dCQUFFaEIsY0FBY2U7WUFBSTtZQUNsQ1QsSUFBSVcsU0FBUyxDQUFDO2dCQUNWZixTQUFTO2dCQUNUTyxNQUFNTTtnQkFDTkcsV0FBVztvQkFBQztpQkFBUztnQkFDckJsQixjQUFjZTtnQkFDZEksZUFBZTtZQUNuQixHQUFHUDtZQUNITCxJQUFJYSxFQUFFLENBQUMsQ0FBQyxHQUFHM0IsVUFBVTRCLEdBQUcsRUFBRVQsUUFBUTtnQkFDOUJOLElBQUlWLEtBQUssQ0FBQztnQkFDVixJQUFJLENBQUNjLEdBQUdZLFNBQVMsRUFDYmYsSUFBSWdCLEtBQUs7WUFDakI7UUFDSjtRQUNBakIsSUFBSWtCLEVBQUUsQ0FBQ1o7SUFDWDtBQUNKO0FBQ0FyQixrQkFBZSxHQUFHVSxLQUNsQix5Q0FBeUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pLWFtLW5lYXJieS8uL25vZGVfbW9kdWxlcy9AbmVhci1qcy9hY2NvdW50cy9ub2RlX21vZHVsZXMvYWp2L2Rpc3Qvdm9jYWJ1bGFyaWVzL2FwcGxpY2F0b3IvcHJvcGVydHlOYW1lcy5qcz9hMWI5Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgY29kZWdlbl8xID0gcmVxdWlyZShcIi4uLy4uL2NvbXBpbGUvY29kZWdlblwiKTtcbmNvbnN0IHV0aWxfMSA9IHJlcXVpcmUoXCIuLi8uLi9jb21waWxlL3V0aWxcIik7XG5jb25zdCBlcnJvciA9IHtcbiAgICBtZXNzYWdlOiBcInByb3BlcnR5IG5hbWUgbXVzdCBiZSB2YWxpZFwiLFxuICAgIHBhcmFtczogKHsgcGFyYW1zIH0pID0+ICgwLCBjb2RlZ2VuXzEuXykgYHtwcm9wZXJ0eU5hbWU6ICR7cGFyYW1zLnByb3BlcnR5TmFtZX19YCxcbn07XG5jb25zdCBkZWYgPSB7XG4gICAga2V5d29yZDogXCJwcm9wZXJ0eU5hbWVzXCIsXG4gICAgdHlwZTogXCJvYmplY3RcIixcbiAgICBzY2hlbWFUeXBlOiBbXCJvYmplY3RcIiwgXCJib29sZWFuXCJdLFxuICAgIGVycm9yLFxuICAgIGNvZGUoY3h0KSB7XG4gICAgICAgIGNvbnN0IHsgZ2VuLCBzY2hlbWEsIGRhdGEsIGl0IH0gPSBjeHQ7XG4gICAgICAgIGlmICgoMCwgdXRpbF8xLmFsd2F5c1ZhbGlkU2NoZW1hKShpdCwgc2NoZW1hKSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgY29uc3QgdmFsaWQgPSBnZW4ubmFtZShcInZhbGlkXCIpO1xuICAgICAgICBnZW4uZm9ySW4oXCJrZXlcIiwgZGF0YSwgKGtleSkgPT4ge1xuICAgICAgICAgICAgY3h0LnNldFBhcmFtcyh7IHByb3BlcnR5TmFtZToga2V5IH0pO1xuICAgICAgICAgICAgY3h0LnN1YnNjaGVtYSh7XG4gICAgICAgICAgICAgICAga2V5d29yZDogXCJwcm9wZXJ0eU5hbWVzXCIsXG4gICAgICAgICAgICAgICAgZGF0YToga2V5LFxuICAgICAgICAgICAgICAgIGRhdGFUeXBlczogW1wic3RyaW5nXCJdLFxuICAgICAgICAgICAgICAgIHByb3BlcnR5TmFtZToga2V5LFxuICAgICAgICAgICAgICAgIGNvbXBvc2l0ZVJ1bGU6IHRydWUsXG4gICAgICAgICAgICB9LCB2YWxpZCk7XG4gICAgICAgICAgICBnZW4uaWYoKDAsIGNvZGVnZW5fMS5ub3QpKHZhbGlkKSwgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGN4dC5lcnJvcih0cnVlKTtcbiAgICAgICAgICAgICAgICBpZiAoIWl0LmFsbEVycm9ycylcbiAgICAgICAgICAgICAgICAgICAgZ2VuLmJyZWFrKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIGN4dC5vayh2YWxpZCk7XG4gICAgfSxcbn07XG5leHBvcnRzLmRlZmF1bHQgPSBkZWY7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wcm9wZXJ0eU5hbWVzLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImNvZGVnZW5fMSIsInJlcXVpcmUiLCJ1dGlsXzEiLCJlcnJvciIsIm1lc3NhZ2UiLCJwYXJhbXMiLCJfIiwicHJvcGVydHlOYW1lIiwiZGVmIiwia2V5d29yZCIsInR5cGUiLCJzY2hlbWFUeXBlIiwiY29kZSIsImN4dCIsImdlbiIsInNjaGVtYSIsImRhdGEiLCJpdCIsImFsd2F5c1ZhbGlkU2NoZW1hIiwidmFsaWQiLCJuYW1lIiwiZm9ySW4iLCJrZXkiLCJzZXRQYXJhbXMiLCJzdWJzY2hlbWEiLCJkYXRhVHlwZXMiLCJjb21wb3NpdGVSdWxlIiwiaWYiLCJub3QiLCJhbGxFcnJvcnMiLCJicmVhayIsIm9rIiwiZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/applicator/propertyNames.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/applicator/thenElse.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/applicator/thenElse.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst util_1 = __webpack_require__(/*! ../../compile/util */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/util.js\");\nconst def = {\n    keyword: [\n        \"then\",\n        \"else\"\n    ],\n    schemaType: [\n        \"object\",\n        \"boolean\"\n    ],\n    code ({ keyword, parentSchema, it }) {\n        if (parentSchema.if === undefined) (0, util_1.checkStrictMode)(it, `\"${keyword}\" without \"if\" is ignored`);\n    }\n};\nexports[\"default\"] = def; //# sourceMappingURL=thenElse.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG5lYXItanMvYWNjb3VudHMvbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L3ZvY2FidWxhcmllcy9hcHBsaWNhdG9yL3RoZW5FbHNlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdELE1BQU1DLFNBQVNDLG1CQUFPQSxDQUFDLHdHQUFvQjtBQUMzQyxNQUFNQyxNQUFNO0lBQ1JDLFNBQVM7UUFBQztRQUFRO0tBQU87SUFDekJDLFlBQVk7UUFBQztRQUFVO0tBQVU7SUFDakNDLE1BQUssRUFBRUYsT0FBTyxFQUFFRyxZQUFZLEVBQUVDLEVBQUUsRUFBRTtRQUM5QixJQUFJRCxhQUFhRSxFQUFFLEtBQUtDLFdBQ3BCLENBQUMsR0FBR1QsT0FBT1UsZUFBZSxFQUFFSCxJQUFJLENBQUMsQ0FBQyxFQUFFSixRQUFRLHlCQUF5QixDQUFDO0lBQzlFO0FBQ0o7QUFDQUwsa0JBQWUsR0FBR0ksS0FDbEIsb0NBQW9DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaS1hbS1uZWFyYnkvLi9ub2RlX21vZHVsZXMvQG5lYXItanMvYWNjb3VudHMvbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L3ZvY2FidWxhcmllcy9hcHBsaWNhdG9yL3RoZW5FbHNlLmpzPzBjNjciXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCB1dGlsXzEgPSByZXF1aXJlKFwiLi4vLi4vY29tcGlsZS91dGlsXCIpO1xuY29uc3QgZGVmID0ge1xuICAgIGtleXdvcmQ6IFtcInRoZW5cIiwgXCJlbHNlXCJdLFxuICAgIHNjaGVtYVR5cGU6IFtcIm9iamVjdFwiLCBcImJvb2xlYW5cIl0sXG4gICAgY29kZSh7IGtleXdvcmQsIHBhcmVudFNjaGVtYSwgaXQgfSkge1xuICAgICAgICBpZiAocGFyZW50U2NoZW1hLmlmID09PSB1bmRlZmluZWQpXG4gICAgICAgICAgICAoMCwgdXRpbF8xLmNoZWNrU3RyaWN0TW9kZSkoaXQsIGBcIiR7a2V5d29yZH1cIiB3aXRob3V0IFwiaWZcIiBpcyBpZ25vcmVkYCk7XG4gICAgfSxcbn07XG5leHBvcnRzLmRlZmF1bHQgPSBkZWY7XG4vLyMgc291cmNlTWFwcGluZ1VSTD10aGVuRWxzZS5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJ1dGlsXzEiLCJyZXF1aXJlIiwiZGVmIiwia2V5d29yZCIsInNjaGVtYVR5cGUiLCJjb2RlIiwicGFyZW50U2NoZW1hIiwiaXQiLCJpZiIsInVuZGVmaW5lZCIsImNoZWNrU3RyaWN0TW9kZSIsImRlZmF1bHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/applicator/thenElse.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/code.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/code.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.validateUnion = exports.validateArray = exports.usePattern = exports.callValidateCode = exports.schemaProperties = exports.allSchemaProperties = exports.noPropertyInData = exports.propertyInData = exports.isOwnProperty = exports.hasPropFunc = exports.reportMissingProp = exports.checkMissingProp = exports.checkReportMissingProp = void 0;\nconst codegen_1 = __webpack_require__(/*! ../compile/codegen */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/codegen/index.js\");\nconst util_1 = __webpack_require__(/*! ../compile/util */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/util.js\");\nconst names_1 = __webpack_require__(/*! ../compile/names */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/names.js\");\nconst util_2 = __webpack_require__(/*! ../compile/util */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/util.js\");\nfunction checkReportMissingProp(cxt, prop) {\n    const { gen, data, it } = cxt;\n    gen.if(noPropertyInData(gen, data, prop, it.opts.ownProperties), ()=>{\n        cxt.setParams({\n            missingProperty: (0, codegen_1._)`${prop}`\n        }, true);\n        cxt.error();\n    });\n}\nexports.checkReportMissingProp = checkReportMissingProp;\nfunction checkMissingProp({ gen, data, it: { opts } }, properties, missing) {\n    return (0, codegen_1.or)(...properties.map((prop)=>(0, codegen_1.and)(noPropertyInData(gen, data, prop, opts.ownProperties), (0, codegen_1._)`${missing} = ${prop}`)));\n}\nexports.checkMissingProp = checkMissingProp;\nfunction reportMissingProp(cxt, missing) {\n    cxt.setParams({\n        missingProperty: missing\n    }, true);\n    cxt.error();\n}\nexports.reportMissingProp = reportMissingProp;\nfunction hasPropFunc(gen) {\n    return gen.scopeValue(\"func\", {\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        ref: Object.prototype.hasOwnProperty,\n        code: (0, codegen_1._)`Object.prototype.hasOwnProperty`\n    });\n}\nexports.hasPropFunc = hasPropFunc;\nfunction isOwnProperty(gen, data, property) {\n    return (0, codegen_1._)`${hasPropFunc(gen)}.call(${data}, ${property})`;\n}\nexports.isOwnProperty = isOwnProperty;\nfunction propertyInData(gen, data, property, ownProperties) {\n    const cond = (0, codegen_1._)`${data}${(0, codegen_1.getProperty)(property)} !== undefined`;\n    return ownProperties ? (0, codegen_1._)`${cond} && ${isOwnProperty(gen, data, property)}` : cond;\n}\nexports.propertyInData = propertyInData;\nfunction noPropertyInData(gen, data, property, ownProperties) {\n    const cond = (0, codegen_1._)`${data}${(0, codegen_1.getProperty)(property)} === undefined`;\n    return ownProperties ? (0, codegen_1.or)(cond, (0, codegen_1.not)(isOwnProperty(gen, data, property))) : cond;\n}\nexports.noPropertyInData = noPropertyInData;\nfunction allSchemaProperties(schemaMap) {\n    return schemaMap ? Object.keys(schemaMap).filter((p)=>p !== \"__proto__\") : [];\n}\nexports.allSchemaProperties = allSchemaProperties;\nfunction schemaProperties(it, schemaMap) {\n    return allSchemaProperties(schemaMap).filter((p)=>!(0, util_1.alwaysValidSchema)(it, schemaMap[p]));\n}\nexports.schemaProperties = schemaProperties;\nfunction callValidateCode({ schemaCode, data, it: { gen, topSchemaRef, schemaPath, errorPath }, it }, func, context, passSchema) {\n    const dataAndSchema = passSchema ? (0, codegen_1._)`${schemaCode}, ${data}, ${topSchemaRef}${schemaPath}` : data;\n    const valCxt = [\n        [\n            names_1.default.instancePath,\n            (0, codegen_1.strConcat)(names_1.default.instancePath, errorPath)\n        ],\n        [\n            names_1.default.parentData,\n            it.parentData\n        ],\n        [\n            names_1.default.parentDataProperty,\n            it.parentDataProperty\n        ],\n        [\n            names_1.default.rootData,\n            names_1.default.rootData\n        ]\n    ];\n    if (it.opts.dynamicRef) valCxt.push([\n        names_1.default.dynamicAnchors,\n        names_1.default.dynamicAnchors\n    ]);\n    const args = (0, codegen_1._)`${dataAndSchema}, ${gen.object(...valCxt)}`;\n    return context !== codegen_1.nil ? (0, codegen_1._)`${func}.call(${context}, ${args})` : (0, codegen_1._)`${func}(${args})`;\n}\nexports.callValidateCode = callValidateCode;\nconst newRegExp = (0, codegen_1._)`new RegExp`;\nfunction usePattern({ gen, it: { opts } }, pattern) {\n    const u = opts.unicodeRegExp ? \"u\" : \"\";\n    const { regExp } = opts.code;\n    const rx = regExp(pattern, u);\n    return gen.scopeValue(\"pattern\", {\n        key: rx.toString(),\n        ref: rx,\n        code: (0, codegen_1._)`${regExp.code === \"new RegExp\" ? newRegExp : (0, util_2.useFunc)(gen, regExp)}(${pattern}, ${u})`\n    });\n}\nexports.usePattern = usePattern;\nfunction validateArray(cxt) {\n    const { gen, data, keyword, it } = cxt;\n    const valid = gen.name(\"valid\");\n    if (it.allErrors) {\n        const validArr = gen.let(\"valid\", true);\n        validateItems(()=>gen.assign(validArr, false));\n        return validArr;\n    }\n    gen.var(valid, true);\n    validateItems(()=>gen.break());\n    return valid;\n    function validateItems(notValid) {\n        const len = gen.const(\"len\", (0, codegen_1._)`${data}.length`);\n        gen.forRange(\"i\", 0, len, (i)=>{\n            cxt.subschema({\n                keyword,\n                dataProp: i,\n                dataPropType: util_1.Type.Num\n            }, valid);\n            gen.if((0, codegen_1.not)(valid), notValid);\n        });\n    }\n}\nexports.validateArray = validateArray;\nfunction validateUnion(cxt) {\n    const { gen, schema, keyword, it } = cxt;\n    /* istanbul ignore if */ if (!Array.isArray(schema)) throw new Error(\"ajv implementation error\");\n    const alwaysValid = schema.some((sch)=>(0, util_1.alwaysValidSchema)(it, sch));\n    if (alwaysValid && !it.opts.unevaluated) return;\n    const valid = gen.let(\"valid\", false);\n    const schValid = gen.name(\"_valid\");\n    gen.block(()=>schema.forEach((_sch, i)=>{\n            const schCxt = cxt.subschema({\n                keyword,\n                schemaProp: i,\n                compositeRule: true\n            }, schValid);\n            gen.assign(valid, (0, codegen_1._)`${valid} || ${schValid}`);\n            const merged = cxt.mergeValidEvaluated(schCxt, schValid);\n            // can short-circuit if `unevaluatedProperties/Items` not supported (opts.unevaluated !== true)\n            // or if all properties and items were evaluated (it.props === true && it.items === true)\n            if (!merged) gen.if((0, codegen_1.not)(valid));\n        }));\n    cxt.result(valid, ()=>cxt.reset(), ()=>cxt.error(true));\n}\nexports.validateUnion = validateUnion; //# sourceMappingURL=code.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/code.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/core/id.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/core/id.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst def = {\n    keyword: \"id\",\n    code () {\n        throw new Error('NOT SUPPORTED: keyword \"id\", use \"$id\" for schema ID');\n    }\n};\nexports[\"default\"] = def; //# sourceMappingURL=id.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG5lYXItanMvYWNjb3VudHMvbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L3ZvY2FidWxhcmllcy9jb3JlL2lkLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdELE1BQU1DLE1BQU07SUFDUkMsU0FBUztJQUNUQztRQUNJLE1BQU0sSUFBSUMsTUFBTTtJQUNwQjtBQUNKO0FBQ0FMLGtCQUFlLEdBQUdFLEtBQ2xCLDhCQUE4QiIsInNvdXJjZXMiOlsid2VicGFjazovL2ktYW0tbmVhcmJ5Ly4vbm9kZV9tb2R1bGVzL0BuZWFyLWpzL2FjY291bnRzL25vZGVfbW9kdWxlcy9hanYvZGlzdC92b2NhYnVsYXJpZXMvY29yZS9pZC5qcz82MjIzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgZGVmID0ge1xuICAgIGtleXdvcmQ6IFwiaWRcIixcbiAgICBjb2RlKCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05PVCBTVVBQT1JURUQ6IGtleXdvcmQgXCJpZFwiLCB1c2UgXCIkaWRcIiBmb3Igc2NoZW1hIElEJyk7XG4gICAgfSxcbn07XG5leHBvcnRzLmRlZmF1bHQgPSBkZWY7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pZC5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJkZWYiLCJrZXl3b3JkIiwiY29kZSIsIkVycm9yIiwiZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/core/id.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/core/index.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/core/index.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst id_1 = __webpack_require__(/*! ./id */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/core/id.js\");\nconst ref_1 = __webpack_require__(/*! ./ref */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/core/ref.js\");\nconst core = [\n    \"$schema\",\n    \"$id\",\n    \"$defs\",\n    \"$vocabulary\",\n    {\n        keyword: \"$comment\"\n    },\n    \"definitions\",\n    id_1.default,\n    ref_1.default\n];\nexports[\"default\"] = core; //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG5lYXItanMvYWNjb3VudHMvbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L3ZvY2FidWxhcmllcy9jb3JlL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdELE1BQU1DLE9BQU9DLG1CQUFPQSxDQUFDLGtHQUFNO0FBQzNCLE1BQU1DLFFBQVFELG1CQUFPQSxDQUFDLG9HQUFPO0FBQzdCLE1BQU1FLE9BQU87SUFDVDtJQUNBO0lBQ0E7SUFDQTtJQUNBO1FBQUVDLFNBQVM7SUFBVztJQUN0QjtJQUNBSixLQUFLSyxPQUFPO0lBQ1pILE1BQU1HLE9BQU87Q0FDaEI7QUFDRFAsa0JBQWUsR0FBR0ssTUFDbEIsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaS1hbS1uZWFyYnkvLi9ub2RlX21vZHVsZXMvQG5lYXItanMvYWNjb3VudHMvbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L3ZvY2FidWxhcmllcy9jb3JlL2luZGV4LmpzP2M2NjYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBpZF8xID0gcmVxdWlyZShcIi4vaWRcIik7XG5jb25zdCByZWZfMSA9IHJlcXVpcmUoXCIuL3JlZlwiKTtcbmNvbnN0IGNvcmUgPSBbXG4gICAgXCIkc2NoZW1hXCIsXG4gICAgXCIkaWRcIixcbiAgICBcIiRkZWZzXCIsXG4gICAgXCIkdm9jYWJ1bGFyeVwiLFxuICAgIHsga2V5d29yZDogXCIkY29tbWVudFwiIH0sXG4gICAgXCJkZWZpbml0aW9uc1wiLFxuICAgIGlkXzEuZGVmYXVsdCxcbiAgICByZWZfMS5kZWZhdWx0LFxuXTtcbmV4cG9ydHMuZGVmYXVsdCA9IGNvcmU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJpZF8xIiwicmVxdWlyZSIsInJlZl8xIiwiY29yZSIsImtleXdvcmQiLCJkZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/core/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/core/ref.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/core/ref.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.callRef = exports.getValidate = void 0;\nconst ref_error_1 = __webpack_require__(/*! ../../compile/ref_error */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/ref_error.js\");\nconst code_1 = __webpack_require__(/*! ../code */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/code.js\");\nconst codegen_1 = __webpack_require__(/*! ../../compile/codegen */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/codegen/index.js\");\nconst names_1 = __webpack_require__(/*! ../../compile/names */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/names.js\");\nconst compile_1 = __webpack_require__(/*! ../../compile */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/index.js\");\nconst util_1 = __webpack_require__(/*! ../../compile/util */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/util.js\");\nconst def = {\n    keyword: \"$ref\",\n    schemaType: \"string\",\n    code (cxt) {\n        const { gen, schema: $ref, it } = cxt;\n        const { baseId, schemaEnv: env, validateName, opts, self } = it;\n        const { root } = env;\n        if (($ref === \"#\" || $ref === \"#/\") && baseId === root.baseId) return callRootRef();\n        const schOrEnv = compile_1.resolveRef.call(self, root, baseId, $ref);\n        if (schOrEnv === undefined) throw new ref_error_1.default(it.opts.uriResolver, baseId, $ref);\n        if (schOrEnv instanceof compile_1.SchemaEnv) return callValidate(schOrEnv);\n        return inlineRefSchema(schOrEnv);\n        function callRootRef() {\n            if (env === root) return callRef(cxt, validateName, env, env.$async);\n            const rootName = gen.scopeValue(\"root\", {\n                ref: root\n            });\n            return callRef(cxt, (0, codegen_1._)`${rootName}.validate`, root, root.$async);\n        }\n        function callValidate(sch) {\n            const v = getValidate(cxt, sch);\n            callRef(cxt, v, sch, sch.$async);\n        }\n        function inlineRefSchema(sch) {\n            const schName = gen.scopeValue(\"schema\", opts.code.source === true ? {\n                ref: sch,\n                code: (0, codegen_1.stringify)(sch)\n            } : {\n                ref: sch\n            });\n            const valid = gen.name(\"valid\");\n            const schCxt = cxt.subschema({\n                schema: sch,\n                dataTypes: [],\n                schemaPath: codegen_1.nil,\n                topSchemaRef: schName,\n                errSchemaPath: $ref\n            }, valid);\n            cxt.mergeEvaluated(schCxt);\n            cxt.ok(valid);\n        }\n    }\n};\nfunction getValidate(cxt, sch) {\n    const { gen } = cxt;\n    return sch.validate ? gen.scopeValue(\"validate\", {\n        ref: sch.validate\n    }) : (0, codegen_1._)`${gen.scopeValue(\"wrapper\", {\n        ref: sch\n    })}.validate`;\n}\nexports.getValidate = getValidate;\nfunction callRef(cxt, v, sch, $async) {\n    const { gen, it } = cxt;\n    const { allErrors, schemaEnv: env, opts } = it;\n    const passCxt = opts.passContext ? names_1.default.this : codegen_1.nil;\n    if ($async) callAsyncRef();\n    else callSyncRef();\n    function callAsyncRef() {\n        if (!env.$async) throw new Error(\"async schema referenced by sync schema\");\n        const valid = gen.let(\"valid\");\n        gen.try(()=>{\n            gen.code((0, codegen_1._)`await ${(0, code_1.callValidateCode)(cxt, v, passCxt)}`);\n            addEvaluatedFrom(v); // TODO will not work with async, it has to be returned with the result\n            if (!allErrors) gen.assign(valid, true);\n        }, (e)=>{\n            gen.if((0, codegen_1._)`!(${e} instanceof ${it.ValidationError})`, ()=>gen.throw(e));\n            addErrorsFrom(e);\n            if (!allErrors) gen.assign(valid, false);\n        });\n        cxt.ok(valid);\n    }\n    function callSyncRef() {\n        cxt.result((0, code_1.callValidateCode)(cxt, v, passCxt), ()=>addEvaluatedFrom(v), ()=>addErrorsFrom(v));\n    }\n    function addErrorsFrom(source) {\n        const errs = (0, codegen_1._)`${source}.errors`;\n        gen.assign(names_1.default.vErrors, (0, codegen_1._)`${names_1.default.vErrors} === null ? ${errs} : ${names_1.default.vErrors}.concat(${errs})`); // TODO tagged\n        gen.assign(names_1.default.errors, (0, codegen_1._)`${names_1.default.vErrors}.length`);\n    }\n    function addEvaluatedFrom(source) {\n        var _a;\n        if (!it.opts.unevaluated) return;\n        const schEvaluated = (_a = sch === null || sch === void 0 ? void 0 : sch.validate) === null || _a === void 0 ? void 0 : _a.evaluated;\n        // TODO refactor\n        if (it.props !== true) {\n            if (schEvaluated && !schEvaluated.dynamicProps) {\n                if (schEvaluated.props !== undefined) {\n                    it.props = util_1.mergeEvaluated.props(gen, schEvaluated.props, it.props);\n                }\n            } else {\n                const props = gen.var(\"props\", (0, codegen_1._)`${source}.evaluated.props`);\n                it.props = util_1.mergeEvaluated.props(gen, props, it.props, codegen_1.Name);\n            }\n        }\n        if (it.items !== true) {\n            if (schEvaluated && !schEvaluated.dynamicItems) {\n                if (schEvaluated.items !== undefined) {\n                    it.items = util_1.mergeEvaluated.items(gen, schEvaluated.items, it.items);\n                }\n            } else {\n                const items = gen.var(\"items\", (0, codegen_1._)`${source}.evaluated.items`);\n                it.items = util_1.mergeEvaluated.items(gen, items, it.items, codegen_1.Name);\n            }\n        }\n    }\n}\nexports.callRef = callRef;\nexports[\"default\"] = def; //# sourceMappingURL=ref.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/core/ref.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/discriminator/index.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/discriminator/index.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst codegen_1 = __webpack_require__(/*! ../../compile/codegen */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/codegen/index.js\");\nconst types_1 = __webpack_require__(/*! ../discriminator/types */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/discriminator/types.js\");\nconst compile_1 = __webpack_require__(/*! ../../compile */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/index.js\");\nconst util_1 = __webpack_require__(/*! ../../compile/util */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/util.js\");\nconst error = {\n    message: ({ params: { discrError, tagName } })=>discrError === types_1.DiscrError.Tag ? `tag \"${tagName}\" must be string` : `value of tag \"${tagName}\" must be in oneOf`,\n    params: ({ params: { discrError, tag, tagName } })=>(0, codegen_1._)`{error: ${discrError}, tag: ${tagName}, tagValue: ${tag}}`\n};\nconst def = {\n    keyword: \"discriminator\",\n    type: \"object\",\n    schemaType: \"object\",\n    error,\n    code (cxt) {\n        const { gen, data, schema, parentSchema, it } = cxt;\n        const { oneOf } = parentSchema;\n        if (!it.opts.discriminator) {\n            throw new Error(\"discriminator: requires discriminator option\");\n        }\n        const tagName = schema.propertyName;\n        if (typeof tagName != \"string\") throw new Error(\"discriminator: requires propertyName\");\n        if (schema.mapping) throw new Error(\"discriminator: mapping is not supported\");\n        if (!oneOf) throw new Error(\"discriminator: requires oneOf keyword\");\n        const valid = gen.let(\"valid\", false);\n        const tag = gen.const(\"tag\", (0, codegen_1._)`${data}${(0, codegen_1.getProperty)(tagName)}`);\n        gen.if((0, codegen_1._)`typeof ${tag} == \"string\"`, ()=>validateMapping(), ()=>cxt.error(false, {\n                discrError: types_1.DiscrError.Tag,\n                tag,\n                tagName\n            }));\n        cxt.ok(valid);\n        function validateMapping() {\n            const mapping = getMapping();\n            gen.if(false);\n            for(const tagValue in mapping){\n                gen.elseIf((0, codegen_1._)`${tag} === ${tagValue}`);\n                gen.assign(valid, applyTagSchema(mapping[tagValue]));\n            }\n            gen.else();\n            cxt.error(false, {\n                discrError: types_1.DiscrError.Mapping,\n                tag,\n                tagName\n            });\n            gen.endIf();\n        }\n        function applyTagSchema(schemaProp) {\n            const _valid = gen.name(\"valid\");\n            const schCxt = cxt.subschema({\n                keyword: \"oneOf\",\n                schemaProp\n            }, _valid);\n            cxt.mergeEvaluated(schCxt, codegen_1.Name);\n            return _valid;\n        }\n        function getMapping() {\n            var _a;\n            const oneOfMapping = {};\n            const topRequired = hasRequired(parentSchema);\n            let tagRequired = true;\n            for(let i = 0; i < oneOf.length; i++){\n                let sch = oneOf[i];\n                if ((sch === null || sch === void 0 ? void 0 : sch.$ref) && !(0, util_1.schemaHasRulesButRef)(sch, it.self.RULES)) {\n                    sch = compile_1.resolveRef.call(it.self, it.schemaEnv.root, it.baseId, sch === null || sch === void 0 ? void 0 : sch.$ref);\n                    if (sch instanceof compile_1.SchemaEnv) sch = sch.schema;\n                }\n                const propSch = (_a = sch === null || sch === void 0 ? void 0 : sch.properties) === null || _a === void 0 ? void 0 : _a[tagName];\n                if (typeof propSch != \"object\") {\n                    throw new Error(`discriminator: oneOf subschemas (or referenced schemas) must have \"properties/${tagName}\"`);\n                }\n                tagRequired = tagRequired && (topRequired || hasRequired(sch));\n                addMappings(propSch, i);\n            }\n            if (!tagRequired) throw new Error(`discriminator: \"${tagName}\" must be required`);\n            return oneOfMapping;\n            function hasRequired({ required }) {\n                return Array.isArray(required) && required.includes(tagName);\n            }\n            function addMappings(sch, i) {\n                if (sch.const) {\n                    addMapping(sch.const, i);\n                } else if (sch.enum) {\n                    for (const tagValue of sch.enum){\n                        addMapping(tagValue, i);\n                    }\n                } else {\n                    throw new Error(`discriminator: \"properties/${tagName}\" must have \"const\" or \"enum\"`);\n                }\n            }\n            function addMapping(tagValue, i) {\n                if (typeof tagValue != \"string\" || tagValue in oneOfMapping) {\n                    throw new Error(`discriminator: \"${tagName}\" values must be unique strings`);\n                }\n                oneOfMapping[tagValue] = i;\n            }\n        }\n    }\n};\nexports[\"default\"] = def; //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/discriminator/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/discriminator/types.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/discriminator/types.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.DiscrError = void 0;\nvar DiscrError;\n(function(DiscrError) {\n    DiscrError[\"Tag\"] = \"tag\";\n    DiscrError[\"Mapping\"] = \"mapping\";\n})(DiscrError = exports.DiscrError || (exports.DiscrError = {})); //# sourceMappingURL=types.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG5lYXItanMvYWNjb3VudHMvbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L3ZvY2FidWxhcmllcy9kaXNjcmltaW5hdG9yL3R5cGVzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxrQkFBa0IsR0FBRyxLQUFLO0FBQzFCLElBQUlFO0FBQ0gsVUFBVUEsVUFBVTtJQUNqQkEsVUFBVSxDQUFDLE1BQU0sR0FBRztJQUNwQkEsVUFBVSxDQUFDLFVBQVUsR0FBRztBQUM1QixHQUFHQSxhQUFhRixRQUFRRSxVQUFVLElBQUtGLENBQUFBLGtCQUFrQixHQUFHLENBQUMsS0FDN0QsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaS1hbS1uZWFyYnkvLi9ub2RlX21vZHVsZXMvQG5lYXItanMvYWNjb3VudHMvbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L3ZvY2FidWxhcmllcy9kaXNjcmltaW5hdG9yL3R5cGVzLmpzPzFjYzAiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkRpc2NyRXJyb3IgPSB2b2lkIDA7XG52YXIgRGlzY3JFcnJvcjtcbihmdW5jdGlvbiAoRGlzY3JFcnJvcikge1xuICAgIERpc2NyRXJyb3JbXCJUYWdcIl0gPSBcInRhZ1wiO1xuICAgIERpc2NyRXJyb3JbXCJNYXBwaW5nXCJdID0gXCJtYXBwaW5nXCI7XG59KShEaXNjckVycm9yID0gZXhwb3J0cy5EaXNjckVycm9yIHx8IChleHBvcnRzLkRpc2NyRXJyb3IgPSB7fSkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dHlwZXMuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiRGlzY3JFcnJvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/discriminator/types.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/draft7.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/draft7.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst core_1 = __webpack_require__(/*! ./core */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/core/index.js\");\nconst validation_1 = __webpack_require__(/*! ./validation */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/validation/index.js\");\nconst applicator_1 = __webpack_require__(/*! ./applicator */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/applicator/index.js\");\nconst format_1 = __webpack_require__(/*! ./format */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/format/index.js\");\nconst metadata_1 = __webpack_require__(/*! ./metadata */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/metadata.js\");\nconst draft7Vocabularies = [\n    core_1.default,\n    validation_1.default,\n    (0, applicator_1.default)(),\n    format_1.default,\n    metadata_1.metadataVocabulary,\n    metadata_1.contentVocabulary\n];\nexports[\"default\"] = draft7Vocabularies; //# sourceMappingURL=draft7.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG5lYXItanMvYWNjb3VudHMvbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L3ZvY2FidWxhcmllcy9kcmFmdDcuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0QsTUFBTUMsU0FBU0MsbUJBQU9BLENBQUMsdUdBQVE7QUFDL0IsTUFBTUMsZUFBZUQsbUJBQU9BLENBQUMsbUhBQWM7QUFDM0MsTUFBTUUsZUFBZUYsbUJBQU9BLENBQUMsbUhBQWM7QUFDM0MsTUFBTUcsV0FBV0gsbUJBQU9BLENBQUMsMkdBQVU7QUFDbkMsTUFBTUksYUFBYUosbUJBQU9BLENBQUMseUdBQVk7QUFDdkMsTUFBTUsscUJBQXFCO0lBQ3ZCTixPQUFPTyxPQUFPO0lBQ2RMLGFBQWFLLE9BQU87SUFDbkIsSUFBR0osYUFBYUksT0FBTztJQUN4QkgsU0FBU0csT0FBTztJQUNoQkYsV0FBV0csa0JBQWtCO0lBQzdCSCxXQUFXSSxpQkFBaUI7Q0FDL0I7QUFDRFgsa0JBQWUsR0FBR1Esb0JBQ2xCLGtDQUFrQyIsInNvdXJjZXMiOlsid2VicGFjazovL2ktYW0tbmVhcmJ5Ly4vbm9kZV9tb2R1bGVzL0BuZWFyLWpzL2FjY291bnRzL25vZGVfbW9kdWxlcy9hanYvZGlzdC92b2NhYnVsYXJpZXMvZHJhZnQ3LmpzPzY3MzkiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBjb3JlXzEgPSByZXF1aXJlKFwiLi9jb3JlXCIpO1xuY29uc3QgdmFsaWRhdGlvbl8xID0gcmVxdWlyZShcIi4vdmFsaWRhdGlvblwiKTtcbmNvbnN0IGFwcGxpY2F0b3JfMSA9IHJlcXVpcmUoXCIuL2FwcGxpY2F0b3JcIik7XG5jb25zdCBmb3JtYXRfMSA9IHJlcXVpcmUoXCIuL2Zvcm1hdFwiKTtcbmNvbnN0IG1ldGFkYXRhXzEgPSByZXF1aXJlKFwiLi9tZXRhZGF0YVwiKTtcbmNvbnN0IGRyYWZ0N1ZvY2FidWxhcmllcyA9IFtcbiAgICBjb3JlXzEuZGVmYXVsdCxcbiAgICB2YWxpZGF0aW9uXzEuZGVmYXVsdCxcbiAgICAoMCwgYXBwbGljYXRvcl8xLmRlZmF1bHQpKCksXG4gICAgZm9ybWF0XzEuZGVmYXVsdCxcbiAgICBtZXRhZGF0YV8xLm1ldGFkYXRhVm9jYWJ1bGFyeSxcbiAgICBtZXRhZGF0YV8xLmNvbnRlbnRWb2NhYnVsYXJ5LFxuXTtcbmV4cG9ydHMuZGVmYXVsdCA9IGRyYWZ0N1ZvY2FidWxhcmllcztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRyYWZ0Ny5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJjb3JlXzEiLCJyZXF1aXJlIiwidmFsaWRhdGlvbl8xIiwiYXBwbGljYXRvcl8xIiwiZm9ybWF0XzEiLCJtZXRhZGF0YV8xIiwiZHJhZnQ3Vm9jYWJ1bGFyaWVzIiwiZGVmYXVsdCIsIm1ldGFkYXRhVm9jYWJ1bGFyeSIsImNvbnRlbnRWb2NhYnVsYXJ5Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/draft7.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/format/format.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/format/format.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst codegen_1 = __webpack_require__(/*! ../../compile/codegen */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/codegen/index.js\");\nconst error = {\n    message: ({ schemaCode })=>(0, codegen_1.str)`must match format \"${schemaCode}\"`,\n    params: ({ schemaCode })=>(0, codegen_1._)`{format: ${schemaCode}}`\n};\nconst def = {\n    keyword: \"format\",\n    type: [\n        \"number\",\n        \"string\"\n    ],\n    schemaType: \"string\",\n    $data: true,\n    error,\n    code (cxt, ruleType) {\n        const { gen, data, $data, schema, schemaCode, it } = cxt;\n        const { opts, errSchemaPath, schemaEnv, self } = it;\n        if (!opts.validateFormats) return;\n        if ($data) validate$DataFormat();\n        else validateFormat();\n        function validate$DataFormat() {\n            const fmts = gen.scopeValue(\"formats\", {\n                ref: self.formats,\n                code: opts.code.formats\n            });\n            const fDef = gen.const(\"fDef\", (0, codegen_1._)`${fmts}[${schemaCode}]`);\n            const fType = gen.let(\"fType\");\n            const format = gen.let(\"format\");\n            // TODO simplify\n            gen.if((0, codegen_1._)`typeof ${fDef} == \"object\" && !(${fDef} instanceof RegExp)`, ()=>gen.assign(fType, (0, codegen_1._)`${fDef}.type || \"string\"`).assign(format, (0, codegen_1._)`${fDef}.validate`), ()=>gen.assign(fType, (0, codegen_1._)`\"string\"`).assign(format, fDef));\n            cxt.fail$data((0, codegen_1.or)(unknownFmt(), invalidFmt()));\n            function unknownFmt() {\n                if (opts.strictSchema === false) return codegen_1.nil;\n                return (0, codegen_1._)`${schemaCode} && !${format}`;\n            }\n            function invalidFmt() {\n                const callFormat = schemaEnv.$async ? (0, codegen_1._)`(${fDef}.async ? await ${format}(${data}) : ${format}(${data}))` : (0, codegen_1._)`${format}(${data})`;\n                const validData = (0, codegen_1._)`(typeof ${format} == \"function\" ? ${callFormat} : ${format}.test(${data}))`;\n                return (0, codegen_1._)`${format} && ${format} !== true && ${fType} === ${ruleType} && !${validData}`;\n            }\n        }\n        function validateFormat() {\n            const formatDef = self.formats[schema];\n            if (!formatDef) {\n                unknownFormat();\n                return;\n            }\n            if (formatDef === true) return;\n            const [fmtType, format, fmtRef] = getFormat(formatDef);\n            if (fmtType === ruleType) cxt.pass(validCondition());\n            function unknownFormat() {\n                if (opts.strictSchema === false) {\n                    self.logger.warn(unknownMsg());\n                    return;\n                }\n                throw new Error(unknownMsg());\n                function unknownMsg() {\n                    return `unknown format \"${schema}\" ignored in schema at path \"${errSchemaPath}\"`;\n                }\n            }\n            function getFormat(fmtDef) {\n                const code = fmtDef instanceof RegExp ? (0, codegen_1.regexpCode)(fmtDef) : opts.code.formats ? (0, codegen_1._)`${opts.code.formats}${(0, codegen_1.getProperty)(schema)}` : undefined;\n                const fmt = gen.scopeValue(\"formats\", {\n                    key: schema,\n                    ref: fmtDef,\n                    code\n                });\n                if (typeof fmtDef == \"object\" && !(fmtDef instanceof RegExp)) {\n                    return [\n                        fmtDef.type || \"string\",\n                        fmtDef.validate,\n                        (0, codegen_1._)`${fmt}.validate`\n                    ];\n                }\n                return [\n                    \"string\",\n                    fmtDef,\n                    fmt\n                ];\n            }\n            function validCondition() {\n                if (typeof formatDef == \"object\" && !(formatDef instanceof RegExp) && formatDef.async) {\n                    if (!schemaEnv.$async) throw new Error(\"async format in sync schema\");\n                    return (0, codegen_1._)`await ${fmtRef}(${data})`;\n                }\n                return typeof format == \"function\" ? (0, codegen_1._)`${fmtRef}(${data})` : (0, codegen_1._)`${fmtRef}.test(${data})`;\n            }\n        }\n    }\n};\nexports[\"default\"] = def; //# sourceMappingURL=format.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/format/format.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/format/index.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/format/index.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst format_1 = __webpack_require__(/*! ./format */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/format/format.js\");\nconst format = [\n    format_1.default\n];\nexports[\"default\"] = format; //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG5lYXItanMvYWNjb3VudHMvbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L3ZvY2FidWxhcmllcy9mb3JtYXQvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0QsTUFBTUMsV0FBV0MsbUJBQU9BLENBQUMsNEdBQVU7QUFDbkMsTUFBTUMsU0FBUztJQUFDRixTQUFTRyxPQUFPO0NBQUM7QUFDakNMLGtCQUFlLEdBQUdJLFFBQ2xCLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL2ktYW0tbmVhcmJ5Ly4vbm9kZV9tb2R1bGVzL0BuZWFyLWpzL2FjY291bnRzL25vZGVfbW9kdWxlcy9hanYvZGlzdC92b2NhYnVsYXJpZXMvZm9ybWF0L2luZGV4LmpzP2I5ZDkiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBmb3JtYXRfMSA9IHJlcXVpcmUoXCIuL2Zvcm1hdFwiKTtcbmNvbnN0IGZvcm1hdCA9IFtmb3JtYXRfMS5kZWZhdWx0XTtcbmV4cG9ydHMuZGVmYXVsdCA9IGZvcm1hdDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImZvcm1hdF8xIiwicmVxdWlyZSIsImZvcm1hdCIsImRlZmF1bHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/format/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/metadata.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/metadata.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.contentVocabulary = exports.metadataVocabulary = void 0;\nexports.metadataVocabulary = [\n    \"title\",\n    \"description\",\n    \"default\",\n    \"deprecated\",\n    \"readOnly\",\n    \"writeOnly\",\n    \"examples\"\n];\nexports.contentVocabulary = [\n    \"contentMediaType\",\n    \"contentEncoding\",\n    \"contentSchema\"\n]; //# sourceMappingURL=metadata.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG5lYXItanMvYWNjb3VudHMvbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L3ZvY2FidWxhcmllcy9tZXRhZGF0YS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQseUJBQXlCLEdBQUdBLDBCQUEwQixHQUFHLEtBQUs7QUFDOURBLDBCQUEwQixHQUFHO0lBQ3pCO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0NBQ0g7QUFDREEseUJBQXlCLEdBQUc7SUFDeEI7SUFDQTtJQUNBO0NBQ0gsRUFDRCxvQ0FBb0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pLWFtLW5lYXJieS8uL25vZGVfbW9kdWxlcy9AbmVhci1qcy9hY2NvdW50cy9ub2RlX21vZHVsZXMvYWp2L2Rpc3Qvdm9jYWJ1bGFyaWVzL21ldGFkYXRhLmpzPzRmMDciXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmNvbnRlbnRWb2NhYnVsYXJ5ID0gZXhwb3J0cy5tZXRhZGF0YVZvY2FidWxhcnkgPSB2b2lkIDA7XG5leHBvcnRzLm1ldGFkYXRhVm9jYWJ1bGFyeSA9IFtcbiAgICBcInRpdGxlXCIsXG4gICAgXCJkZXNjcmlwdGlvblwiLFxuICAgIFwiZGVmYXVsdFwiLFxuICAgIFwiZGVwcmVjYXRlZFwiLFxuICAgIFwicmVhZE9ubHlcIixcbiAgICBcIndyaXRlT25seVwiLFxuICAgIFwiZXhhbXBsZXNcIixcbl07XG5leHBvcnRzLmNvbnRlbnRWb2NhYnVsYXJ5ID0gW1xuICAgIFwiY29udGVudE1lZGlhVHlwZVwiLFxuICAgIFwiY29udGVudEVuY29kaW5nXCIsXG4gICAgXCJjb250ZW50U2NoZW1hXCIsXG5dO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWV0YWRhdGEuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiY29udGVudFZvY2FidWxhcnkiLCJtZXRhZGF0YVZvY2FidWxhcnkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/metadata.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/validation/const.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/validation/const.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst codegen_1 = __webpack_require__(/*! ../../compile/codegen */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/codegen/index.js\");\nconst util_1 = __webpack_require__(/*! ../../compile/util */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/util.js\");\nconst equal_1 = __webpack_require__(/*! ../../runtime/equal */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/runtime/equal.js\");\nconst error = {\n    message: \"must be equal to constant\",\n    params: ({ schemaCode })=>(0, codegen_1._)`{allowedValue: ${schemaCode}}`\n};\nconst def = {\n    keyword: \"const\",\n    $data: true,\n    error,\n    code (cxt) {\n        const { gen, data, $data, schemaCode, schema } = cxt;\n        if ($data || schema && typeof schema == \"object\") {\n            cxt.fail$data((0, codegen_1._)`!${(0, util_1.useFunc)(gen, equal_1.default)}(${data}, ${schemaCode})`);\n        } else {\n            cxt.fail((0, codegen_1._)`${schema} !== ${data}`);\n        }\n    }\n};\nexports[\"default\"] = def; //# sourceMappingURL=const.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG5lYXItanMvYWNjb3VudHMvbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L3ZvY2FidWxhcmllcy92YWxpZGF0aW9uL2NvbnN0LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdELE1BQU1DLFlBQVlDLG1CQUFPQSxDQUFDLG9IQUF1QjtBQUNqRCxNQUFNQyxTQUFTRCxtQkFBT0EsQ0FBQyx3R0FBb0I7QUFDM0MsTUFBTUUsVUFBVUYsbUJBQU9BLENBQUMsMEdBQXFCO0FBQzdDLE1BQU1HLFFBQVE7SUFDVkMsU0FBUztJQUNUQyxRQUFRLENBQUMsRUFBRUMsVUFBVSxFQUFFLEdBQUssQ0FBQyxHQUFHUCxVQUFVUSxDQUFDLENBQUUsQ0FBQyxlQUFlLEVBQUVELFdBQVcsQ0FBQyxDQUFDO0FBQ2hGO0FBQ0EsTUFBTUUsTUFBTTtJQUNSQyxTQUFTO0lBQ1RDLE9BQU87SUFDUFA7SUFDQVEsTUFBS0MsR0FBRztRQUNKLE1BQU0sRUFBRUMsR0FBRyxFQUFFQyxJQUFJLEVBQUVKLEtBQUssRUFBRUosVUFBVSxFQUFFUyxNQUFNLEVBQUUsR0FBR0g7UUFDakQsSUFBSUYsU0FBVUssVUFBVSxPQUFPQSxVQUFVLFVBQVc7WUFDaERILElBQUlJLFNBQVMsQ0FBQyxDQUFDLEdBQUdqQixVQUFVUSxDQUFDLENBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHTixPQUFPZ0IsT0FBTyxFQUFFSixLQUFLWCxRQUFRZ0IsT0FBTyxFQUFFLENBQUMsRUFBRUosS0FBSyxFQUFFLEVBQUVSLFdBQVcsQ0FBQyxDQUFDO1FBQzFHLE9BQ0s7WUFDRE0sSUFBSU8sSUFBSSxDQUFDLENBQUMsR0FBR3BCLFVBQVVRLENBQUMsQ0FBRSxDQUFDLEVBQUVRLE9BQU8sS0FBSyxFQUFFRCxLQUFLLENBQUM7UUFDckQ7SUFDSjtBQUNKO0FBQ0FqQixrQkFBZSxHQUFHVyxLQUNsQixpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pLWFtLW5lYXJieS8uL25vZGVfbW9kdWxlcy9AbmVhci1qcy9hY2NvdW50cy9ub2RlX21vZHVsZXMvYWp2L2Rpc3Qvdm9jYWJ1bGFyaWVzL3ZhbGlkYXRpb24vY29uc3QuanM/NjZlMyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGNvZGVnZW5fMSA9IHJlcXVpcmUoXCIuLi8uLi9jb21waWxlL2NvZGVnZW5cIik7XG5jb25zdCB1dGlsXzEgPSByZXF1aXJlKFwiLi4vLi4vY29tcGlsZS91dGlsXCIpO1xuY29uc3QgZXF1YWxfMSA9IHJlcXVpcmUoXCIuLi8uLi9ydW50aW1lL2VxdWFsXCIpO1xuY29uc3QgZXJyb3IgPSB7XG4gICAgbWVzc2FnZTogXCJtdXN0IGJlIGVxdWFsIHRvIGNvbnN0YW50XCIsXG4gICAgcGFyYW1zOiAoeyBzY2hlbWFDb2RlIH0pID0+ICgwLCBjb2RlZ2VuXzEuXykgYHthbGxvd2VkVmFsdWU6ICR7c2NoZW1hQ29kZX19YCxcbn07XG5jb25zdCBkZWYgPSB7XG4gICAga2V5d29yZDogXCJjb25zdFwiLFxuICAgICRkYXRhOiB0cnVlLFxuICAgIGVycm9yLFxuICAgIGNvZGUoY3h0KSB7XG4gICAgICAgIGNvbnN0IHsgZ2VuLCBkYXRhLCAkZGF0YSwgc2NoZW1hQ29kZSwgc2NoZW1hIH0gPSBjeHQ7XG4gICAgICAgIGlmICgkZGF0YSB8fCAoc2NoZW1hICYmIHR5cGVvZiBzY2hlbWEgPT0gXCJvYmplY3RcIikpIHtcbiAgICAgICAgICAgIGN4dC5mYWlsJGRhdGEoKDAsIGNvZGVnZW5fMS5fKSBgISR7KDAsIHV0aWxfMS51c2VGdW5jKShnZW4sIGVxdWFsXzEuZGVmYXVsdCl9KCR7ZGF0YX0sICR7c2NoZW1hQ29kZX0pYCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjeHQuZmFpbCgoMCwgY29kZWdlbl8xLl8pIGAke3NjaGVtYX0gIT09ICR7ZGF0YX1gKTtcbiAgICAgICAgfVxuICAgIH0sXG59O1xuZXhwb3J0cy5kZWZhdWx0ID0gZGVmO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29uc3QuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiY29kZWdlbl8xIiwicmVxdWlyZSIsInV0aWxfMSIsImVxdWFsXzEiLCJlcnJvciIsIm1lc3NhZ2UiLCJwYXJhbXMiLCJzY2hlbWFDb2RlIiwiXyIsImRlZiIsImtleXdvcmQiLCIkZGF0YSIsImNvZGUiLCJjeHQiLCJnZW4iLCJkYXRhIiwic2NoZW1hIiwiZmFpbCRkYXRhIiwidXNlRnVuYyIsImRlZmF1bHQiLCJmYWlsIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/validation/const.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/validation/enum.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/validation/enum.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst codegen_1 = __webpack_require__(/*! ../../compile/codegen */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/codegen/index.js\");\nconst util_1 = __webpack_require__(/*! ../../compile/util */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/util.js\");\nconst equal_1 = __webpack_require__(/*! ../../runtime/equal */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/runtime/equal.js\");\nconst error = {\n    message: \"must be equal to one of the allowed values\",\n    params: ({ schemaCode })=>(0, codegen_1._)`{allowedValues: ${schemaCode}}`\n};\nconst def = {\n    keyword: \"enum\",\n    schemaType: \"array\",\n    $data: true,\n    error,\n    code (cxt) {\n        const { gen, data, $data, schema, schemaCode, it } = cxt;\n        if (!$data && schema.length === 0) throw new Error(\"enum must have non-empty array\");\n        const useLoop = schema.length >= it.opts.loopEnum;\n        let eql;\n        const getEql = ()=>eql !== null && eql !== void 0 ? eql : eql = (0, util_1.useFunc)(gen, equal_1.default);\n        let valid;\n        if (useLoop || $data) {\n            valid = gen.let(\"valid\");\n            cxt.block$data(valid, loopEnum);\n        } else {\n            /* istanbul ignore if */ if (!Array.isArray(schema)) throw new Error(\"ajv implementation error\");\n            const vSchema = gen.const(\"vSchema\", schemaCode);\n            valid = (0, codegen_1.or)(...schema.map((_x, i)=>equalCode(vSchema, i)));\n        }\n        cxt.pass(valid);\n        function loopEnum() {\n            gen.assign(valid, false);\n            gen.forOf(\"v\", schemaCode, (v)=>gen.if((0, codegen_1._)`${getEql()}(${data}, ${v})`, ()=>gen.assign(valid, true).break()));\n        }\n        function equalCode(vSchema, i) {\n            const sch = schema[i];\n            return typeof sch === \"object\" && sch !== null ? (0, codegen_1._)`${getEql()}(${data}, ${vSchema}[${i}])` : (0, codegen_1._)`${data} === ${sch}`;\n        }\n    }\n};\nexports[\"default\"] = def; //# sourceMappingURL=enum.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG5lYXItanMvYWNjb3VudHMvbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L3ZvY2FidWxhcmllcy92YWxpZGF0aW9uL2VudW0uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0QsTUFBTUMsWUFBWUMsbUJBQU9BLENBQUMsb0hBQXVCO0FBQ2pELE1BQU1DLFNBQVNELG1CQUFPQSxDQUFDLHdHQUFvQjtBQUMzQyxNQUFNRSxVQUFVRixtQkFBT0EsQ0FBQywwR0FBcUI7QUFDN0MsTUFBTUcsUUFBUTtJQUNWQyxTQUFTO0lBQ1RDLFFBQVEsQ0FBQyxFQUFFQyxVQUFVLEVBQUUsR0FBSyxDQUFDLEdBQUdQLFVBQVVRLENBQUMsQ0FBRSxDQUFDLGdCQUFnQixFQUFFRCxXQUFXLENBQUMsQ0FBQztBQUNqRjtBQUNBLE1BQU1FLE1BQU07SUFDUkMsU0FBUztJQUNUQyxZQUFZO0lBQ1pDLE9BQU87SUFDUFI7SUFDQVMsTUFBS0MsR0FBRztRQUNKLE1BQU0sRUFBRUMsR0FBRyxFQUFFQyxJQUFJLEVBQUVKLEtBQUssRUFBRUssTUFBTSxFQUFFVixVQUFVLEVBQUVXLEVBQUUsRUFBRSxHQUFHSjtRQUNyRCxJQUFJLENBQUNGLFNBQVNLLE9BQU9FLE1BQU0sS0FBSyxHQUM1QixNQUFNLElBQUlDLE1BQU07UUFDcEIsTUFBTUMsVUFBVUosT0FBT0UsTUFBTSxJQUFJRCxHQUFHSSxJQUFJLENBQUNDLFFBQVE7UUFDakQsSUFBSUM7UUFDSixNQUFNQyxTQUFTLElBQU9ELFFBQVEsUUFBUUEsUUFBUSxLQUFLLElBQUlBLE1BQU9BLE1BQU0sQ0FBQyxHQUFHdEIsT0FBT3dCLE9BQU8sRUFBRVgsS0FBS1osUUFBUXdCLE9BQU87UUFDNUcsSUFBSUM7UUFDSixJQUFJUCxXQUFXVCxPQUFPO1lBQ2xCZ0IsUUFBUWIsSUFBSWMsR0FBRyxDQUFDO1lBQ2hCZixJQUFJZ0IsVUFBVSxDQUFDRixPQUFPTDtRQUMxQixPQUNLO1lBQ0Qsc0JBQXNCLEdBQ3RCLElBQUksQ0FBQ1EsTUFBTUMsT0FBTyxDQUFDZixTQUNmLE1BQU0sSUFBSUcsTUFBTTtZQUNwQixNQUFNYSxVQUFVbEIsSUFBSW1CLEtBQUssQ0FBQyxXQUFXM0I7WUFDckNxQixRQUFRLENBQUMsR0FBRzVCLFVBQVVtQyxFQUFFLEtBQUtsQixPQUFPbUIsR0FBRyxDQUFDLENBQUNDLElBQUlDLElBQU1DLFVBQVVOLFNBQVNLO1FBQzFFO1FBQ0F4QixJQUFJMEIsSUFBSSxDQUFDWjtRQUNULFNBQVNMO1lBQ0xSLElBQUkwQixNQUFNLENBQUNiLE9BQU87WUFDbEJiLElBQUkyQixLQUFLLENBQUMsS0FBS25DLFlBQVksQ0FBQ29DLElBQU01QixJQUFJNkIsRUFBRSxDQUFDLENBQUMsR0FBRzVDLFVBQVVRLENBQUMsQ0FBRSxDQUFDLEVBQUVpQixTQUFTLENBQUMsRUFBRVQsS0FBSyxFQUFFLEVBQUUyQixFQUFFLENBQUMsQ0FBQyxFQUFFLElBQU01QixJQUFJMEIsTUFBTSxDQUFDYixPQUFPLE1BQU1pQixLQUFLO1FBQy9IO1FBQ0EsU0FBU04sVUFBVU4sT0FBTyxFQUFFSyxDQUFDO1lBQ3pCLE1BQU1RLE1BQU03QixNQUFNLENBQUNxQixFQUFFO1lBQ3JCLE9BQU8sT0FBT1EsUUFBUSxZQUFZQSxRQUFRLE9BQ3BDLENBQUMsR0FBRzlDLFVBQVVRLENBQUMsQ0FBRSxDQUFDLEVBQUVpQixTQUFTLENBQUMsRUFBRVQsS0FBSyxFQUFFLEVBQUVpQixRQUFRLENBQUMsRUFBRUssRUFBRSxFQUFFLENBQUMsR0FDekQsQ0FBQyxHQUFHdEMsVUFBVVEsQ0FBQyxDQUFFLENBQUMsRUFBRVEsS0FBSyxLQUFLLEVBQUU4QixJQUFJLENBQUM7UUFDL0M7SUFDSjtBQUNKO0FBQ0FoRCxrQkFBZSxHQUFHVyxLQUNsQixnQ0FBZ0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pLWFtLW5lYXJieS8uL25vZGVfbW9kdWxlcy9AbmVhci1qcy9hY2NvdW50cy9ub2RlX21vZHVsZXMvYWp2L2Rpc3Qvdm9jYWJ1bGFyaWVzL3ZhbGlkYXRpb24vZW51bS5qcz8yOWUyIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgY29kZWdlbl8xID0gcmVxdWlyZShcIi4uLy4uL2NvbXBpbGUvY29kZWdlblwiKTtcbmNvbnN0IHV0aWxfMSA9IHJlcXVpcmUoXCIuLi8uLi9jb21waWxlL3V0aWxcIik7XG5jb25zdCBlcXVhbF8xID0gcmVxdWlyZShcIi4uLy4uL3J1bnRpbWUvZXF1YWxcIik7XG5jb25zdCBlcnJvciA9IHtcbiAgICBtZXNzYWdlOiBcIm11c3QgYmUgZXF1YWwgdG8gb25lIG9mIHRoZSBhbGxvd2VkIHZhbHVlc1wiLFxuICAgIHBhcmFtczogKHsgc2NoZW1hQ29kZSB9KSA9PiAoMCwgY29kZWdlbl8xLl8pIGB7YWxsb3dlZFZhbHVlczogJHtzY2hlbWFDb2RlfX1gLFxufTtcbmNvbnN0IGRlZiA9IHtcbiAgICBrZXl3b3JkOiBcImVudW1cIixcbiAgICBzY2hlbWFUeXBlOiBcImFycmF5XCIsXG4gICAgJGRhdGE6IHRydWUsXG4gICAgZXJyb3IsXG4gICAgY29kZShjeHQpIHtcbiAgICAgICAgY29uc3QgeyBnZW4sIGRhdGEsICRkYXRhLCBzY2hlbWEsIHNjaGVtYUNvZGUsIGl0IH0gPSBjeHQ7XG4gICAgICAgIGlmICghJGRhdGEgJiYgc2NoZW1hLmxlbmd0aCA9PT0gMClcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcImVudW0gbXVzdCBoYXZlIG5vbi1lbXB0eSBhcnJheVwiKTtcbiAgICAgICAgY29uc3QgdXNlTG9vcCA9IHNjaGVtYS5sZW5ndGggPj0gaXQub3B0cy5sb29wRW51bTtcbiAgICAgICAgbGV0IGVxbDtcbiAgICAgICAgY29uc3QgZ2V0RXFsID0gKCkgPT4gKGVxbCAhPT0gbnVsbCAmJiBlcWwgIT09IHZvaWQgMCA/IGVxbCA6IChlcWwgPSAoMCwgdXRpbF8xLnVzZUZ1bmMpKGdlbiwgZXF1YWxfMS5kZWZhdWx0KSkpO1xuICAgICAgICBsZXQgdmFsaWQ7XG4gICAgICAgIGlmICh1c2VMb29wIHx8ICRkYXRhKSB7XG4gICAgICAgICAgICB2YWxpZCA9IGdlbi5sZXQoXCJ2YWxpZFwiKTtcbiAgICAgICAgICAgIGN4dC5ibG9jayRkYXRhKHZhbGlkLCBsb29wRW51bSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgICAgICAgIGlmICghQXJyYXkuaXNBcnJheShzY2hlbWEpKVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcImFqdiBpbXBsZW1lbnRhdGlvbiBlcnJvclwiKTtcbiAgICAgICAgICAgIGNvbnN0IHZTY2hlbWEgPSBnZW4uY29uc3QoXCJ2U2NoZW1hXCIsIHNjaGVtYUNvZGUpO1xuICAgICAgICAgICAgdmFsaWQgPSAoMCwgY29kZWdlbl8xLm9yKSguLi5zY2hlbWEubWFwKChfeCwgaSkgPT4gZXF1YWxDb2RlKHZTY2hlbWEsIGkpKSk7XG4gICAgICAgIH1cbiAgICAgICAgY3h0LnBhc3ModmFsaWQpO1xuICAgICAgICBmdW5jdGlvbiBsb29wRW51bSgpIHtcbiAgICAgICAgICAgIGdlbi5hc3NpZ24odmFsaWQsIGZhbHNlKTtcbiAgICAgICAgICAgIGdlbi5mb3JPZihcInZcIiwgc2NoZW1hQ29kZSwgKHYpID0+IGdlbi5pZigoMCwgY29kZWdlbl8xLl8pIGAke2dldEVxbCgpfSgke2RhdGF9LCAke3Z9KWAsICgpID0+IGdlbi5hc3NpZ24odmFsaWQsIHRydWUpLmJyZWFrKCkpKTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBlcXVhbENvZGUodlNjaGVtYSwgaSkge1xuICAgICAgICAgICAgY29uc3Qgc2NoID0gc2NoZW1hW2ldO1xuICAgICAgICAgICAgcmV0dXJuIHR5cGVvZiBzY2ggPT09IFwib2JqZWN0XCIgJiYgc2NoICE9PSBudWxsXG4gICAgICAgICAgICAgICAgPyAoMCwgY29kZWdlbl8xLl8pIGAke2dldEVxbCgpfSgke2RhdGF9LCAke3ZTY2hlbWF9WyR7aX1dKWBcbiAgICAgICAgICAgICAgICA6ICgwLCBjb2RlZ2VuXzEuXykgYCR7ZGF0YX0gPT09ICR7c2NofWA7XG4gICAgICAgIH1cbiAgICB9LFxufTtcbmV4cG9ydHMuZGVmYXVsdCA9IGRlZjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVudW0uanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiY29kZWdlbl8xIiwicmVxdWlyZSIsInV0aWxfMSIsImVxdWFsXzEiLCJlcnJvciIsIm1lc3NhZ2UiLCJwYXJhbXMiLCJzY2hlbWFDb2RlIiwiXyIsImRlZiIsImtleXdvcmQiLCJzY2hlbWFUeXBlIiwiJGRhdGEiLCJjb2RlIiwiY3h0IiwiZ2VuIiwiZGF0YSIsInNjaGVtYSIsIml0IiwibGVuZ3RoIiwiRXJyb3IiLCJ1c2VMb29wIiwib3B0cyIsImxvb3BFbnVtIiwiZXFsIiwiZ2V0RXFsIiwidXNlRnVuYyIsImRlZmF1bHQiLCJ2YWxpZCIsImxldCIsImJsb2NrJGRhdGEiLCJBcnJheSIsImlzQXJyYXkiLCJ2U2NoZW1hIiwiY29uc3QiLCJvciIsIm1hcCIsIl94IiwiaSIsImVxdWFsQ29kZSIsInBhc3MiLCJhc3NpZ24iLCJmb3JPZiIsInYiLCJpZiIsImJyZWFrIiwic2NoIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/validation/enum.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/validation/index.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/validation/index.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst limitNumber_1 = __webpack_require__(/*! ./limitNumber */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/validation/limitNumber.js\");\nconst multipleOf_1 = __webpack_require__(/*! ./multipleOf */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/validation/multipleOf.js\");\nconst limitLength_1 = __webpack_require__(/*! ./limitLength */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/validation/limitLength.js\");\nconst pattern_1 = __webpack_require__(/*! ./pattern */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/validation/pattern.js\");\nconst limitProperties_1 = __webpack_require__(/*! ./limitProperties */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/validation/limitProperties.js\");\nconst required_1 = __webpack_require__(/*! ./required */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/validation/required.js\");\nconst limitItems_1 = __webpack_require__(/*! ./limitItems */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/validation/limitItems.js\");\nconst uniqueItems_1 = __webpack_require__(/*! ./uniqueItems */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/validation/uniqueItems.js\");\nconst const_1 = __webpack_require__(/*! ./const */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/validation/const.js\");\nconst enum_1 = __webpack_require__(/*! ./enum */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/validation/enum.js\");\nconst validation = [\n    // number\n    limitNumber_1.default,\n    multipleOf_1.default,\n    // string\n    limitLength_1.default,\n    pattern_1.default,\n    // object\n    limitProperties_1.default,\n    required_1.default,\n    // array\n    limitItems_1.default,\n    uniqueItems_1.default,\n    // any\n    {\n        keyword: \"type\",\n        schemaType: [\n            \"string\",\n            \"array\"\n        ]\n    },\n    {\n        keyword: \"nullable\",\n        schemaType: \"boolean\"\n    },\n    const_1.default,\n    enum_1.default\n];\nexports[\"default\"] = validation; //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG5lYXItanMvYWNjb3VudHMvbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L3ZvY2FidWxhcmllcy92YWxpZGF0aW9uL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdELE1BQU1DLGdCQUFnQkMsbUJBQU9BLENBQUMsMEhBQWU7QUFDN0MsTUFBTUMsZUFBZUQsbUJBQU9BLENBQUMsd0hBQWM7QUFDM0MsTUFBTUUsZ0JBQWdCRixtQkFBT0EsQ0FBQywwSEFBZTtBQUM3QyxNQUFNRyxZQUFZSCxtQkFBT0EsQ0FBQyxrSEFBVztBQUNyQyxNQUFNSSxvQkFBb0JKLG1CQUFPQSxDQUFDLGtJQUFtQjtBQUNyRCxNQUFNSyxhQUFhTCxtQkFBT0EsQ0FBQyxvSEFBWTtBQUN2QyxNQUFNTSxlQUFlTixtQkFBT0EsQ0FBQyx3SEFBYztBQUMzQyxNQUFNTyxnQkFBZ0JQLG1CQUFPQSxDQUFDLDBIQUFlO0FBQzdDLE1BQU1RLFVBQVVSLG1CQUFPQSxDQUFDLDhHQUFTO0FBQ2pDLE1BQU1TLFNBQVNULG1CQUFPQSxDQUFDLDRHQUFRO0FBQy9CLE1BQU1VLGFBQWE7SUFDZixTQUFTO0lBQ1RYLGNBQWNZLE9BQU87SUFDckJWLGFBQWFVLE9BQU87SUFDcEIsU0FBUztJQUNUVCxjQUFjUyxPQUFPO0lBQ3JCUixVQUFVUSxPQUFPO0lBQ2pCLFNBQVM7SUFDVFAsa0JBQWtCTyxPQUFPO0lBQ3pCTixXQUFXTSxPQUFPO0lBQ2xCLFFBQVE7SUFDUkwsYUFBYUssT0FBTztJQUNwQkosY0FBY0ksT0FBTztJQUNyQixNQUFNO0lBQ047UUFBRUMsU0FBUztRQUFRQyxZQUFZO1lBQUM7WUFBVTtTQUFRO0lBQUM7SUFDbkQ7UUFBRUQsU0FBUztRQUFZQyxZQUFZO0lBQVU7SUFDN0NMLFFBQVFHLE9BQU87SUFDZkYsT0FBT0UsT0FBTztDQUNqQjtBQUNEZCxrQkFBZSxHQUFHYSxZQUNsQixpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pLWFtLW5lYXJieS8uL25vZGVfbW9kdWxlcy9AbmVhci1qcy9hY2NvdW50cy9ub2RlX21vZHVsZXMvYWp2L2Rpc3Qvdm9jYWJ1bGFyaWVzL3ZhbGlkYXRpb24vaW5kZXguanM/M2RiZSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGxpbWl0TnVtYmVyXzEgPSByZXF1aXJlKFwiLi9saW1pdE51bWJlclwiKTtcbmNvbnN0IG11bHRpcGxlT2ZfMSA9IHJlcXVpcmUoXCIuL211bHRpcGxlT2ZcIik7XG5jb25zdCBsaW1pdExlbmd0aF8xID0gcmVxdWlyZShcIi4vbGltaXRMZW5ndGhcIik7XG5jb25zdCBwYXR0ZXJuXzEgPSByZXF1aXJlKFwiLi9wYXR0ZXJuXCIpO1xuY29uc3QgbGltaXRQcm9wZXJ0aWVzXzEgPSByZXF1aXJlKFwiLi9saW1pdFByb3BlcnRpZXNcIik7XG5jb25zdCByZXF1aXJlZF8xID0gcmVxdWlyZShcIi4vcmVxdWlyZWRcIik7XG5jb25zdCBsaW1pdEl0ZW1zXzEgPSByZXF1aXJlKFwiLi9saW1pdEl0ZW1zXCIpO1xuY29uc3QgdW5pcXVlSXRlbXNfMSA9IHJlcXVpcmUoXCIuL3VuaXF1ZUl0ZW1zXCIpO1xuY29uc3QgY29uc3RfMSA9IHJlcXVpcmUoXCIuL2NvbnN0XCIpO1xuY29uc3QgZW51bV8xID0gcmVxdWlyZShcIi4vZW51bVwiKTtcbmNvbnN0IHZhbGlkYXRpb24gPSBbXG4gICAgLy8gbnVtYmVyXG4gICAgbGltaXROdW1iZXJfMS5kZWZhdWx0LFxuICAgIG11bHRpcGxlT2ZfMS5kZWZhdWx0LFxuICAgIC8vIHN0cmluZ1xuICAgIGxpbWl0TGVuZ3RoXzEuZGVmYXVsdCxcbiAgICBwYXR0ZXJuXzEuZGVmYXVsdCxcbiAgICAvLyBvYmplY3RcbiAgICBsaW1pdFByb3BlcnRpZXNfMS5kZWZhdWx0LFxuICAgIHJlcXVpcmVkXzEuZGVmYXVsdCxcbiAgICAvLyBhcnJheVxuICAgIGxpbWl0SXRlbXNfMS5kZWZhdWx0LFxuICAgIHVuaXF1ZUl0ZW1zXzEuZGVmYXVsdCxcbiAgICAvLyBhbnlcbiAgICB7IGtleXdvcmQ6IFwidHlwZVwiLCBzY2hlbWFUeXBlOiBbXCJzdHJpbmdcIiwgXCJhcnJheVwiXSB9LFxuICAgIHsga2V5d29yZDogXCJudWxsYWJsZVwiLCBzY2hlbWFUeXBlOiBcImJvb2xlYW5cIiB9LFxuICAgIGNvbnN0XzEuZGVmYXVsdCxcbiAgICBlbnVtXzEuZGVmYXVsdCxcbl07XG5leHBvcnRzLmRlZmF1bHQgPSB2YWxpZGF0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwibGltaXROdW1iZXJfMSIsInJlcXVpcmUiLCJtdWx0aXBsZU9mXzEiLCJsaW1pdExlbmd0aF8xIiwicGF0dGVybl8xIiwibGltaXRQcm9wZXJ0aWVzXzEiLCJyZXF1aXJlZF8xIiwibGltaXRJdGVtc18xIiwidW5pcXVlSXRlbXNfMSIsImNvbnN0XzEiLCJlbnVtXzEiLCJ2YWxpZGF0aW9uIiwiZGVmYXVsdCIsImtleXdvcmQiLCJzY2hlbWFUeXBlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/validation/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/validation/limitItems.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/validation/limitItems.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst codegen_1 = __webpack_require__(/*! ../../compile/codegen */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/codegen/index.js\");\nconst error = {\n    message ({ keyword, schemaCode }) {\n        const comp = keyword === \"maxItems\" ? \"more\" : \"fewer\";\n        return (0, codegen_1.str)`must NOT have ${comp} than ${schemaCode} items`;\n    },\n    params: ({ schemaCode })=>(0, codegen_1._)`{limit: ${schemaCode}}`\n};\nconst def = {\n    keyword: [\n        \"maxItems\",\n        \"minItems\"\n    ],\n    type: \"array\",\n    schemaType: \"number\",\n    $data: true,\n    error,\n    code (cxt) {\n        const { keyword, data, schemaCode } = cxt;\n        const op = keyword === \"maxItems\" ? codegen_1.operators.GT : codegen_1.operators.LT;\n        cxt.fail$data((0, codegen_1._)`${data}.length ${op} ${schemaCode}`);\n    }\n};\nexports[\"default\"] = def; //# sourceMappingURL=limitItems.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG5lYXItanMvYWNjb3VudHMvbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L3ZvY2FidWxhcmllcy92YWxpZGF0aW9uL2xpbWl0SXRlbXMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0QsTUFBTUMsWUFBWUMsbUJBQU9BLENBQUMsb0hBQXVCO0FBQ2pELE1BQU1DLFFBQVE7SUFDVkMsU0FBUSxFQUFFQyxPQUFPLEVBQUVDLFVBQVUsRUFBRTtRQUMzQixNQUFNQyxPQUFPRixZQUFZLGFBQWEsU0FBUztRQUMvQyxPQUFPLENBQUMsR0FBR0osVUFBVU8sR0FBRyxDQUFFLENBQUMsY0FBYyxFQUFFRCxLQUFLLE1BQU0sRUFBRUQsV0FBVyxNQUFNLENBQUM7SUFDOUU7SUFDQUcsUUFBUSxDQUFDLEVBQUVILFVBQVUsRUFBRSxHQUFLLENBQUMsR0FBR0wsVUFBVVMsQ0FBQyxDQUFFLENBQUMsUUFBUSxFQUFFSixXQUFXLENBQUMsQ0FBQztBQUN6RTtBQUNBLE1BQU1LLE1BQU07SUFDUk4sU0FBUztRQUFDO1FBQVk7S0FBVztJQUNqQ08sTUFBTTtJQUNOQyxZQUFZO0lBQ1pDLE9BQU87SUFDUFg7SUFDQVksTUFBS0MsR0FBRztRQUNKLE1BQU0sRUFBRVgsT0FBTyxFQUFFWSxJQUFJLEVBQUVYLFVBQVUsRUFBRSxHQUFHVTtRQUN0QyxNQUFNRSxLQUFLYixZQUFZLGFBQWFKLFVBQVVrQixTQUFTLENBQUNDLEVBQUUsR0FBR25CLFVBQVVrQixTQUFTLENBQUNFLEVBQUU7UUFDbkZMLElBQUlNLFNBQVMsQ0FBQyxDQUFDLEdBQUdyQixVQUFVUyxDQUFDLENBQUUsQ0FBQyxFQUFFTyxLQUFLLFFBQVEsRUFBRUMsR0FBRyxDQUFDLEVBQUVaLFdBQVcsQ0FBQztJQUN2RTtBQUNKO0FBQ0FQLGtCQUFlLEdBQUdZLEtBQ2xCLHNDQUFzQyIsInNvdXJjZXMiOlsid2VicGFjazovL2ktYW0tbmVhcmJ5Ly4vbm9kZV9tb2R1bGVzL0BuZWFyLWpzL2FjY291bnRzL25vZGVfbW9kdWxlcy9hanYvZGlzdC92b2NhYnVsYXJpZXMvdmFsaWRhdGlvbi9saW1pdEl0ZW1zLmpzP2QwOGYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBjb2RlZ2VuXzEgPSByZXF1aXJlKFwiLi4vLi4vY29tcGlsZS9jb2RlZ2VuXCIpO1xuY29uc3QgZXJyb3IgPSB7XG4gICAgbWVzc2FnZSh7IGtleXdvcmQsIHNjaGVtYUNvZGUgfSkge1xuICAgICAgICBjb25zdCBjb21wID0ga2V5d29yZCA9PT0gXCJtYXhJdGVtc1wiID8gXCJtb3JlXCIgOiBcImZld2VyXCI7XG4gICAgICAgIHJldHVybiAoMCwgY29kZWdlbl8xLnN0cikgYG11c3QgTk9UIGhhdmUgJHtjb21wfSB0aGFuICR7c2NoZW1hQ29kZX0gaXRlbXNgO1xuICAgIH0sXG4gICAgcGFyYW1zOiAoeyBzY2hlbWFDb2RlIH0pID0+ICgwLCBjb2RlZ2VuXzEuXykgYHtsaW1pdDogJHtzY2hlbWFDb2RlfX1gLFxufTtcbmNvbnN0IGRlZiA9IHtcbiAgICBrZXl3b3JkOiBbXCJtYXhJdGVtc1wiLCBcIm1pbkl0ZW1zXCJdLFxuICAgIHR5cGU6IFwiYXJyYXlcIixcbiAgICBzY2hlbWFUeXBlOiBcIm51bWJlclwiLFxuICAgICRkYXRhOiB0cnVlLFxuICAgIGVycm9yLFxuICAgIGNvZGUoY3h0KSB7XG4gICAgICAgIGNvbnN0IHsga2V5d29yZCwgZGF0YSwgc2NoZW1hQ29kZSB9ID0gY3h0O1xuICAgICAgICBjb25zdCBvcCA9IGtleXdvcmQgPT09IFwibWF4SXRlbXNcIiA/IGNvZGVnZW5fMS5vcGVyYXRvcnMuR1QgOiBjb2RlZ2VuXzEub3BlcmF0b3JzLkxUO1xuICAgICAgICBjeHQuZmFpbCRkYXRhKCgwLCBjb2RlZ2VuXzEuXykgYCR7ZGF0YX0ubGVuZ3RoICR7b3B9ICR7c2NoZW1hQ29kZX1gKTtcbiAgICB9LFxufTtcbmV4cG9ydHMuZGVmYXVsdCA9IGRlZjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxpbWl0SXRlbXMuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiY29kZWdlbl8xIiwicmVxdWlyZSIsImVycm9yIiwibWVzc2FnZSIsImtleXdvcmQiLCJzY2hlbWFDb2RlIiwiY29tcCIsInN0ciIsInBhcmFtcyIsIl8iLCJkZWYiLCJ0eXBlIiwic2NoZW1hVHlwZSIsIiRkYXRhIiwiY29kZSIsImN4dCIsImRhdGEiLCJvcCIsIm9wZXJhdG9ycyIsIkdUIiwiTFQiLCJmYWlsJGRhdGEiLCJkZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/validation/limitItems.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/validation/limitLength.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/validation/limitLength.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst codegen_1 = __webpack_require__(/*! ../../compile/codegen */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/codegen/index.js\");\nconst util_1 = __webpack_require__(/*! ../../compile/util */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/util.js\");\nconst ucs2length_1 = __webpack_require__(/*! ../../runtime/ucs2length */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/runtime/ucs2length.js\");\nconst error = {\n    message ({ keyword, schemaCode }) {\n        const comp = keyword === \"maxLength\" ? \"more\" : \"fewer\";\n        return (0, codegen_1.str)`must NOT have ${comp} than ${schemaCode} characters`;\n    },\n    params: ({ schemaCode })=>(0, codegen_1._)`{limit: ${schemaCode}}`\n};\nconst def = {\n    keyword: [\n        \"maxLength\",\n        \"minLength\"\n    ],\n    type: \"string\",\n    schemaType: \"number\",\n    $data: true,\n    error,\n    code (cxt) {\n        const { keyword, data, schemaCode, it } = cxt;\n        const op = keyword === \"maxLength\" ? codegen_1.operators.GT : codegen_1.operators.LT;\n        const len = it.opts.unicode === false ? (0, codegen_1._)`${data}.length` : (0, codegen_1._)`${(0, util_1.useFunc)(cxt.gen, ucs2length_1.default)}(${data})`;\n        cxt.fail$data((0, codegen_1._)`${len} ${op} ${schemaCode}`);\n    }\n};\nexports[\"default\"] = def; //# sourceMappingURL=limitLength.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG5lYXItanMvYWNjb3VudHMvbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L3ZvY2FidWxhcmllcy92YWxpZGF0aW9uL2xpbWl0TGVuZ3RoLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdELE1BQU1DLFlBQVlDLG1CQUFPQSxDQUFDLG9IQUF1QjtBQUNqRCxNQUFNQyxTQUFTRCxtQkFBT0EsQ0FBQyx3R0FBb0I7QUFDM0MsTUFBTUUsZUFBZUYsbUJBQU9BLENBQUMsb0hBQTBCO0FBQ3ZELE1BQU1HLFFBQVE7SUFDVkMsU0FBUSxFQUFFQyxPQUFPLEVBQUVDLFVBQVUsRUFBRTtRQUMzQixNQUFNQyxPQUFPRixZQUFZLGNBQWMsU0FBUztRQUNoRCxPQUFPLENBQUMsR0FBR04sVUFBVVMsR0FBRyxDQUFFLENBQUMsY0FBYyxFQUFFRCxLQUFLLE1BQU0sRUFBRUQsV0FBVyxXQUFXLENBQUM7SUFDbkY7SUFDQUcsUUFBUSxDQUFDLEVBQUVILFVBQVUsRUFBRSxHQUFLLENBQUMsR0FBR1AsVUFBVVcsQ0FBQyxDQUFFLENBQUMsUUFBUSxFQUFFSixXQUFXLENBQUMsQ0FBQztBQUN6RTtBQUNBLE1BQU1LLE1BQU07SUFDUk4sU0FBUztRQUFDO1FBQWE7S0FBWTtJQUNuQ08sTUFBTTtJQUNOQyxZQUFZO0lBQ1pDLE9BQU87SUFDUFg7SUFDQVksTUFBS0MsR0FBRztRQUNKLE1BQU0sRUFBRVgsT0FBTyxFQUFFWSxJQUFJLEVBQUVYLFVBQVUsRUFBRVksRUFBRSxFQUFFLEdBQUdGO1FBQzFDLE1BQU1HLEtBQUtkLFlBQVksY0FBY04sVUFBVXFCLFNBQVMsQ0FBQ0MsRUFBRSxHQUFHdEIsVUFBVXFCLFNBQVMsQ0FBQ0UsRUFBRTtRQUNwRixNQUFNQyxNQUFNTCxHQUFHTSxJQUFJLENBQUNDLE9BQU8sS0FBSyxRQUFRLENBQUMsR0FBRzFCLFVBQVVXLENBQUMsQ0FBRSxDQUFDLEVBQUVPLEtBQUssT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHbEIsVUFBVVcsQ0FBQyxDQUFFLENBQUMsRUFBRSxDQUFDLEdBQUdULE9BQU95QixPQUFPLEVBQUVWLElBQUlXLEdBQUcsRUFBRXpCLGFBQWEwQixPQUFPLEVBQUUsQ0FBQyxFQUFFWCxLQUFLLENBQUMsQ0FBQztRQUM3SkQsSUFBSWEsU0FBUyxDQUFDLENBQUMsR0FBRzlCLFVBQVVXLENBQUMsQ0FBRSxDQUFDLEVBQUVhLElBQUksQ0FBQyxFQUFFSixHQUFHLENBQUMsRUFBRWIsV0FBVyxDQUFDO0lBQy9EO0FBQ0o7QUFDQVQsa0JBQWUsR0FBR2MsS0FDbEIsdUNBQXVDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaS1hbS1uZWFyYnkvLi9ub2RlX21vZHVsZXMvQG5lYXItanMvYWNjb3VudHMvbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L3ZvY2FidWxhcmllcy92YWxpZGF0aW9uL2xpbWl0TGVuZ3RoLmpzP2ZkMWIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBjb2RlZ2VuXzEgPSByZXF1aXJlKFwiLi4vLi4vY29tcGlsZS9jb2RlZ2VuXCIpO1xuY29uc3QgdXRpbF8xID0gcmVxdWlyZShcIi4uLy4uL2NvbXBpbGUvdXRpbFwiKTtcbmNvbnN0IHVjczJsZW5ndGhfMSA9IHJlcXVpcmUoXCIuLi8uLi9ydW50aW1lL3VjczJsZW5ndGhcIik7XG5jb25zdCBlcnJvciA9IHtcbiAgICBtZXNzYWdlKHsga2V5d29yZCwgc2NoZW1hQ29kZSB9KSB7XG4gICAgICAgIGNvbnN0IGNvbXAgPSBrZXl3b3JkID09PSBcIm1heExlbmd0aFwiID8gXCJtb3JlXCIgOiBcImZld2VyXCI7XG4gICAgICAgIHJldHVybiAoMCwgY29kZWdlbl8xLnN0cikgYG11c3QgTk9UIGhhdmUgJHtjb21wfSB0aGFuICR7c2NoZW1hQ29kZX0gY2hhcmFjdGVyc2A7XG4gICAgfSxcbiAgICBwYXJhbXM6ICh7IHNjaGVtYUNvZGUgfSkgPT4gKDAsIGNvZGVnZW5fMS5fKSBge2xpbWl0OiAke3NjaGVtYUNvZGV9fWAsXG59O1xuY29uc3QgZGVmID0ge1xuICAgIGtleXdvcmQ6IFtcIm1heExlbmd0aFwiLCBcIm1pbkxlbmd0aFwiXSxcbiAgICB0eXBlOiBcInN0cmluZ1wiLFxuICAgIHNjaGVtYVR5cGU6IFwibnVtYmVyXCIsXG4gICAgJGRhdGE6IHRydWUsXG4gICAgZXJyb3IsXG4gICAgY29kZShjeHQpIHtcbiAgICAgICAgY29uc3QgeyBrZXl3b3JkLCBkYXRhLCBzY2hlbWFDb2RlLCBpdCB9ID0gY3h0O1xuICAgICAgICBjb25zdCBvcCA9IGtleXdvcmQgPT09IFwibWF4TGVuZ3RoXCIgPyBjb2RlZ2VuXzEub3BlcmF0b3JzLkdUIDogY29kZWdlbl8xLm9wZXJhdG9ycy5MVDtcbiAgICAgICAgY29uc3QgbGVuID0gaXQub3B0cy51bmljb2RlID09PSBmYWxzZSA/ICgwLCBjb2RlZ2VuXzEuXykgYCR7ZGF0YX0ubGVuZ3RoYCA6ICgwLCBjb2RlZ2VuXzEuXykgYCR7KDAsIHV0aWxfMS51c2VGdW5jKShjeHQuZ2VuLCB1Y3MybGVuZ3RoXzEuZGVmYXVsdCl9KCR7ZGF0YX0pYDtcbiAgICAgICAgY3h0LmZhaWwkZGF0YSgoMCwgY29kZWdlbl8xLl8pIGAke2xlbn0gJHtvcH0gJHtzY2hlbWFDb2RlfWApO1xuICAgIH0sXG59O1xuZXhwb3J0cy5kZWZhdWx0ID0gZGVmO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bGltaXRMZW5ndGguanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiY29kZWdlbl8xIiwicmVxdWlyZSIsInV0aWxfMSIsInVjczJsZW5ndGhfMSIsImVycm9yIiwibWVzc2FnZSIsImtleXdvcmQiLCJzY2hlbWFDb2RlIiwiY29tcCIsInN0ciIsInBhcmFtcyIsIl8iLCJkZWYiLCJ0eXBlIiwic2NoZW1hVHlwZSIsIiRkYXRhIiwiY29kZSIsImN4dCIsImRhdGEiLCJpdCIsIm9wIiwib3BlcmF0b3JzIiwiR1QiLCJMVCIsImxlbiIsIm9wdHMiLCJ1bmljb2RlIiwidXNlRnVuYyIsImdlbiIsImRlZmF1bHQiLCJmYWlsJGRhdGEiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/validation/limitLength.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/validation/limitNumber.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/validation/limitNumber.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst codegen_1 = __webpack_require__(/*! ../../compile/codegen */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/codegen/index.js\");\nconst ops = codegen_1.operators;\nconst KWDs = {\n    maximum: {\n        okStr: \"<=\",\n        ok: ops.LTE,\n        fail: ops.GT\n    },\n    minimum: {\n        okStr: \">=\",\n        ok: ops.GTE,\n        fail: ops.LT\n    },\n    exclusiveMaximum: {\n        okStr: \"<\",\n        ok: ops.LT,\n        fail: ops.GTE\n    },\n    exclusiveMinimum: {\n        okStr: \">\",\n        ok: ops.GT,\n        fail: ops.LTE\n    }\n};\nconst error = {\n    message: ({ keyword, schemaCode })=>(0, codegen_1.str)`must be ${KWDs[keyword].okStr} ${schemaCode}`,\n    params: ({ keyword, schemaCode })=>(0, codegen_1._)`{comparison: ${KWDs[keyword].okStr}, limit: ${schemaCode}}`\n};\nconst def = {\n    keyword: Object.keys(KWDs),\n    type: \"number\",\n    schemaType: \"number\",\n    $data: true,\n    error,\n    code (cxt) {\n        const { keyword, data, schemaCode } = cxt;\n        cxt.fail$data((0, codegen_1._)`${data} ${KWDs[keyword].fail} ${schemaCode} || isNaN(${data})`);\n    }\n};\nexports[\"default\"] = def; //# sourceMappingURL=limitNumber.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG5lYXItanMvYWNjb3VudHMvbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L3ZvY2FidWxhcmllcy92YWxpZGF0aW9uL2xpbWl0TnVtYmVyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdELE1BQU1DLFlBQVlDLG1CQUFPQSxDQUFDLG9IQUF1QjtBQUNqRCxNQUFNQyxNQUFNRixVQUFVRyxTQUFTO0FBQy9CLE1BQU1DLE9BQU87SUFDVEMsU0FBUztRQUFFQyxPQUFPO1FBQU1DLElBQUlMLElBQUlNLEdBQUc7UUFBRUMsTUFBTVAsSUFBSVEsRUFBRTtJQUFDO0lBQ2xEQyxTQUFTO1FBQUVMLE9BQU87UUFBTUMsSUFBSUwsSUFBSVUsR0FBRztRQUFFSCxNQUFNUCxJQUFJVyxFQUFFO0lBQUM7SUFDbERDLGtCQUFrQjtRQUFFUixPQUFPO1FBQUtDLElBQUlMLElBQUlXLEVBQUU7UUFBRUosTUFBTVAsSUFBSVUsR0FBRztJQUFDO0lBQzFERyxrQkFBa0I7UUFBRVQsT0FBTztRQUFLQyxJQUFJTCxJQUFJUSxFQUFFO1FBQUVELE1BQU1QLElBQUlNLEdBQUc7SUFBQztBQUM5RDtBQUNBLE1BQU1RLFFBQVE7SUFDVkMsU0FBUyxDQUFDLEVBQUVDLE9BQU8sRUFBRUMsVUFBVSxFQUFFLEdBQUssQ0FBQyxHQUFHbkIsVUFBVW9CLEdBQUcsQ0FBRSxDQUFDLFFBQVEsRUFBRWhCLElBQUksQ0FBQ2MsUUFBUSxDQUFDWixLQUFLLENBQUMsQ0FBQyxFQUFFYSxXQUFXLENBQUM7SUFDdkdFLFFBQVEsQ0FBQyxFQUFFSCxPQUFPLEVBQUVDLFVBQVUsRUFBRSxHQUFLLENBQUMsR0FBR25CLFVBQVVzQixDQUFDLENBQUUsQ0FBQyxhQUFhLEVBQUVsQixJQUFJLENBQUNjLFFBQVEsQ0FBQ1osS0FBSyxDQUFDLFNBQVMsRUFBRWEsV0FBVyxDQUFDLENBQUM7QUFDdEg7QUFDQSxNQUFNSSxNQUFNO0lBQ1JMLFNBQVN0QixPQUFPNEIsSUFBSSxDQUFDcEI7SUFDckJxQixNQUFNO0lBQ05DLFlBQVk7SUFDWkMsT0FBTztJQUNQWDtJQUNBWSxNQUFLQyxHQUFHO1FBQ0osTUFBTSxFQUFFWCxPQUFPLEVBQUVZLElBQUksRUFBRVgsVUFBVSxFQUFFLEdBQUdVO1FBQ3RDQSxJQUFJRSxTQUFTLENBQUMsQ0FBQyxHQUFHL0IsVUFBVXNCLENBQUMsQ0FBRSxDQUFDLEVBQUVRLEtBQUssQ0FBQyxFQUFFMUIsSUFBSSxDQUFDYyxRQUFRLENBQUNULElBQUksQ0FBQyxDQUFDLEVBQUVVLFdBQVcsVUFBVSxFQUFFVyxLQUFLLENBQUMsQ0FBQztJQUNsRztBQUNKO0FBQ0FoQyxrQkFBZSxHQUFHeUIsS0FDbEIsdUNBQXVDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaS1hbS1uZWFyYnkvLi9ub2RlX21vZHVsZXMvQG5lYXItanMvYWNjb3VudHMvbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L3ZvY2FidWxhcmllcy92YWxpZGF0aW9uL2xpbWl0TnVtYmVyLmpzPzQ0YTYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBjb2RlZ2VuXzEgPSByZXF1aXJlKFwiLi4vLi4vY29tcGlsZS9jb2RlZ2VuXCIpO1xuY29uc3Qgb3BzID0gY29kZWdlbl8xLm9wZXJhdG9ycztcbmNvbnN0IEtXRHMgPSB7XG4gICAgbWF4aW11bTogeyBva1N0cjogXCI8PVwiLCBvazogb3BzLkxURSwgZmFpbDogb3BzLkdUIH0sXG4gICAgbWluaW11bTogeyBva1N0cjogXCI+PVwiLCBvazogb3BzLkdURSwgZmFpbDogb3BzLkxUIH0sXG4gICAgZXhjbHVzaXZlTWF4aW11bTogeyBva1N0cjogXCI8XCIsIG9rOiBvcHMuTFQsIGZhaWw6IG9wcy5HVEUgfSxcbiAgICBleGNsdXNpdmVNaW5pbXVtOiB7IG9rU3RyOiBcIj5cIiwgb2s6IG9wcy5HVCwgZmFpbDogb3BzLkxURSB9LFxufTtcbmNvbnN0IGVycm9yID0ge1xuICAgIG1lc3NhZ2U6ICh7IGtleXdvcmQsIHNjaGVtYUNvZGUgfSkgPT4gKDAsIGNvZGVnZW5fMS5zdHIpIGBtdXN0IGJlICR7S1dEc1trZXl3b3JkXS5va1N0cn0gJHtzY2hlbWFDb2RlfWAsXG4gICAgcGFyYW1zOiAoeyBrZXl3b3JkLCBzY2hlbWFDb2RlIH0pID0+ICgwLCBjb2RlZ2VuXzEuXykgYHtjb21wYXJpc29uOiAke0tXRHNba2V5d29yZF0ub2tTdHJ9LCBsaW1pdDogJHtzY2hlbWFDb2RlfX1gLFxufTtcbmNvbnN0IGRlZiA9IHtcbiAgICBrZXl3b3JkOiBPYmplY3Qua2V5cyhLV0RzKSxcbiAgICB0eXBlOiBcIm51bWJlclwiLFxuICAgIHNjaGVtYVR5cGU6IFwibnVtYmVyXCIsXG4gICAgJGRhdGE6IHRydWUsXG4gICAgZXJyb3IsXG4gICAgY29kZShjeHQpIHtcbiAgICAgICAgY29uc3QgeyBrZXl3b3JkLCBkYXRhLCBzY2hlbWFDb2RlIH0gPSBjeHQ7XG4gICAgICAgIGN4dC5mYWlsJGRhdGEoKDAsIGNvZGVnZW5fMS5fKSBgJHtkYXRhfSAke0tXRHNba2V5d29yZF0uZmFpbH0gJHtzY2hlbWFDb2RlfSB8fCBpc05hTigke2RhdGF9KWApO1xuICAgIH0sXG59O1xuZXhwb3J0cy5kZWZhdWx0ID0gZGVmO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bGltaXROdW1iZXIuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiY29kZWdlbl8xIiwicmVxdWlyZSIsIm9wcyIsIm9wZXJhdG9ycyIsIktXRHMiLCJtYXhpbXVtIiwib2tTdHIiLCJvayIsIkxURSIsImZhaWwiLCJHVCIsIm1pbmltdW0iLCJHVEUiLCJMVCIsImV4Y2x1c2l2ZU1heGltdW0iLCJleGNsdXNpdmVNaW5pbXVtIiwiZXJyb3IiLCJtZXNzYWdlIiwia2V5d29yZCIsInNjaGVtYUNvZGUiLCJzdHIiLCJwYXJhbXMiLCJfIiwiZGVmIiwia2V5cyIsInR5cGUiLCJzY2hlbWFUeXBlIiwiJGRhdGEiLCJjb2RlIiwiY3h0IiwiZGF0YSIsImZhaWwkZGF0YSIsImRlZmF1bHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/validation/limitNumber.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/validation/limitProperties.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/validation/limitProperties.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst codegen_1 = __webpack_require__(/*! ../../compile/codegen */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/codegen/index.js\");\nconst error = {\n    message ({ keyword, schemaCode }) {\n        const comp = keyword === \"maxProperties\" ? \"more\" : \"fewer\";\n        return (0, codegen_1.str)`must NOT have ${comp} than ${schemaCode} properties`;\n    },\n    params: ({ schemaCode })=>(0, codegen_1._)`{limit: ${schemaCode}}`\n};\nconst def = {\n    keyword: [\n        \"maxProperties\",\n        \"minProperties\"\n    ],\n    type: \"object\",\n    schemaType: \"number\",\n    $data: true,\n    error,\n    code (cxt) {\n        const { keyword, data, schemaCode } = cxt;\n        const op = keyword === \"maxProperties\" ? codegen_1.operators.GT : codegen_1.operators.LT;\n        cxt.fail$data((0, codegen_1._)`Object.keys(${data}).length ${op} ${schemaCode}`);\n    }\n};\nexports[\"default\"] = def; //# sourceMappingURL=limitProperties.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG5lYXItanMvYWNjb3VudHMvbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L3ZvY2FidWxhcmllcy92YWxpZGF0aW9uL2xpbWl0UHJvcGVydGllcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3RCxNQUFNQyxZQUFZQyxtQkFBT0EsQ0FBQyxvSEFBdUI7QUFDakQsTUFBTUMsUUFBUTtJQUNWQyxTQUFRLEVBQUVDLE9BQU8sRUFBRUMsVUFBVSxFQUFFO1FBQzNCLE1BQU1DLE9BQU9GLFlBQVksa0JBQWtCLFNBQVM7UUFDcEQsT0FBTyxDQUFDLEdBQUdKLFVBQVVPLEdBQUcsQ0FBRSxDQUFDLGNBQWMsRUFBRUQsS0FBSyxNQUFNLEVBQUVELFdBQVcsV0FBVyxDQUFDO0lBQ25GO0lBQ0FHLFFBQVEsQ0FBQyxFQUFFSCxVQUFVLEVBQUUsR0FBSyxDQUFDLEdBQUdMLFVBQVVTLENBQUMsQ0FBRSxDQUFDLFFBQVEsRUFBRUosV0FBVyxDQUFDLENBQUM7QUFDekU7QUFDQSxNQUFNSyxNQUFNO0lBQ1JOLFNBQVM7UUFBQztRQUFpQjtLQUFnQjtJQUMzQ08sTUFBTTtJQUNOQyxZQUFZO0lBQ1pDLE9BQU87SUFDUFg7SUFDQVksTUFBS0MsR0FBRztRQUNKLE1BQU0sRUFBRVgsT0FBTyxFQUFFWSxJQUFJLEVBQUVYLFVBQVUsRUFBRSxHQUFHVTtRQUN0QyxNQUFNRSxLQUFLYixZQUFZLGtCQUFrQkosVUFBVWtCLFNBQVMsQ0FBQ0MsRUFBRSxHQUFHbkIsVUFBVWtCLFNBQVMsQ0FBQ0UsRUFBRTtRQUN4RkwsSUFBSU0sU0FBUyxDQUFDLENBQUMsR0FBR3JCLFVBQVVTLENBQUMsQ0FBRSxDQUFDLFlBQVksRUFBRU8sS0FBSyxTQUFTLEVBQUVDLEdBQUcsQ0FBQyxFQUFFWixXQUFXLENBQUM7SUFDcEY7QUFDSjtBQUNBUCxrQkFBZSxHQUFHWSxLQUNsQiwyQ0FBMkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pLWFtLW5lYXJieS8uL25vZGVfbW9kdWxlcy9AbmVhci1qcy9hY2NvdW50cy9ub2RlX21vZHVsZXMvYWp2L2Rpc3Qvdm9jYWJ1bGFyaWVzL3ZhbGlkYXRpb24vbGltaXRQcm9wZXJ0aWVzLmpzP2Y1MTgiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBjb2RlZ2VuXzEgPSByZXF1aXJlKFwiLi4vLi4vY29tcGlsZS9jb2RlZ2VuXCIpO1xuY29uc3QgZXJyb3IgPSB7XG4gICAgbWVzc2FnZSh7IGtleXdvcmQsIHNjaGVtYUNvZGUgfSkge1xuICAgICAgICBjb25zdCBjb21wID0ga2V5d29yZCA9PT0gXCJtYXhQcm9wZXJ0aWVzXCIgPyBcIm1vcmVcIiA6IFwiZmV3ZXJcIjtcbiAgICAgICAgcmV0dXJuICgwLCBjb2RlZ2VuXzEuc3RyKSBgbXVzdCBOT1QgaGF2ZSAke2NvbXB9IHRoYW4gJHtzY2hlbWFDb2RlfSBwcm9wZXJ0aWVzYDtcbiAgICB9LFxuICAgIHBhcmFtczogKHsgc2NoZW1hQ29kZSB9KSA9PiAoMCwgY29kZWdlbl8xLl8pIGB7bGltaXQ6ICR7c2NoZW1hQ29kZX19YCxcbn07XG5jb25zdCBkZWYgPSB7XG4gICAga2V5d29yZDogW1wibWF4UHJvcGVydGllc1wiLCBcIm1pblByb3BlcnRpZXNcIl0sXG4gICAgdHlwZTogXCJvYmplY3RcIixcbiAgICBzY2hlbWFUeXBlOiBcIm51bWJlclwiLFxuICAgICRkYXRhOiB0cnVlLFxuICAgIGVycm9yLFxuICAgIGNvZGUoY3h0KSB7XG4gICAgICAgIGNvbnN0IHsga2V5d29yZCwgZGF0YSwgc2NoZW1hQ29kZSB9ID0gY3h0O1xuICAgICAgICBjb25zdCBvcCA9IGtleXdvcmQgPT09IFwibWF4UHJvcGVydGllc1wiID8gY29kZWdlbl8xLm9wZXJhdG9ycy5HVCA6IGNvZGVnZW5fMS5vcGVyYXRvcnMuTFQ7XG4gICAgICAgIGN4dC5mYWlsJGRhdGEoKDAsIGNvZGVnZW5fMS5fKSBgT2JqZWN0LmtleXMoJHtkYXRhfSkubGVuZ3RoICR7b3B9ICR7c2NoZW1hQ29kZX1gKTtcbiAgICB9LFxufTtcbmV4cG9ydHMuZGVmYXVsdCA9IGRlZjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxpbWl0UHJvcGVydGllcy5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJjb2RlZ2VuXzEiLCJyZXF1aXJlIiwiZXJyb3IiLCJtZXNzYWdlIiwia2V5d29yZCIsInNjaGVtYUNvZGUiLCJjb21wIiwic3RyIiwicGFyYW1zIiwiXyIsImRlZiIsInR5cGUiLCJzY2hlbWFUeXBlIiwiJGRhdGEiLCJjb2RlIiwiY3h0IiwiZGF0YSIsIm9wIiwib3BlcmF0b3JzIiwiR1QiLCJMVCIsImZhaWwkZGF0YSIsImRlZmF1bHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/validation/limitProperties.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/validation/multipleOf.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/validation/multipleOf.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst codegen_1 = __webpack_require__(/*! ../../compile/codegen */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/codegen/index.js\");\nconst error = {\n    message: ({ schemaCode })=>(0, codegen_1.str)`must be multiple of ${schemaCode}`,\n    params: ({ schemaCode })=>(0, codegen_1._)`{multipleOf: ${schemaCode}}`\n};\nconst def = {\n    keyword: \"multipleOf\",\n    type: \"number\",\n    schemaType: \"number\",\n    $data: true,\n    error,\n    code (cxt) {\n        const { gen, data, schemaCode, it } = cxt;\n        // const bdt = bad$DataType(schemaCode, <string>def.schemaType, $data)\n        const prec = it.opts.multipleOfPrecision;\n        const res = gen.let(\"res\");\n        const invalid = prec ? (0, codegen_1._)`Math.abs(Math.round(${res}) - ${res}) > 1e-${prec}` : (0, codegen_1._)`${res} !== parseInt(${res})`;\n        cxt.fail$data((0, codegen_1._)`(${schemaCode} === 0 || (${res} = ${data}/${schemaCode}, ${invalid}))`);\n    }\n};\nexports[\"default\"] = def; //# sourceMappingURL=multipleOf.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG5lYXItanMvYWNjb3VudHMvbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L3ZvY2FidWxhcmllcy92YWxpZGF0aW9uL211bHRpcGxlT2YuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0QsTUFBTUMsWUFBWUMsbUJBQU9BLENBQUMsb0hBQXVCO0FBQ2pELE1BQU1DLFFBQVE7SUFDVkMsU0FBUyxDQUFDLEVBQUVDLFVBQVUsRUFBRSxHQUFLLENBQUMsR0FBR0osVUFBVUssR0FBRyxDQUFFLENBQUMsb0JBQW9CLEVBQUVELFdBQVcsQ0FBQztJQUNuRkUsUUFBUSxDQUFDLEVBQUVGLFVBQVUsRUFBRSxHQUFLLENBQUMsR0FBR0osVUFBVU8sQ0FBQyxDQUFFLENBQUMsYUFBYSxFQUFFSCxXQUFXLENBQUMsQ0FBQztBQUM5RTtBQUNBLE1BQU1JLE1BQU07SUFDUkMsU0FBUztJQUNUQyxNQUFNO0lBQ05DLFlBQVk7SUFDWkMsT0FBTztJQUNQVjtJQUNBVyxNQUFLQyxHQUFHO1FBQ0osTUFBTSxFQUFFQyxHQUFHLEVBQUVDLElBQUksRUFBRVosVUFBVSxFQUFFYSxFQUFFLEVBQUUsR0FBR0g7UUFDdEMsc0VBQXNFO1FBQ3RFLE1BQU1JLE9BQU9ELEdBQUdFLElBQUksQ0FBQ0MsbUJBQW1CO1FBQ3hDLE1BQU1DLE1BQU1OLElBQUlPLEdBQUcsQ0FBQztRQUNwQixNQUFNQyxVQUFVTCxPQUNWLENBQUMsR0FBR2xCLFVBQVVPLENBQUMsQ0FBRSxDQUFDLG9CQUFvQixFQUFFYyxJQUFJLElBQUksRUFBRUEsSUFBSSxPQUFPLEVBQUVILEtBQUssQ0FBQyxHQUNyRSxDQUFDLEdBQUdsQixVQUFVTyxDQUFDLENBQUUsQ0FBQyxFQUFFYyxJQUFJLGNBQWMsRUFBRUEsSUFBSSxDQUFDLENBQUM7UUFDcERQLElBQUlVLFNBQVMsQ0FBQyxDQUFDLEdBQUd4QixVQUFVTyxDQUFDLENBQUUsQ0FBQyxDQUFDLEVBQUVILFdBQVcsV0FBVyxFQUFFaUIsSUFBSSxHQUFHLEVBQUVMLEtBQUssQ0FBQyxFQUFFWixXQUFXLEVBQUUsRUFBRW1CLFFBQVEsRUFBRSxDQUFDO0lBQzFHO0FBQ0o7QUFDQXpCLGtCQUFlLEdBQUdVLEtBQ2xCLHNDQUFzQyIsInNvdXJjZXMiOlsid2VicGFjazovL2ktYW0tbmVhcmJ5Ly4vbm9kZV9tb2R1bGVzL0BuZWFyLWpzL2FjY291bnRzL25vZGVfbW9kdWxlcy9hanYvZGlzdC92b2NhYnVsYXJpZXMvdmFsaWRhdGlvbi9tdWx0aXBsZU9mLmpzP2ZiOTQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBjb2RlZ2VuXzEgPSByZXF1aXJlKFwiLi4vLi4vY29tcGlsZS9jb2RlZ2VuXCIpO1xuY29uc3QgZXJyb3IgPSB7XG4gICAgbWVzc2FnZTogKHsgc2NoZW1hQ29kZSB9KSA9PiAoMCwgY29kZWdlbl8xLnN0cikgYG11c3QgYmUgbXVsdGlwbGUgb2YgJHtzY2hlbWFDb2RlfWAsXG4gICAgcGFyYW1zOiAoeyBzY2hlbWFDb2RlIH0pID0+ICgwLCBjb2RlZ2VuXzEuXykgYHttdWx0aXBsZU9mOiAke3NjaGVtYUNvZGV9fWAsXG59O1xuY29uc3QgZGVmID0ge1xuICAgIGtleXdvcmQ6IFwibXVsdGlwbGVPZlwiLFxuICAgIHR5cGU6IFwibnVtYmVyXCIsXG4gICAgc2NoZW1hVHlwZTogXCJudW1iZXJcIixcbiAgICAkZGF0YTogdHJ1ZSxcbiAgICBlcnJvcixcbiAgICBjb2RlKGN4dCkge1xuICAgICAgICBjb25zdCB7IGdlbiwgZGF0YSwgc2NoZW1hQ29kZSwgaXQgfSA9IGN4dDtcbiAgICAgICAgLy8gY29uc3QgYmR0ID0gYmFkJERhdGFUeXBlKHNjaGVtYUNvZGUsIDxzdHJpbmc+ZGVmLnNjaGVtYVR5cGUsICRkYXRhKVxuICAgICAgICBjb25zdCBwcmVjID0gaXQub3B0cy5tdWx0aXBsZU9mUHJlY2lzaW9uO1xuICAgICAgICBjb25zdCByZXMgPSBnZW4ubGV0KFwicmVzXCIpO1xuICAgICAgICBjb25zdCBpbnZhbGlkID0gcHJlY1xuICAgICAgICAgICAgPyAoMCwgY29kZWdlbl8xLl8pIGBNYXRoLmFicyhNYXRoLnJvdW5kKCR7cmVzfSkgLSAke3Jlc30pID4gMWUtJHtwcmVjfWBcbiAgICAgICAgICAgIDogKDAsIGNvZGVnZW5fMS5fKSBgJHtyZXN9ICE9PSBwYXJzZUludCgke3Jlc30pYDtcbiAgICAgICAgY3h0LmZhaWwkZGF0YSgoMCwgY29kZWdlbl8xLl8pIGAoJHtzY2hlbWFDb2RlfSA9PT0gMCB8fCAoJHtyZXN9ID0gJHtkYXRhfS8ke3NjaGVtYUNvZGV9LCAke2ludmFsaWR9KSlgKTtcbiAgICB9LFxufTtcbmV4cG9ydHMuZGVmYXVsdCA9IGRlZjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW11bHRpcGxlT2YuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiY29kZWdlbl8xIiwicmVxdWlyZSIsImVycm9yIiwibWVzc2FnZSIsInNjaGVtYUNvZGUiLCJzdHIiLCJwYXJhbXMiLCJfIiwiZGVmIiwia2V5d29yZCIsInR5cGUiLCJzY2hlbWFUeXBlIiwiJGRhdGEiLCJjb2RlIiwiY3h0IiwiZ2VuIiwiZGF0YSIsIml0IiwicHJlYyIsIm9wdHMiLCJtdWx0aXBsZU9mUHJlY2lzaW9uIiwicmVzIiwibGV0IiwiaW52YWxpZCIsImZhaWwkZGF0YSIsImRlZmF1bHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/validation/multipleOf.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/validation/pattern.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/validation/pattern.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst code_1 = __webpack_require__(/*! ../code */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/code.js\");\nconst codegen_1 = __webpack_require__(/*! ../../compile/codegen */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/codegen/index.js\");\nconst error = {\n    message: ({ schemaCode })=>(0, codegen_1.str)`must match pattern \"${schemaCode}\"`,\n    params: ({ schemaCode })=>(0, codegen_1._)`{pattern: ${schemaCode}}`\n};\nconst def = {\n    keyword: \"pattern\",\n    type: \"string\",\n    schemaType: \"string\",\n    $data: true,\n    error,\n    code (cxt) {\n        const { data, $data, schema, schemaCode, it } = cxt;\n        // TODO regexp should be wrapped in try/catchs\n        const u = it.opts.unicodeRegExp ? \"u\" : \"\";\n        const regExp = $data ? (0, codegen_1._)`(new RegExp(${schemaCode}, ${u}))` : (0, code_1.usePattern)(cxt, schema);\n        cxt.fail$data((0, codegen_1._)`!${regExp}.test(${data})`);\n    }\n};\nexports[\"default\"] = def; //# sourceMappingURL=pattern.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG5lYXItanMvYWNjb3VudHMvbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L3ZvY2FidWxhcmllcy92YWxpZGF0aW9uL3BhdHRlcm4uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0QsTUFBTUMsU0FBU0MsbUJBQU9BLENBQUMsa0dBQVM7QUFDaEMsTUFBTUMsWUFBWUQsbUJBQU9BLENBQUMsb0hBQXVCO0FBQ2pELE1BQU1FLFFBQVE7SUFDVkMsU0FBUyxDQUFDLEVBQUVDLFVBQVUsRUFBRSxHQUFLLENBQUMsR0FBR0gsVUFBVUksR0FBRyxDQUFFLENBQUMsb0JBQW9CLEVBQUVELFdBQVcsQ0FBQyxDQUFDO0lBQ3BGRSxRQUFRLENBQUMsRUFBRUYsVUFBVSxFQUFFLEdBQUssQ0FBQyxHQUFHSCxVQUFVTSxDQUFDLENBQUUsQ0FBQyxVQUFVLEVBQUVILFdBQVcsQ0FBQyxDQUFDO0FBQzNFO0FBQ0EsTUFBTUksTUFBTTtJQUNSQyxTQUFTO0lBQ1RDLE1BQU07SUFDTkMsWUFBWTtJQUNaQyxPQUFPO0lBQ1BWO0lBQ0FXLE1BQUtDLEdBQUc7UUFDSixNQUFNLEVBQUVDLElBQUksRUFBRUgsS0FBSyxFQUFFSSxNQUFNLEVBQUVaLFVBQVUsRUFBRWEsRUFBRSxFQUFFLEdBQUdIO1FBQ2hELDhDQUE4QztRQUM5QyxNQUFNSSxJQUFJRCxHQUFHRSxJQUFJLENBQUNDLGFBQWEsR0FBRyxNQUFNO1FBQ3hDLE1BQU1DLFNBQVNULFFBQVEsQ0FBQyxHQUFHWCxVQUFVTSxDQUFDLENBQUUsQ0FBQyxZQUFZLEVBQUVILFdBQVcsRUFBRSxFQUFFYyxFQUFFLEVBQUUsQ0FBQyxHQUFHLENBQUMsR0FBR25CLE9BQU91QixVQUFVLEVBQUVSLEtBQUtFO1FBQzFHRixJQUFJUyxTQUFTLENBQUMsQ0FBQyxHQUFHdEIsVUFBVU0sQ0FBQyxDQUFFLENBQUMsQ0FBQyxFQUFFYyxPQUFPLE1BQU0sRUFBRU4sS0FBSyxDQUFDLENBQUM7SUFDN0Q7QUFDSjtBQUNBbEIsa0JBQWUsR0FBR1csS0FDbEIsbUNBQW1DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaS1hbS1uZWFyYnkvLi9ub2RlX21vZHVsZXMvQG5lYXItanMvYWNjb3VudHMvbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L3ZvY2FidWxhcmllcy92YWxpZGF0aW9uL3BhdHRlcm4uanM/Y2EzNCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGNvZGVfMSA9IHJlcXVpcmUoXCIuLi9jb2RlXCIpO1xuY29uc3QgY29kZWdlbl8xID0gcmVxdWlyZShcIi4uLy4uL2NvbXBpbGUvY29kZWdlblwiKTtcbmNvbnN0IGVycm9yID0ge1xuICAgIG1lc3NhZ2U6ICh7IHNjaGVtYUNvZGUgfSkgPT4gKDAsIGNvZGVnZW5fMS5zdHIpIGBtdXN0IG1hdGNoIHBhdHRlcm4gXCIke3NjaGVtYUNvZGV9XCJgLFxuICAgIHBhcmFtczogKHsgc2NoZW1hQ29kZSB9KSA9PiAoMCwgY29kZWdlbl8xLl8pIGB7cGF0dGVybjogJHtzY2hlbWFDb2RlfX1gLFxufTtcbmNvbnN0IGRlZiA9IHtcbiAgICBrZXl3b3JkOiBcInBhdHRlcm5cIixcbiAgICB0eXBlOiBcInN0cmluZ1wiLFxuICAgIHNjaGVtYVR5cGU6IFwic3RyaW5nXCIsXG4gICAgJGRhdGE6IHRydWUsXG4gICAgZXJyb3IsXG4gICAgY29kZShjeHQpIHtcbiAgICAgICAgY29uc3QgeyBkYXRhLCAkZGF0YSwgc2NoZW1hLCBzY2hlbWFDb2RlLCBpdCB9ID0gY3h0O1xuICAgICAgICAvLyBUT0RPIHJlZ2V4cCBzaG91bGQgYmUgd3JhcHBlZCBpbiB0cnkvY2F0Y2hzXG4gICAgICAgIGNvbnN0IHUgPSBpdC5vcHRzLnVuaWNvZGVSZWdFeHAgPyBcInVcIiA6IFwiXCI7XG4gICAgICAgIGNvbnN0IHJlZ0V4cCA9ICRkYXRhID8gKDAsIGNvZGVnZW5fMS5fKSBgKG5ldyBSZWdFeHAoJHtzY2hlbWFDb2RlfSwgJHt1fSkpYCA6ICgwLCBjb2RlXzEudXNlUGF0dGVybikoY3h0LCBzY2hlbWEpO1xuICAgICAgICBjeHQuZmFpbCRkYXRhKCgwLCBjb2RlZ2VuXzEuXykgYCEke3JlZ0V4cH0udGVzdCgke2RhdGF9KWApO1xuICAgIH0sXG59O1xuZXhwb3J0cy5kZWZhdWx0ID0gZGVmO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGF0dGVybi5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJjb2RlXzEiLCJyZXF1aXJlIiwiY29kZWdlbl8xIiwiZXJyb3IiLCJtZXNzYWdlIiwic2NoZW1hQ29kZSIsInN0ciIsInBhcmFtcyIsIl8iLCJkZWYiLCJrZXl3b3JkIiwidHlwZSIsInNjaGVtYVR5cGUiLCIkZGF0YSIsImNvZGUiLCJjeHQiLCJkYXRhIiwic2NoZW1hIiwiaXQiLCJ1Iiwib3B0cyIsInVuaWNvZGVSZWdFeHAiLCJyZWdFeHAiLCJ1c2VQYXR0ZXJuIiwiZmFpbCRkYXRhIiwiZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/validation/pattern.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/validation/required.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/validation/required.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst code_1 = __webpack_require__(/*! ../code */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/code.js\");\nconst codegen_1 = __webpack_require__(/*! ../../compile/codegen */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/codegen/index.js\");\nconst util_1 = __webpack_require__(/*! ../../compile/util */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/util.js\");\nconst error = {\n    message: ({ params: { missingProperty } })=>(0, codegen_1.str)`must have required property '${missingProperty}'`,\n    params: ({ params: { missingProperty } })=>(0, codegen_1._)`{missingProperty: ${missingProperty}}`\n};\nconst def = {\n    keyword: \"required\",\n    type: \"object\",\n    schemaType: \"array\",\n    $data: true,\n    error,\n    code (cxt) {\n        const { gen, schema, schemaCode, data, $data, it } = cxt;\n        const { opts } = it;\n        if (!$data && schema.length === 0) return;\n        const useLoop = schema.length >= opts.loopRequired;\n        if (it.allErrors) allErrorsMode();\n        else exitOnErrorMode();\n        if (opts.strictRequired) {\n            const props = cxt.parentSchema.properties;\n            const { definedProperties } = cxt.it;\n            for (const requiredKey of schema){\n                if ((props === null || props === void 0 ? void 0 : props[requiredKey]) === undefined && !definedProperties.has(requiredKey)) {\n                    const schemaPath = it.schemaEnv.baseId + it.errSchemaPath;\n                    const msg = `required property \"${requiredKey}\" is not defined at \"${schemaPath}\" (strictRequired)`;\n                    (0, util_1.checkStrictMode)(it, msg, it.opts.strictRequired);\n                }\n            }\n        }\n        function allErrorsMode() {\n            if (useLoop || $data) {\n                cxt.block$data(codegen_1.nil, loopAllRequired);\n            } else {\n                for (const prop of schema){\n                    (0, code_1.checkReportMissingProp)(cxt, prop);\n                }\n            }\n        }\n        function exitOnErrorMode() {\n            const missing = gen.let(\"missing\");\n            if (useLoop || $data) {\n                const valid = gen.let(\"valid\", true);\n                cxt.block$data(valid, ()=>loopUntilMissing(missing, valid));\n                cxt.ok(valid);\n            } else {\n                gen.if((0, code_1.checkMissingProp)(cxt, schema, missing));\n                (0, code_1.reportMissingProp)(cxt, missing);\n                gen.else();\n            }\n        }\n        function loopAllRequired() {\n            gen.forOf(\"prop\", schemaCode, (prop)=>{\n                cxt.setParams({\n                    missingProperty: prop\n                });\n                gen.if((0, code_1.noPropertyInData)(gen, data, prop, opts.ownProperties), ()=>cxt.error());\n            });\n        }\n        function loopUntilMissing(missing, valid) {\n            cxt.setParams({\n                missingProperty: missing\n            });\n            gen.forOf(missing, schemaCode, ()=>{\n                gen.assign(valid, (0, code_1.propertyInData)(gen, data, missing, opts.ownProperties));\n                gen.if((0, codegen_1.not)(valid), ()=>{\n                    cxt.error();\n                    gen.break();\n                });\n            }, codegen_1.nil);\n        }\n    }\n};\nexports[\"default\"] = def; //# sourceMappingURL=required.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/validation/required.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/validation/uniqueItems.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/validation/uniqueItems.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst dataType_1 = __webpack_require__(/*! ../../compile/validate/dataType */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/validate/dataType.js\");\nconst codegen_1 = __webpack_require__(/*! ../../compile/codegen */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/codegen/index.js\");\nconst util_1 = __webpack_require__(/*! ../../compile/util */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/compile/util.js\");\nconst equal_1 = __webpack_require__(/*! ../../runtime/equal */ \"(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/runtime/equal.js\");\nconst error = {\n    message: ({ params: { i, j } })=>(0, codegen_1.str)`must NOT have duplicate items (items ## ${j} and ${i} are identical)`,\n    params: ({ params: { i, j } })=>(0, codegen_1._)`{i: ${i}, j: ${j}}`\n};\nconst def = {\n    keyword: \"uniqueItems\",\n    type: \"array\",\n    schemaType: \"boolean\",\n    $data: true,\n    error,\n    code (cxt) {\n        const { gen, data, $data, schema, parentSchema, schemaCode, it } = cxt;\n        if (!$data && !schema) return;\n        const valid = gen.let(\"valid\");\n        const itemTypes = parentSchema.items ? (0, dataType_1.getSchemaTypes)(parentSchema.items) : [];\n        cxt.block$data(valid, validateUniqueItems, (0, codegen_1._)`${schemaCode} === false`);\n        cxt.ok(valid);\n        function validateUniqueItems() {\n            const i = gen.let(\"i\", (0, codegen_1._)`${data}.length`);\n            const j = gen.let(\"j\");\n            cxt.setParams({\n                i,\n                j\n            });\n            gen.assign(valid, true);\n            gen.if((0, codegen_1._)`${i} > 1`, ()=>(canOptimize() ? loopN : loopN2)(i, j));\n        }\n        function canOptimize() {\n            return itemTypes.length > 0 && !itemTypes.some((t)=>t === \"object\" || t === \"array\");\n        }\n        function loopN(i, j) {\n            const item = gen.name(\"item\");\n            const wrongType = (0, dataType_1.checkDataTypes)(itemTypes, item, it.opts.strictNumbers, dataType_1.DataType.Wrong);\n            const indices = gen.const(\"indices\", (0, codegen_1._)`{}`);\n            gen.for((0, codegen_1._)`;${i}--;`, ()=>{\n                gen.let(item, (0, codegen_1._)`${data}[${i}]`);\n                gen.if(wrongType, (0, codegen_1._)`continue`);\n                if (itemTypes.length > 1) gen.if((0, codegen_1._)`typeof ${item} == \"string\"`, (0, codegen_1._)`${item} += \"_\"`);\n                gen.if((0, codegen_1._)`typeof ${indices}[${item}] == \"number\"`, ()=>{\n                    gen.assign(j, (0, codegen_1._)`${indices}[${item}]`);\n                    cxt.error();\n                    gen.assign(valid, false).break();\n                }).code((0, codegen_1._)`${indices}[${item}] = ${i}`);\n            });\n        }\n        function loopN2(i, j) {\n            const eql = (0, util_1.useFunc)(gen, equal_1.default);\n            const outer = gen.name(\"outer\");\n            gen.label(outer).for((0, codegen_1._)`;${i}--;`, ()=>gen.for((0, codegen_1._)`${j} = ${i}; ${j}--;`, ()=>gen.if((0, codegen_1._)`${eql}(${data}[${i}], ${data}[${j}])`, ()=>{\n                        cxt.error();\n                        gen.assign(valid, false).break(outer);\n                    })));\n        }\n    }\n};\nexports[\"default\"] = def; //# sourceMappingURL=uniqueItems.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/vocabularies/validation/uniqueItems.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@near-js/accounts/node_modules/json-schema-traverse/index.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@near-js/accounts/node_modules/json-schema-traverse/index.js ***!
  \***********************************************************************************/
/***/ ((module) => {

eval("\nvar traverse = module.exports = function(schema, opts, cb) {\n    // Legacy support for v0.3.1 and earlier.\n    if (typeof opts == \"function\") {\n        cb = opts;\n        opts = {};\n    }\n    cb = opts.cb || cb;\n    var pre = typeof cb == \"function\" ? cb : cb.pre || function() {};\n    var post = cb.post || function() {};\n    _traverse(opts, pre, post, schema, \"\", schema);\n};\ntraverse.keywords = {\n    additionalItems: true,\n    items: true,\n    contains: true,\n    additionalProperties: true,\n    propertyNames: true,\n    not: true,\n    if: true,\n    then: true,\n    else: true\n};\ntraverse.arrayKeywords = {\n    items: true,\n    allOf: true,\n    anyOf: true,\n    oneOf: true\n};\ntraverse.propsKeywords = {\n    $defs: true,\n    definitions: true,\n    properties: true,\n    patternProperties: true,\n    dependencies: true\n};\ntraverse.skipKeywords = {\n    default: true,\n    enum: true,\n    const: true,\n    required: true,\n    maximum: true,\n    minimum: true,\n    exclusiveMaximum: true,\n    exclusiveMinimum: true,\n    multipleOf: true,\n    maxLength: true,\n    minLength: true,\n    pattern: true,\n    format: true,\n    maxItems: true,\n    minItems: true,\n    uniqueItems: true,\n    maxProperties: true,\n    minProperties: true\n};\nfunction _traverse(opts, pre, post, schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex) {\n    if (schema && typeof schema == \"object\" && !Array.isArray(schema)) {\n        pre(schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex);\n        for(var key in schema){\n            var sch = schema[key];\n            if (Array.isArray(sch)) {\n                if (key in traverse.arrayKeywords) {\n                    for(var i = 0; i < sch.length; i++)_traverse(opts, pre, post, sch[i], jsonPtr + \"/\" + key + \"/\" + i, rootSchema, jsonPtr, key, schema, i);\n                }\n            } else if (key in traverse.propsKeywords) {\n                if (sch && typeof sch == \"object\") {\n                    for(var prop in sch)_traverse(opts, pre, post, sch[prop], jsonPtr + \"/\" + key + \"/\" + escapeJsonPtr(prop), rootSchema, jsonPtr, key, schema, prop);\n                }\n            } else if (key in traverse.keywords || opts.allKeys && !(key in traverse.skipKeywords)) {\n                _traverse(opts, pre, post, sch, jsonPtr + \"/\" + key, rootSchema, jsonPtr, key, schema);\n            }\n        }\n        post(schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex);\n    }\n}\nfunction escapeJsonPtr(str) {\n    return str.replace(/~/g, \"~0\").replace(/\\//g, \"~1\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG5lYXItanMvYWNjb3VudHMvbm9kZV9tb2R1bGVzL2pzb24tc2NoZW1hLXRyYXZlcnNlL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsSUFBSUEsV0FBV0MsT0FBT0MsT0FBTyxHQUFHLFNBQVVDLE1BQU0sRUFBRUMsSUFBSSxFQUFFQyxFQUFFO0lBQ3hELHlDQUF5QztJQUN6QyxJQUFJLE9BQU9ELFFBQVEsWUFBWTtRQUM3QkMsS0FBS0Q7UUFDTEEsT0FBTyxDQUFDO0lBQ1Y7SUFFQUMsS0FBS0QsS0FBS0MsRUFBRSxJQUFJQTtJQUNoQixJQUFJQyxNQUFNLE9BQVFELE1BQU0sYUFBY0EsS0FBS0EsR0FBR0MsR0FBRyxJQUFJLFlBQVk7SUFDakUsSUFBSUMsT0FBT0YsR0FBR0UsSUFBSSxJQUFJLFlBQVk7SUFFbENDLFVBQVVKLE1BQU1FLEtBQUtDLE1BQU1KLFFBQVEsSUFBSUE7QUFDekM7QUFHQUgsU0FBU1MsUUFBUSxHQUFHO0lBQ2xCQyxpQkFBaUI7SUFDakJDLE9BQU87SUFDUEMsVUFBVTtJQUNWQyxzQkFBc0I7SUFDdEJDLGVBQWU7SUFDZkMsS0FBSztJQUNMQyxJQUFJO0lBQ0pDLE1BQU07SUFDTkMsTUFBTTtBQUNSO0FBRUFsQixTQUFTbUIsYUFBYSxHQUFHO0lBQ3ZCUixPQUFPO0lBQ1BTLE9BQU87SUFDUEMsT0FBTztJQUNQQyxPQUFPO0FBQ1Q7QUFFQXRCLFNBQVN1QixhQUFhLEdBQUc7SUFDdkJDLE9BQU87SUFDUEMsYUFBYTtJQUNiQyxZQUFZO0lBQ1pDLG1CQUFtQjtJQUNuQkMsY0FBYztBQUNoQjtBQUVBNUIsU0FBUzZCLFlBQVksR0FBRztJQUN0QkMsU0FBUztJQUNUQyxNQUFNO0lBQ05DLE9BQU87SUFDUEMsVUFBVTtJQUNWQyxTQUFTO0lBQ1RDLFNBQVM7SUFDVEMsa0JBQWtCO0lBQ2xCQyxrQkFBa0I7SUFDbEJDLFlBQVk7SUFDWkMsV0FBVztJQUNYQyxXQUFXO0lBQ1hDLFNBQVM7SUFDVEMsUUFBUTtJQUNSQyxVQUFVO0lBQ1ZDLFVBQVU7SUFDVkMsYUFBYTtJQUNiQyxlQUFlO0lBQ2ZDLGVBQWU7QUFDakI7QUFHQSxTQUFTdkMsVUFBVUosSUFBSSxFQUFFRSxHQUFHLEVBQUVDLElBQUksRUFBRUosTUFBTSxFQUFFNkMsT0FBTyxFQUFFQyxVQUFVLEVBQUVDLGFBQWEsRUFBRUMsYUFBYSxFQUFFQyxZQUFZLEVBQUVDLFFBQVE7SUFDbkgsSUFBSWxELFVBQVUsT0FBT0EsVUFBVSxZQUFZLENBQUNtRCxNQUFNQyxPQUFPLENBQUNwRCxTQUFTO1FBQ2pFRyxJQUFJSCxRQUFRNkMsU0FBU0MsWUFBWUMsZUFBZUMsZUFBZUMsY0FBY0M7UUFDN0UsSUFBSyxJQUFJRyxPQUFPckQsT0FBUTtZQUN0QixJQUFJc0QsTUFBTXRELE1BQU0sQ0FBQ3FELElBQUk7WUFDckIsSUFBSUYsTUFBTUMsT0FBTyxDQUFDRSxNQUFNO2dCQUN0QixJQUFJRCxPQUFPeEQsU0FBU21CLGFBQWEsRUFBRTtvQkFDakMsSUFBSyxJQUFJdUMsSUFBRSxHQUFHQSxJQUFFRCxJQUFJRSxNQUFNLEVBQUVELElBQzFCbEQsVUFBVUosTUFBTUUsS0FBS0MsTUFBTWtELEdBQUcsQ0FBQ0MsRUFBRSxFQUFFVixVQUFVLE1BQU1RLE1BQU0sTUFBTUUsR0FBR1QsWUFBWUQsU0FBU1EsS0FBS3JELFFBQVF1RDtnQkFDeEc7WUFDRixPQUFPLElBQUlGLE9BQU94RCxTQUFTdUIsYUFBYSxFQUFFO2dCQUN4QyxJQUFJa0MsT0FBTyxPQUFPQSxPQUFPLFVBQVU7b0JBQ2pDLElBQUssSUFBSUcsUUFBUUgsSUFDZmpELFVBQVVKLE1BQU1FLEtBQUtDLE1BQU1rRCxHQUFHLENBQUNHLEtBQUssRUFBRVosVUFBVSxNQUFNUSxNQUFNLE1BQU1LLGNBQWNELE9BQU9YLFlBQVlELFNBQVNRLEtBQUtyRCxRQUFReUQ7Z0JBQzdIO1lBQ0YsT0FBTyxJQUFJSixPQUFPeEQsU0FBU1MsUUFBUSxJQUFLTCxLQUFLMEQsT0FBTyxJQUFJLENBQUVOLENBQUFBLE9BQU94RCxTQUFTNkIsWUFBWSxHQUFJO2dCQUN4RnJCLFVBQVVKLE1BQU1FLEtBQUtDLE1BQU1rRCxLQUFLVCxVQUFVLE1BQU1RLEtBQUtQLFlBQVlELFNBQVNRLEtBQUtyRDtZQUNqRjtRQUNGO1FBQ0FJLEtBQUtKLFFBQVE2QyxTQUFTQyxZQUFZQyxlQUFlQyxlQUFlQyxjQUFjQztJQUNoRjtBQUNGO0FBR0EsU0FBU1EsY0FBY0UsR0FBRztJQUN4QixPQUFPQSxJQUFJQyxPQUFPLENBQUMsTUFBTSxNQUFNQSxPQUFPLENBQUMsT0FBTztBQUNoRCIsInNvdXJjZXMiOlsid2VicGFjazovL2ktYW0tbmVhcmJ5Ly4vbm9kZV9tb2R1bGVzL0BuZWFyLWpzL2FjY291bnRzL25vZGVfbW9kdWxlcy9qc29uLXNjaGVtYS10cmF2ZXJzZS9pbmRleC5qcz9jZmQyIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIHRyYXZlcnNlID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoc2NoZW1hLCBvcHRzLCBjYikge1xuICAvLyBMZWdhY3kgc3VwcG9ydCBmb3IgdjAuMy4xIGFuZCBlYXJsaWVyLlxuICBpZiAodHlwZW9mIG9wdHMgPT0gJ2Z1bmN0aW9uJykge1xuICAgIGNiID0gb3B0cztcbiAgICBvcHRzID0ge307XG4gIH1cblxuICBjYiA9IG9wdHMuY2IgfHwgY2I7XG4gIHZhciBwcmUgPSAodHlwZW9mIGNiID09ICdmdW5jdGlvbicpID8gY2IgOiBjYi5wcmUgfHwgZnVuY3Rpb24oKSB7fTtcbiAgdmFyIHBvc3QgPSBjYi5wb3N0IHx8IGZ1bmN0aW9uKCkge307XG5cbiAgX3RyYXZlcnNlKG9wdHMsIHByZSwgcG9zdCwgc2NoZW1hLCAnJywgc2NoZW1hKTtcbn07XG5cblxudHJhdmVyc2Uua2V5d29yZHMgPSB7XG4gIGFkZGl0aW9uYWxJdGVtczogdHJ1ZSxcbiAgaXRlbXM6IHRydWUsXG4gIGNvbnRhaW5zOiB0cnVlLFxuICBhZGRpdGlvbmFsUHJvcGVydGllczogdHJ1ZSxcbiAgcHJvcGVydHlOYW1lczogdHJ1ZSxcbiAgbm90OiB0cnVlLFxuICBpZjogdHJ1ZSxcbiAgdGhlbjogdHJ1ZSxcbiAgZWxzZTogdHJ1ZVxufTtcblxudHJhdmVyc2UuYXJyYXlLZXl3b3JkcyA9IHtcbiAgaXRlbXM6IHRydWUsXG4gIGFsbE9mOiB0cnVlLFxuICBhbnlPZjogdHJ1ZSxcbiAgb25lT2Y6IHRydWVcbn07XG5cbnRyYXZlcnNlLnByb3BzS2V5d29yZHMgPSB7XG4gICRkZWZzOiB0cnVlLFxuICBkZWZpbml0aW9uczogdHJ1ZSxcbiAgcHJvcGVydGllczogdHJ1ZSxcbiAgcGF0dGVyblByb3BlcnRpZXM6IHRydWUsXG4gIGRlcGVuZGVuY2llczogdHJ1ZVxufTtcblxudHJhdmVyc2Uuc2tpcEtleXdvcmRzID0ge1xuICBkZWZhdWx0OiB0cnVlLFxuICBlbnVtOiB0cnVlLFxuICBjb25zdDogdHJ1ZSxcbiAgcmVxdWlyZWQ6IHRydWUsXG4gIG1heGltdW06IHRydWUsXG4gIG1pbmltdW06IHRydWUsXG4gIGV4Y2x1c2l2ZU1heGltdW06IHRydWUsXG4gIGV4Y2x1c2l2ZU1pbmltdW06IHRydWUsXG4gIG11bHRpcGxlT2Y6IHRydWUsXG4gIG1heExlbmd0aDogdHJ1ZSxcbiAgbWluTGVuZ3RoOiB0cnVlLFxuICBwYXR0ZXJuOiB0cnVlLFxuICBmb3JtYXQ6IHRydWUsXG4gIG1heEl0ZW1zOiB0cnVlLFxuICBtaW5JdGVtczogdHJ1ZSxcbiAgdW5pcXVlSXRlbXM6IHRydWUsXG4gIG1heFByb3BlcnRpZXM6IHRydWUsXG4gIG1pblByb3BlcnRpZXM6IHRydWVcbn07XG5cblxuZnVuY3Rpb24gX3RyYXZlcnNlKG9wdHMsIHByZSwgcG9zdCwgc2NoZW1hLCBqc29uUHRyLCByb290U2NoZW1hLCBwYXJlbnRKc29uUHRyLCBwYXJlbnRLZXl3b3JkLCBwYXJlbnRTY2hlbWEsIGtleUluZGV4KSB7XG4gIGlmIChzY2hlbWEgJiYgdHlwZW9mIHNjaGVtYSA9PSAnb2JqZWN0JyAmJiAhQXJyYXkuaXNBcnJheShzY2hlbWEpKSB7XG4gICAgcHJlKHNjaGVtYSwganNvblB0ciwgcm9vdFNjaGVtYSwgcGFyZW50SnNvblB0ciwgcGFyZW50S2V5d29yZCwgcGFyZW50U2NoZW1hLCBrZXlJbmRleCk7XG4gICAgZm9yICh2YXIga2V5IGluIHNjaGVtYSkge1xuICAgICAgdmFyIHNjaCA9IHNjaGVtYVtrZXldO1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoc2NoKSkge1xuICAgICAgICBpZiAoa2V5IGluIHRyYXZlcnNlLmFycmF5S2V5d29yZHMpIHtcbiAgICAgICAgICBmb3IgKHZhciBpPTA7IGk8c2NoLmxlbmd0aDsgaSsrKVxuICAgICAgICAgICAgX3RyYXZlcnNlKG9wdHMsIHByZSwgcG9zdCwgc2NoW2ldLCBqc29uUHRyICsgJy8nICsga2V5ICsgJy8nICsgaSwgcm9vdFNjaGVtYSwganNvblB0ciwga2V5LCBzY2hlbWEsIGkpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGtleSBpbiB0cmF2ZXJzZS5wcm9wc0tleXdvcmRzKSB7XG4gICAgICAgIGlmIChzY2ggJiYgdHlwZW9mIHNjaCA9PSAnb2JqZWN0Jykge1xuICAgICAgICAgIGZvciAodmFyIHByb3AgaW4gc2NoKVxuICAgICAgICAgICAgX3RyYXZlcnNlKG9wdHMsIHByZSwgcG9zdCwgc2NoW3Byb3BdLCBqc29uUHRyICsgJy8nICsga2V5ICsgJy8nICsgZXNjYXBlSnNvblB0cihwcm9wKSwgcm9vdFNjaGVtYSwganNvblB0ciwga2V5LCBzY2hlbWEsIHByb3ApO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGtleSBpbiB0cmF2ZXJzZS5rZXl3b3JkcyB8fCAob3B0cy5hbGxLZXlzICYmICEoa2V5IGluIHRyYXZlcnNlLnNraXBLZXl3b3JkcykpKSB7XG4gICAgICAgIF90cmF2ZXJzZShvcHRzLCBwcmUsIHBvc3QsIHNjaCwganNvblB0ciArICcvJyArIGtleSwgcm9vdFNjaGVtYSwganNvblB0ciwga2V5LCBzY2hlbWEpO1xuICAgICAgfVxuICAgIH1cbiAgICBwb3N0KHNjaGVtYSwganNvblB0ciwgcm9vdFNjaGVtYSwgcGFyZW50SnNvblB0ciwgcGFyZW50S2V5d29yZCwgcGFyZW50U2NoZW1hLCBrZXlJbmRleCk7XG4gIH1cbn1cblxuXG5mdW5jdGlvbiBlc2NhcGVKc29uUHRyKHN0cikge1xuICByZXR1cm4gc3RyLnJlcGxhY2UoL34vZywgJ34wJykucmVwbGFjZSgvXFwvL2csICd+MScpO1xufVxuIl0sIm5hbWVzIjpbInRyYXZlcnNlIiwibW9kdWxlIiwiZXhwb3J0cyIsInNjaGVtYSIsIm9wdHMiLCJjYiIsInByZSIsInBvc3QiLCJfdHJhdmVyc2UiLCJrZXl3b3JkcyIsImFkZGl0aW9uYWxJdGVtcyIsIml0ZW1zIiwiY29udGFpbnMiLCJhZGRpdGlvbmFsUHJvcGVydGllcyIsInByb3BlcnR5TmFtZXMiLCJub3QiLCJpZiIsInRoZW4iLCJlbHNlIiwiYXJyYXlLZXl3b3JkcyIsImFsbE9mIiwiYW55T2YiLCJvbmVPZiIsInByb3BzS2V5d29yZHMiLCIkZGVmcyIsImRlZmluaXRpb25zIiwicHJvcGVydGllcyIsInBhdHRlcm5Qcm9wZXJ0aWVzIiwiZGVwZW5kZW5jaWVzIiwic2tpcEtleXdvcmRzIiwiZGVmYXVsdCIsImVudW0iLCJjb25zdCIsInJlcXVpcmVkIiwibWF4aW11bSIsIm1pbmltdW0iLCJleGNsdXNpdmVNYXhpbXVtIiwiZXhjbHVzaXZlTWluaW11bSIsIm11bHRpcGxlT2YiLCJtYXhMZW5ndGgiLCJtaW5MZW5ndGgiLCJwYXR0ZXJuIiwiZm9ybWF0IiwibWF4SXRlbXMiLCJtaW5JdGVtcyIsInVuaXF1ZUl0ZW1zIiwibWF4UHJvcGVydGllcyIsIm1pblByb3BlcnRpZXMiLCJqc29uUHRyIiwicm9vdFNjaGVtYSIsInBhcmVudEpzb25QdHIiLCJwYXJlbnRLZXl3b3JkIiwicGFyZW50U2NoZW1hIiwia2V5SW5kZXgiLCJBcnJheSIsImlzQXJyYXkiLCJrZXkiLCJzY2giLCJpIiwibGVuZ3RoIiwicHJvcCIsImVzY2FwZUpzb25QdHIiLCJhbGxLZXlzIiwic3RyIiwicmVwbGFjZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@near-js/accounts/node_modules/json-schema-traverse/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@near-js/crypto/lib/constants.js":
/*!*******************************************************!*\
  !*** ./node_modules/@near-js/crypto/lib/constants.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.KeyType = void 0;\n/** All supported key types */ var KeyType;\n(function(KeyType) {\n    KeyType[KeyType[\"ED25519\"] = 0] = \"ED25519\";\n})(KeyType = exports.KeyType || (exports.KeyType = {}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG5lYXItanMvY3J5cHRvL2xpYi9jb25zdGFudHMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELGVBQWUsR0FBRyxLQUFLO0FBQ3ZCLDRCQUE0QixHQUM1QixJQUFJRTtBQUNILFVBQVVBLE9BQU87SUFDZEEsT0FBTyxDQUFDQSxPQUFPLENBQUMsVUFBVSxHQUFHLEVBQUUsR0FBRztBQUN0QyxHQUFHQSxVQUFVRixRQUFRRSxPQUFPLElBQUtGLENBQUFBLGVBQWUsR0FBRyxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaS1hbS1uZWFyYnkvLi9ub2RlX21vZHVsZXMvQG5lYXItanMvY3J5cHRvL2xpYi9jb25zdGFudHMuanM/NzI4MSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuS2V5VHlwZSA9IHZvaWQgMDtcbi8qKiBBbGwgc3VwcG9ydGVkIGtleSB0eXBlcyAqL1xudmFyIEtleVR5cGU7XG4oZnVuY3Rpb24gKEtleVR5cGUpIHtcbiAgICBLZXlUeXBlW0tleVR5cGVbXCJFRDI1NTE5XCJdID0gMF0gPSBcIkVEMjU1MTlcIjtcbn0pKEtleVR5cGUgPSBleHBvcnRzLktleVR5cGUgfHwgKGV4cG9ydHMuS2V5VHlwZSA9IHt9KSk7XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJLZXlUeXBlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@near-js/crypto/lib/constants.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@near-js/crypto/lib/index.js":
/*!***************************************************!*\
  !*** ./node_modules/@near-js/crypto/lib/index.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.PublicKey = exports.KeyPairEd25519 = exports.KeyPair = exports.KeyType = void 0;\nvar constants_1 = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/@near-js/crypto/lib/constants.js\");\nObject.defineProperty(exports, \"KeyType\", ({\n    enumerable: true,\n    get: function() {\n        return constants_1.KeyType;\n    }\n}));\nvar key_pair_1 = __webpack_require__(/*! ./key_pair */ \"(ssr)/./node_modules/@near-js/crypto/lib/key_pair.js\");\nObject.defineProperty(exports, \"KeyPair\", ({\n    enumerable: true,\n    get: function() {\n        return key_pair_1.KeyPair;\n    }\n}));\nvar key_pair_ed25519_1 = __webpack_require__(/*! ./key_pair_ed25519 */ \"(ssr)/./node_modules/@near-js/crypto/lib/key_pair_ed25519.js\");\nObject.defineProperty(exports, \"KeyPairEd25519\", ({\n    enumerable: true,\n    get: function() {\n        return key_pair_ed25519_1.KeyPairEd25519;\n    }\n}));\nvar public_key_1 = __webpack_require__(/*! ./public_key */ \"(ssr)/./node_modules/@near-js/crypto/lib/public_key.js\");\nObject.defineProperty(exports, \"PublicKey\", ({\n    enumerable: true,\n    get: function() {\n        return public_key_1.PublicKey;\n    }\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG5lYXItanMvY3J5cHRvL2xpYi9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsaUJBQWlCLEdBQUdBLHNCQUFzQixHQUFHQSxlQUFlLEdBQUdBLGVBQWUsR0FBRyxLQUFLO0FBQ3RGLElBQUlNLGNBQWNDLG1CQUFPQSxDQUFDLDBFQUFhO0FBQ3ZDVCwyQ0FBMEM7SUFBRVUsWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT0gsWUFBWUQsT0FBTztJQUFFO0FBQUUsQ0FBQyxFQUFDO0FBQ2pILElBQUlLLGFBQWFILG1CQUFPQSxDQUFDLHdFQUFZO0FBQ3JDVCwyQ0FBMEM7SUFBRVUsWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT0MsV0FBV04sT0FBTztJQUFFO0FBQUUsQ0FBQyxFQUFDO0FBQ2hILElBQUlPLHFCQUFxQkosbUJBQU9BLENBQUMsd0ZBQW9CO0FBQ3JEVCxrREFBaUQ7SUFBRVUsWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT0UsbUJBQW1CUixjQUFjO0lBQUU7QUFBRSxDQUFDLEVBQUM7QUFDdEksSUFBSVMsZUFBZUwsbUJBQU9BLENBQUMsNEVBQWM7QUFDekNULDZDQUE0QztJQUFFVSxZQUFZO0lBQU1DLEtBQUs7UUFBYyxPQUFPRyxhQUFhVixTQUFTO0lBQUU7QUFBRSxDQUFDLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pLWFtLW5lYXJieS8uL25vZGVfbW9kdWxlcy9AbmVhci1qcy9jcnlwdG8vbGliL2luZGV4LmpzP2QyMjAiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlB1YmxpY0tleSA9IGV4cG9ydHMuS2V5UGFpckVkMjU1MTkgPSBleHBvcnRzLktleVBhaXIgPSBleHBvcnRzLktleVR5cGUgPSB2b2lkIDA7XG52YXIgY29uc3RhbnRzXzEgPSByZXF1aXJlKFwiLi9jb25zdGFudHNcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJLZXlUeXBlXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBjb25zdGFudHNfMS5LZXlUeXBlOyB9IH0pO1xudmFyIGtleV9wYWlyXzEgPSByZXF1aXJlKFwiLi9rZXlfcGFpclwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIktleVBhaXJcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGtleV9wYWlyXzEuS2V5UGFpcjsgfSB9KTtcbnZhciBrZXlfcGFpcl9lZDI1NTE5XzEgPSByZXF1aXJlKFwiLi9rZXlfcGFpcl9lZDI1NTE5XCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiS2V5UGFpckVkMjU1MTlcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGtleV9wYWlyX2VkMjU1MTlfMS5LZXlQYWlyRWQyNTUxOTsgfSB9KTtcbnZhciBwdWJsaWNfa2V5XzEgPSByZXF1aXJlKFwiLi9wdWJsaWNfa2V5XCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiUHVibGljS2V5XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBwdWJsaWNfa2V5XzEuUHVibGljS2V5OyB9IH0pO1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiUHVibGljS2V5IiwiS2V5UGFpckVkMjU1MTkiLCJLZXlQYWlyIiwiS2V5VHlwZSIsImNvbnN0YW50c18xIiwicmVxdWlyZSIsImVudW1lcmFibGUiLCJnZXQiLCJrZXlfcGFpcl8xIiwia2V5X3BhaXJfZWQyNTUxOV8xIiwicHVibGljX2tleV8xIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@near-js/crypto/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@near-js/crypto/lib/key_pair.js":
/*!******************************************************!*\
  !*** ./node_modules/@near-js/crypto/lib/key_pair.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.KeyPair = void 0;\nconst key_pair_base_1 = __webpack_require__(/*! ./key_pair_base */ \"(ssr)/./node_modules/@near-js/crypto/lib/key_pair_base.js\");\nconst key_pair_ed25519_1 = __webpack_require__(/*! ./key_pair_ed25519 */ \"(ssr)/./node_modules/@near-js/crypto/lib/key_pair_ed25519.js\");\nclass KeyPair extends key_pair_base_1.KeyPairBase {\n    /**\n     * @param curve Name of elliptical curve, case-insensitive\n     * @returns Random KeyPair based on the curve\n     */ static fromRandom(curve) {\n        switch(curve.toUpperCase()){\n            case \"ED25519\":\n                return key_pair_ed25519_1.KeyPairEd25519.fromRandom();\n            default:\n                throw new Error(`Unknown curve ${curve}`);\n        }\n    }\n    static fromString(encodedKey) {\n        const parts = encodedKey.split(\":\");\n        if (parts.length === 1) {\n            return new key_pair_ed25519_1.KeyPairEd25519(parts[0]);\n        } else if (parts.length === 2) {\n            switch(parts[0].toUpperCase()){\n                case \"ED25519\":\n                    return new key_pair_ed25519_1.KeyPairEd25519(parts[1]);\n                default:\n                    throw new Error(`Unknown curve: ${parts[0]}`);\n            }\n        } else {\n            throw new Error(\"Invalid encoded key format, must be <curve>:<encoded key>\");\n        }\n    }\n}\nexports.KeyPair = KeyPair;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG5lYXItanMvY3J5cHRvL2xpYi9rZXlfcGFpci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsZUFBZSxHQUFHLEtBQUs7QUFDdkIsTUFBTUcsa0JBQWtCQyxtQkFBT0EsQ0FBQyxrRkFBaUI7QUFDakQsTUFBTUMscUJBQXFCRCxtQkFBT0EsQ0FBQyx3RkFBb0I7QUFDdkQsTUFBTUYsZ0JBQWdCQyxnQkFBZ0JHLFdBQVc7SUFDN0M7OztLQUdDLEdBQ0QsT0FBT0MsV0FBV0MsS0FBSyxFQUFFO1FBQ3JCLE9BQVFBLE1BQU1DLFdBQVc7WUFDckIsS0FBSztnQkFBVyxPQUFPSixtQkFBbUJLLGNBQWMsQ0FBQ0gsVUFBVTtZQUNuRTtnQkFBUyxNQUFNLElBQUlJLE1BQU0sQ0FBQyxjQUFjLEVBQUVILE1BQU0sQ0FBQztRQUNyRDtJQUNKO0lBQ0EsT0FBT0ksV0FBV0MsVUFBVSxFQUFFO1FBQzFCLE1BQU1DLFFBQVFELFdBQVdFLEtBQUssQ0FBQztRQUMvQixJQUFJRCxNQUFNRSxNQUFNLEtBQUssR0FBRztZQUNwQixPQUFPLElBQUlYLG1CQUFtQkssY0FBYyxDQUFDSSxLQUFLLENBQUMsRUFBRTtRQUN6RCxPQUNLLElBQUlBLE1BQU1FLE1BQU0sS0FBSyxHQUFHO1lBQ3pCLE9BQVFGLEtBQUssQ0FBQyxFQUFFLENBQUNMLFdBQVc7Z0JBQ3hCLEtBQUs7b0JBQVcsT0FBTyxJQUFJSixtQkFBbUJLLGNBQWMsQ0FBQ0ksS0FBSyxDQUFDLEVBQUU7Z0JBQ3JFO29CQUFTLE1BQU0sSUFBSUgsTUFBTSxDQUFDLGVBQWUsRUFBRUcsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQ3pEO1FBQ0osT0FDSztZQUNELE1BQU0sSUFBSUgsTUFBTTtRQUNwQjtJQUNKO0FBQ0o7QUFDQVgsZUFBZSxHQUFHRSIsInNvdXJjZXMiOlsid2VicGFjazovL2ktYW0tbmVhcmJ5Ly4vbm9kZV9tb2R1bGVzL0BuZWFyLWpzL2NyeXB0by9saWIva2V5X3BhaXIuanM/YzM0MiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuS2V5UGFpciA9IHZvaWQgMDtcbmNvbnN0IGtleV9wYWlyX2Jhc2VfMSA9IHJlcXVpcmUoXCIuL2tleV9wYWlyX2Jhc2VcIik7XG5jb25zdCBrZXlfcGFpcl9lZDI1NTE5XzEgPSByZXF1aXJlKFwiLi9rZXlfcGFpcl9lZDI1NTE5XCIpO1xuY2xhc3MgS2V5UGFpciBleHRlbmRzIGtleV9wYWlyX2Jhc2VfMS5LZXlQYWlyQmFzZSB7XG4gICAgLyoqXG4gICAgICogQHBhcmFtIGN1cnZlIE5hbWUgb2YgZWxsaXB0aWNhbCBjdXJ2ZSwgY2FzZS1pbnNlbnNpdGl2ZVxuICAgICAqIEByZXR1cm5zIFJhbmRvbSBLZXlQYWlyIGJhc2VkIG9uIHRoZSBjdXJ2ZVxuICAgICAqL1xuICAgIHN0YXRpYyBmcm9tUmFuZG9tKGN1cnZlKSB7XG4gICAgICAgIHN3aXRjaCAoY3VydmUudG9VcHBlckNhc2UoKSkge1xuICAgICAgICAgICAgY2FzZSAnRUQyNTUxOSc6IHJldHVybiBrZXlfcGFpcl9lZDI1NTE5XzEuS2V5UGFpckVkMjU1MTkuZnJvbVJhbmRvbSgpO1xuICAgICAgICAgICAgZGVmYXVsdDogdGhyb3cgbmV3IEVycm9yKGBVbmtub3duIGN1cnZlICR7Y3VydmV9YCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgc3RhdGljIGZyb21TdHJpbmcoZW5jb2RlZEtleSkge1xuICAgICAgICBjb25zdCBwYXJ0cyA9IGVuY29kZWRLZXkuc3BsaXQoJzonKTtcbiAgICAgICAgaWYgKHBhcnRzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBrZXlfcGFpcl9lZDI1NTE5XzEuS2V5UGFpckVkMjU1MTkocGFydHNbMF0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHBhcnRzLmxlbmd0aCA9PT0gMikge1xuICAgICAgICAgICAgc3dpdGNoIChwYXJ0c1swXS50b1VwcGVyQ2FzZSgpKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnRUQyNTUxOSc6IHJldHVybiBuZXcga2V5X3BhaXJfZWQyNTUxOV8xLktleVBhaXJFZDI1NTE5KHBhcnRzWzFdKTtcbiAgICAgICAgICAgICAgICBkZWZhdWx0OiB0aHJvdyBuZXcgRXJyb3IoYFVua25vd24gY3VydmU6ICR7cGFydHNbMF19YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgZW5jb2RlZCBrZXkgZm9ybWF0LCBtdXN0IGJlIDxjdXJ2ZT46PGVuY29kZWQga2V5PicpO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5LZXlQYWlyID0gS2V5UGFpcjtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIktleVBhaXIiLCJrZXlfcGFpcl9iYXNlXzEiLCJyZXF1aXJlIiwia2V5X3BhaXJfZWQyNTUxOV8xIiwiS2V5UGFpckJhc2UiLCJmcm9tUmFuZG9tIiwiY3VydmUiLCJ0b1VwcGVyQ2FzZSIsIktleVBhaXJFZDI1NTE5IiwiRXJyb3IiLCJmcm9tU3RyaW5nIiwiZW5jb2RlZEtleSIsInBhcnRzIiwic3BsaXQiLCJsZW5ndGgiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@near-js/crypto/lib/key_pair.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@near-js/crypto/lib/key_pair_base.js":
/*!***********************************************************!*\
  !*** ./node_modules/@near-js/crypto/lib/key_pair_base.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.KeyPairBase = void 0;\nclass KeyPairBase {\n}\nexports.KeyPairBase = KeyPairBase;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG5lYXItanMvY3J5cHRvL2xpYi9rZXlfcGFpcl9iYXNlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxtQkFBbUIsR0FBRyxLQUFLO0FBQzNCLE1BQU1FO0FBQ047QUFDQUYsbUJBQW1CLEdBQUdFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaS1hbS1uZWFyYnkvLi9ub2RlX21vZHVsZXMvQG5lYXItanMvY3J5cHRvL2xpYi9rZXlfcGFpcl9iYXNlLmpzP2I0YWYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLktleVBhaXJCYXNlID0gdm9pZCAwO1xuY2xhc3MgS2V5UGFpckJhc2Uge1xufVxuZXhwb3J0cy5LZXlQYWlyQmFzZSA9IEtleVBhaXJCYXNlO1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiS2V5UGFpckJhc2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@near-js/crypto/lib/key_pair_base.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@near-js/crypto/lib/key_pair_ed25519.js":
/*!**************************************************************!*\
  !*** ./node_modules/@near-js/crypto/lib/key_pair_ed25519.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = this && this.__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.KeyPairEd25519 = void 0;\nconst borsh_1 = __webpack_require__(/*! borsh */ \"(ssr)/./node_modules/borsh/lib/index.js\");\nconst tweetnacl_1 = __importDefault(__webpack_require__(/*! tweetnacl */ \"(ssr)/./node_modules/tweetnacl/nacl-fast.js\"));\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/@near-js/crypto/lib/constants.js\");\nconst key_pair_base_1 = __webpack_require__(/*! ./key_pair_base */ \"(ssr)/./node_modules/@near-js/crypto/lib/key_pair_base.js\");\nconst public_key_1 = __webpack_require__(/*! ./public_key */ \"(ssr)/./node_modules/@near-js/crypto/lib/public_key.js\");\n/**\n * This class provides key pair functionality for Ed25519 curve:\n * generating key pairs, encoding key pairs, signing and verifying.\n */ class KeyPairEd25519 extends key_pair_base_1.KeyPairBase {\n    /**\n     * Construct an instance of key pair given a secret key.\n     * It's generally assumed that these are encoded in base58.\n     * @param {string} secretKey\n     */ constructor(secretKey){\n        super();\n        const keyPair = tweetnacl_1.default.sign.keyPair.fromSecretKey((0, borsh_1.baseDecode)(secretKey));\n        this.publicKey = new public_key_1.PublicKey({\n            keyType: constants_1.KeyType.ED25519,\n            data: keyPair.publicKey\n        });\n        this.secretKey = secretKey;\n    }\n    /**\n     * Generate a new random keypair.\n     * @example\n     * const keyRandom = KeyPair.fromRandom();\n     * keyRandom.publicKey\n     * // returns [PUBLIC_KEY]\n     *\n     * keyRandom.secretKey\n     * // returns [SECRET_KEY]\n     */ static fromRandom() {\n        const newKeyPair = tweetnacl_1.default.sign.keyPair();\n        return new KeyPairEd25519((0, borsh_1.baseEncode)(newKeyPair.secretKey));\n    }\n    sign(message) {\n        const signature = tweetnacl_1.default.sign.detached(message, (0, borsh_1.baseDecode)(this.secretKey));\n        return {\n            signature,\n            publicKey: this.publicKey\n        };\n    }\n    verify(message, signature) {\n        return this.publicKey.verify(message, signature);\n    }\n    toString() {\n        return `ed25519:${this.secretKey}`;\n    }\n    getPublicKey() {\n        return this.publicKey;\n    }\n}\nexports.KeyPairEd25519 = KeyPairEd25519;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG5lYXItanMvY3J5cHRvL2xpYi9rZXlfcGFpcl9lZDI1NTE5LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsSUFBSUEsa0JBQWtCLElBQUssSUFBSSxJQUFJLENBQUNBLGVBQWUsSUFBSyxTQUFVQyxHQUFHO0lBQ2pFLE9BQU8sT0FBUUEsSUFBSUMsVUFBVSxHQUFJRCxNQUFNO1FBQUUsV0FBV0E7SUFBSTtBQUM1RDtBQUNBRSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsc0JBQXNCLEdBQUcsS0FBSztBQUM5QixNQUFNRyxVQUFVQyxtQkFBT0EsQ0FBQyxzREFBTztBQUMvQixNQUFNQyxjQUFjVixnQkFBZ0JTLG1CQUFPQSxDQUFDLDhEQUFXO0FBQ3ZELE1BQU1FLGNBQWNGLG1CQUFPQSxDQUFDLDBFQUFhO0FBQ3pDLE1BQU1HLGtCQUFrQkgsbUJBQU9BLENBQUMsa0ZBQWlCO0FBQ2pELE1BQU1JLGVBQWVKLG1CQUFPQSxDQUFDLDRFQUFjO0FBQzNDOzs7Q0FHQyxHQUNELE1BQU1GLHVCQUF1QkssZ0JBQWdCRSxXQUFXO0lBQ3BEOzs7O0tBSUMsR0FDREMsWUFBWUMsU0FBUyxDQUFFO1FBQ25CLEtBQUs7UUFDTCxNQUFNQyxVQUFVUCxZQUFZUSxPQUFPLENBQUNDLElBQUksQ0FBQ0YsT0FBTyxDQUFDRyxhQUFhLENBQUMsQ0FBQyxHQUFHWixRQUFRYSxVQUFVLEVBQUVMO1FBQ3ZGLElBQUksQ0FBQ00sU0FBUyxHQUFHLElBQUlULGFBQWFVLFNBQVMsQ0FBQztZQUFFQyxTQUFTYixZQUFZYyxPQUFPLENBQUNDLE9BQU87WUFBRUMsTUFBTVYsUUFBUUssU0FBUztRQUFDO1FBQzVHLElBQUksQ0FBQ04sU0FBUyxHQUFHQTtJQUNyQjtJQUNBOzs7Ozs7Ozs7S0FTQyxHQUNELE9BQU9ZLGFBQWE7UUFDaEIsTUFBTUMsYUFBYW5CLFlBQVlRLE9BQU8sQ0FBQ0MsSUFBSSxDQUFDRixPQUFPO1FBQ25ELE9BQU8sSUFBSVYsZUFBZSxDQUFDLEdBQUdDLFFBQVFzQixVQUFVLEVBQUVELFdBQVdiLFNBQVM7SUFDMUU7SUFDQUcsS0FBS1ksT0FBTyxFQUFFO1FBQ1YsTUFBTUMsWUFBWXRCLFlBQVlRLE9BQU8sQ0FBQ0MsSUFBSSxDQUFDYyxRQUFRLENBQUNGLFNBQVMsQ0FBQyxHQUFHdkIsUUFBUWEsVUFBVSxFQUFFLElBQUksQ0FBQ0wsU0FBUztRQUNuRyxPQUFPO1lBQUVnQjtZQUFXVixXQUFXLElBQUksQ0FBQ0EsU0FBUztRQUFDO0lBQ2xEO0lBQ0FZLE9BQU9ILE9BQU8sRUFBRUMsU0FBUyxFQUFFO1FBQ3ZCLE9BQU8sSUFBSSxDQUFDVixTQUFTLENBQUNZLE1BQU0sQ0FBQ0gsU0FBU0M7SUFDMUM7SUFDQUcsV0FBVztRQUNQLE9BQU8sQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDbkIsU0FBUyxDQUFDLENBQUM7SUFDdEM7SUFDQW9CLGVBQWU7UUFDWCxPQUFPLElBQUksQ0FBQ2QsU0FBUztJQUN6QjtBQUNKO0FBQ0FqQixzQkFBc0IsR0FBR0UiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pLWFtLW5lYXJieS8uL25vZGVfbW9kdWxlcy9AbmVhci1qcy9jcnlwdG8vbGliL2tleV9wYWlyX2VkMjU1MTkuanM/NDIwNSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuS2V5UGFpckVkMjU1MTkgPSB2b2lkIDA7XG5jb25zdCBib3JzaF8xID0gcmVxdWlyZShcImJvcnNoXCIpO1xuY29uc3QgdHdlZXRuYWNsXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcInR3ZWV0bmFjbFwiKSk7XG5jb25zdCBjb25zdGFudHNfMSA9IHJlcXVpcmUoXCIuL2NvbnN0YW50c1wiKTtcbmNvbnN0IGtleV9wYWlyX2Jhc2VfMSA9IHJlcXVpcmUoXCIuL2tleV9wYWlyX2Jhc2VcIik7XG5jb25zdCBwdWJsaWNfa2V5XzEgPSByZXF1aXJlKFwiLi9wdWJsaWNfa2V5XCIpO1xuLyoqXG4gKiBUaGlzIGNsYXNzIHByb3ZpZGVzIGtleSBwYWlyIGZ1bmN0aW9uYWxpdHkgZm9yIEVkMjU1MTkgY3VydmU6XG4gKiBnZW5lcmF0aW5nIGtleSBwYWlycywgZW5jb2Rpbmcga2V5IHBhaXJzLCBzaWduaW5nIGFuZCB2ZXJpZnlpbmcuXG4gKi9cbmNsYXNzIEtleVBhaXJFZDI1NTE5IGV4dGVuZHMga2V5X3BhaXJfYmFzZV8xLktleVBhaXJCYXNlIHtcbiAgICAvKipcbiAgICAgKiBDb25zdHJ1Y3QgYW4gaW5zdGFuY2Ugb2Yga2V5IHBhaXIgZ2l2ZW4gYSBzZWNyZXQga2V5LlxuICAgICAqIEl0J3MgZ2VuZXJhbGx5IGFzc3VtZWQgdGhhdCB0aGVzZSBhcmUgZW5jb2RlZCBpbiBiYXNlNTguXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHNlY3JldEtleVxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHNlY3JldEtleSkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICBjb25zdCBrZXlQYWlyID0gdHdlZXRuYWNsXzEuZGVmYXVsdC5zaWduLmtleVBhaXIuZnJvbVNlY3JldEtleSgoMCwgYm9yc2hfMS5iYXNlRGVjb2RlKShzZWNyZXRLZXkpKTtcbiAgICAgICAgdGhpcy5wdWJsaWNLZXkgPSBuZXcgcHVibGljX2tleV8xLlB1YmxpY0tleSh7IGtleVR5cGU6IGNvbnN0YW50c18xLktleVR5cGUuRUQyNTUxOSwgZGF0YToga2V5UGFpci5wdWJsaWNLZXkgfSk7XG4gICAgICAgIHRoaXMuc2VjcmV0S2V5ID0gc2VjcmV0S2V5O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZW5lcmF0ZSBhIG5ldyByYW5kb20ga2V5cGFpci5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGNvbnN0IGtleVJhbmRvbSA9IEtleVBhaXIuZnJvbVJhbmRvbSgpO1xuICAgICAqIGtleVJhbmRvbS5wdWJsaWNLZXlcbiAgICAgKiAvLyByZXR1cm5zIFtQVUJMSUNfS0VZXVxuICAgICAqXG4gICAgICoga2V5UmFuZG9tLnNlY3JldEtleVxuICAgICAqIC8vIHJldHVybnMgW1NFQ1JFVF9LRVldXG4gICAgICovXG4gICAgc3RhdGljIGZyb21SYW5kb20oKSB7XG4gICAgICAgIGNvbnN0IG5ld0tleVBhaXIgPSB0d2VldG5hY2xfMS5kZWZhdWx0LnNpZ24ua2V5UGFpcigpO1xuICAgICAgICByZXR1cm4gbmV3IEtleVBhaXJFZDI1NTE5KCgwLCBib3JzaF8xLmJhc2VFbmNvZGUpKG5ld0tleVBhaXIuc2VjcmV0S2V5KSk7XG4gICAgfVxuICAgIHNpZ24obWVzc2FnZSkge1xuICAgICAgICBjb25zdCBzaWduYXR1cmUgPSB0d2VldG5hY2xfMS5kZWZhdWx0LnNpZ24uZGV0YWNoZWQobWVzc2FnZSwgKDAsIGJvcnNoXzEuYmFzZURlY29kZSkodGhpcy5zZWNyZXRLZXkpKTtcbiAgICAgICAgcmV0dXJuIHsgc2lnbmF0dXJlLCBwdWJsaWNLZXk6IHRoaXMucHVibGljS2V5IH07XG4gICAgfVxuICAgIHZlcmlmeShtZXNzYWdlLCBzaWduYXR1cmUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHVibGljS2V5LnZlcmlmeShtZXNzYWdlLCBzaWduYXR1cmUpO1xuICAgIH1cbiAgICB0b1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuIGBlZDI1NTE5OiR7dGhpcy5zZWNyZXRLZXl9YDtcbiAgICB9XG4gICAgZ2V0UHVibGljS2V5KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wdWJsaWNLZXk7XG4gICAgfVxufVxuZXhwb3J0cy5LZXlQYWlyRWQyNTUxOSA9IEtleVBhaXJFZDI1NTE5O1xuIl0sIm5hbWVzIjpbIl9faW1wb3J0RGVmYXVsdCIsIm1vZCIsIl9fZXNNb2R1bGUiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIktleVBhaXJFZDI1NTE5IiwiYm9yc2hfMSIsInJlcXVpcmUiLCJ0d2VldG5hY2xfMSIsImNvbnN0YW50c18xIiwia2V5X3BhaXJfYmFzZV8xIiwicHVibGljX2tleV8xIiwiS2V5UGFpckJhc2UiLCJjb25zdHJ1Y3RvciIsInNlY3JldEtleSIsImtleVBhaXIiLCJkZWZhdWx0Iiwic2lnbiIsImZyb21TZWNyZXRLZXkiLCJiYXNlRGVjb2RlIiwicHVibGljS2V5IiwiUHVibGljS2V5Iiwia2V5VHlwZSIsIktleVR5cGUiLCJFRDI1NTE5IiwiZGF0YSIsImZyb21SYW5kb20iLCJuZXdLZXlQYWlyIiwiYmFzZUVuY29kZSIsIm1lc3NhZ2UiLCJzaWduYXR1cmUiLCJkZXRhY2hlZCIsInZlcmlmeSIsInRvU3RyaW5nIiwiZ2V0UHVibGljS2V5Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@near-js/crypto/lib/key_pair_ed25519.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@near-js/crypto/lib/public_key.js":
/*!********************************************************!*\
  !*** ./node_modules/@near-js/crypto/lib/public_key.js ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = this && this.__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.PublicKey = void 0;\nconst types_1 = __webpack_require__(/*! @near-js/types */ \"(ssr)/./node_modules/@near-js/types/lib/index.js\");\nconst borsh_1 = __webpack_require__(/*! borsh */ \"(ssr)/./node_modules/borsh/lib/index.js\");\nconst tweetnacl_1 = __importDefault(__webpack_require__(/*! tweetnacl */ \"(ssr)/./node_modules/tweetnacl/nacl-fast.js\"));\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/@near-js/crypto/lib/constants.js\");\nfunction key_type_to_str(keyType) {\n    switch(keyType){\n        case constants_1.KeyType.ED25519:\n            return \"ed25519\";\n        default:\n            throw new Error(`Unknown key type ${keyType}`);\n    }\n}\nfunction str_to_key_type(keyType) {\n    switch(keyType.toLowerCase()){\n        case \"ed25519\":\n            return constants_1.KeyType.ED25519;\n        default:\n            throw new Error(`Unknown key type ${keyType}`);\n    }\n}\n/**\n * PublicKey representation that has type and bytes of the key.\n */ class PublicKey extends types_1.Assignable {\n    static from(value) {\n        if (typeof value === \"string\") {\n            return PublicKey.fromString(value);\n        }\n        return value;\n    }\n    static fromString(encodedKey) {\n        const parts = encodedKey.split(\":\");\n        if (parts.length === 1) {\n            return new PublicKey({\n                keyType: constants_1.KeyType.ED25519,\n                data: (0, borsh_1.baseDecode)(parts[0])\n            });\n        } else if (parts.length === 2) {\n            return new PublicKey({\n                keyType: str_to_key_type(parts[0]),\n                data: (0, borsh_1.baseDecode)(parts[1])\n            });\n        } else {\n            throw new Error(\"Invalid encoded key format, must be <curve>:<encoded key>\");\n        }\n    }\n    toString() {\n        return `${key_type_to_str(this.keyType)}:${(0, borsh_1.baseEncode)(this.data)}`;\n    }\n    verify(message, signature) {\n        switch(this.keyType){\n            case constants_1.KeyType.ED25519:\n                return tweetnacl_1.default.sign.detached.verify(message, signature, this.data);\n            default:\n                throw new Error(`Unknown key type ${this.keyType}`);\n        }\n    }\n}\nexports.PublicKey = PublicKey;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG5lYXItanMvY3J5cHRvL2xpYi9wdWJsaWNfa2V5LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsSUFBSUEsa0JBQWtCLElBQUssSUFBSSxJQUFJLENBQUNBLGVBQWUsSUFBSyxTQUFVQyxHQUFHO0lBQ2pFLE9BQU8sT0FBUUEsSUFBSUMsVUFBVSxHQUFJRCxNQUFNO1FBQUUsV0FBV0E7SUFBSTtBQUM1RDtBQUNBRSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsaUJBQWlCLEdBQUcsS0FBSztBQUN6QixNQUFNRyxVQUFVQyxtQkFBT0EsQ0FBQyx3RUFBZ0I7QUFDeEMsTUFBTUMsVUFBVUQsbUJBQU9BLENBQUMsc0RBQU87QUFDL0IsTUFBTUUsY0FBY1gsZ0JBQWdCUyxtQkFBT0EsQ0FBQyw4REFBVztBQUN2RCxNQUFNRyxjQUFjSCxtQkFBT0EsQ0FBQywwRUFBYTtBQUN6QyxTQUFTSSxnQkFBZ0JDLE9BQU87SUFDNUIsT0FBUUE7UUFDSixLQUFLRixZQUFZRyxPQUFPLENBQUNDLE9BQU87WUFBRSxPQUFPO1FBQ3pDO1lBQVMsTUFBTSxJQUFJQyxNQUFNLENBQUMsaUJBQWlCLEVBQUVILFFBQVEsQ0FBQztJQUMxRDtBQUNKO0FBQ0EsU0FBU0ksZ0JBQWdCSixPQUFPO0lBQzVCLE9BQVFBLFFBQVFLLFdBQVc7UUFDdkIsS0FBSztZQUFXLE9BQU9QLFlBQVlHLE9BQU8sQ0FBQ0MsT0FBTztRQUNsRDtZQUFTLE1BQU0sSUFBSUMsTUFBTSxDQUFDLGlCQUFpQixFQUFFSCxRQUFRLENBQUM7SUFDMUQ7QUFDSjtBQUNBOztDQUVDLEdBQ0QsTUFBTVAsa0JBQWtCQyxRQUFRWSxVQUFVO0lBQ3RDLE9BQU9DLEtBQUtmLEtBQUssRUFBRTtRQUNmLElBQUksT0FBT0EsVUFBVSxVQUFVO1lBQzNCLE9BQU9DLFVBQVVlLFVBQVUsQ0FBQ2hCO1FBQ2hDO1FBQ0EsT0FBT0E7SUFDWDtJQUNBLE9BQU9nQixXQUFXQyxVQUFVLEVBQUU7UUFDMUIsTUFBTUMsUUFBUUQsV0FBV0UsS0FBSyxDQUFDO1FBQy9CLElBQUlELE1BQU1FLE1BQU0sS0FBSyxHQUFHO1lBQ3BCLE9BQU8sSUFBSW5CLFVBQVU7Z0JBQUVPLFNBQVNGLFlBQVlHLE9BQU8sQ0FBQ0MsT0FBTztnQkFBRVcsTUFBTSxDQUFDLEdBQUdqQixRQUFRa0IsVUFBVSxFQUFFSixLQUFLLENBQUMsRUFBRTtZQUFFO1FBQ3pHLE9BQ0ssSUFBSUEsTUFBTUUsTUFBTSxLQUFLLEdBQUc7WUFDekIsT0FBTyxJQUFJbkIsVUFBVTtnQkFBRU8sU0FBU0ksZ0JBQWdCTSxLQUFLLENBQUMsRUFBRTtnQkFBR0csTUFBTSxDQUFDLEdBQUdqQixRQUFRa0IsVUFBVSxFQUFFSixLQUFLLENBQUMsRUFBRTtZQUFFO1FBQ3ZHLE9BQ0s7WUFDRCxNQUFNLElBQUlQLE1BQU07UUFDcEI7SUFDSjtJQUNBWSxXQUFXO1FBQ1AsT0FBTyxDQUFDLEVBQUVoQixnQkFBZ0IsSUFBSSxDQUFDQyxPQUFPLEVBQUUsQ0FBQyxFQUFFLENBQUMsR0FBR0osUUFBUW9CLFVBQVUsRUFBRSxJQUFJLENBQUNILElBQUksRUFBRSxDQUFDO0lBQ25GO0lBQ0FJLE9BQU9DLE9BQU8sRUFBRUMsU0FBUyxFQUFFO1FBQ3ZCLE9BQVEsSUFBSSxDQUFDbkIsT0FBTztZQUNoQixLQUFLRixZQUFZRyxPQUFPLENBQUNDLE9BQU87Z0JBQUUsT0FBT0wsWUFBWXVCLE9BQU8sQ0FBQ0MsSUFBSSxDQUFDQyxRQUFRLENBQUNMLE1BQU0sQ0FBQ0MsU0FBU0MsV0FBVyxJQUFJLENBQUNOLElBQUk7WUFDL0c7Z0JBQVMsTUFBTSxJQUFJVixNQUFNLENBQUMsaUJBQWlCLEVBQUUsSUFBSSxDQUFDSCxPQUFPLENBQUMsQ0FBQztRQUMvRDtJQUNKO0FBQ0o7QUFDQVQsaUJBQWlCLEdBQUdFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaS1hbS1uZWFyYnkvLi9ub2RlX21vZHVsZXMvQG5lYXItanMvY3J5cHRvL2xpYi9wdWJsaWNfa2V5LmpzPzJiZWMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlB1YmxpY0tleSA9IHZvaWQgMDtcbmNvbnN0IHR5cGVzXzEgPSByZXF1aXJlKFwiQG5lYXItanMvdHlwZXNcIik7XG5jb25zdCBib3JzaF8xID0gcmVxdWlyZShcImJvcnNoXCIpO1xuY29uc3QgdHdlZXRuYWNsXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcInR3ZWV0bmFjbFwiKSk7XG5jb25zdCBjb25zdGFudHNfMSA9IHJlcXVpcmUoXCIuL2NvbnN0YW50c1wiKTtcbmZ1bmN0aW9uIGtleV90eXBlX3RvX3N0cihrZXlUeXBlKSB7XG4gICAgc3dpdGNoIChrZXlUeXBlKSB7XG4gICAgICAgIGNhc2UgY29uc3RhbnRzXzEuS2V5VHlwZS5FRDI1NTE5OiByZXR1cm4gJ2VkMjU1MTknO1xuICAgICAgICBkZWZhdWx0OiB0aHJvdyBuZXcgRXJyb3IoYFVua25vd24ga2V5IHR5cGUgJHtrZXlUeXBlfWApO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHN0cl90b19rZXlfdHlwZShrZXlUeXBlKSB7XG4gICAgc3dpdGNoIChrZXlUeXBlLnRvTG93ZXJDYXNlKCkpIHtcbiAgICAgICAgY2FzZSAnZWQyNTUxOSc6IHJldHVybiBjb25zdGFudHNfMS5LZXlUeXBlLkVEMjU1MTk7XG4gICAgICAgIGRlZmF1bHQ6IHRocm93IG5ldyBFcnJvcihgVW5rbm93biBrZXkgdHlwZSAke2tleVR5cGV9YCk7XG4gICAgfVxufVxuLyoqXG4gKiBQdWJsaWNLZXkgcmVwcmVzZW50YXRpb24gdGhhdCBoYXMgdHlwZSBhbmQgYnl0ZXMgb2YgdGhlIGtleS5cbiAqL1xuY2xhc3MgUHVibGljS2V5IGV4dGVuZHMgdHlwZXNfMS5Bc3NpZ25hYmxlIHtcbiAgICBzdGF0aWMgZnJvbSh2YWx1ZSkge1xuICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgcmV0dXJuIFB1YmxpY0tleS5mcm9tU3RyaW5nKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICAgIHN0YXRpYyBmcm9tU3RyaW5nKGVuY29kZWRLZXkpIHtcbiAgICAgICAgY29uc3QgcGFydHMgPSBlbmNvZGVkS2V5LnNwbGl0KCc6Jyk7XG4gICAgICAgIGlmIChwYXJ0cy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgUHVibGljS2V5KHsga2V5VHlwZTogY29uc3RhbnRzXzEuS2V5VHlwZS5FRDI1NTE5LCBkYXRhOiAoMCwgYm9yc2hfMS5iYXNlRGVjb2RlKShwYXJ0c1swXSkgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAocGFydHMubGVuZ3RoID09PSAyKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFB1YmxpY0tleSh7IGtleVR5cGU6IHN0cl90b19rZXlfdHlwZShwYXJ0c1swXSksIGRhdGE6ICgwLCBib3JzaF8xLmJhc2VEZWNvZGUpKHBhcnRzWzFdKSB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBlbmNvZGVkIGtleSBmb3JtYXQsIG11c3QgYmUgPGN1cnZlPjo8ZW5jb2RlZCBrZXk+Jyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdG9TdHJpbmcoKSB7XG4gICAgICAgIHJldHVybiBgJHtrZXlfdHlwZV90b19zdHIodGhpcy5rZXlUeXBlKX06JHsoMCwgYm9yc2hfMS5iYXNlRW5jb2RlKSh0aGlzLmRhdGEpfWA7XG4gICAgfVxuICAgIHZlcmlmeShtZXNzYWdlLCBzaWduYXR1cmUpIHtcbiAgICAgICAgc3dpdGNoICh0aGlzLmtleVR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgY29uc3RhbnRzXzEuS2V5VHlwZS5FRDI1NTE5OiByZXR1cm4gdHdlZXRuYWNsXzEuZGVmYXVsdC5zaWduLmRldGFjaGVkLnZlcmlmeShtZXNzYWdlLCBzaWduYXR1cmUsIHRoaXMuZGF0YSk7XG4gICAgICAgICAgICBkZWZhdWx0OiB0aHJvdyBuZXcgRXJyb3IoYFVua25vd24ga2V5IHR5cGUgJHt0aGlzLmtleVR5cGV9YCk7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLlB1YmxpY0tleSA9IFB1YmxpY0tleTtcbiJdLCJuYW1lcyI6WyJfX2ltcG9ydERlZmF1bHQiLCJtb2QiLCJfX2VzTW9kdWxlIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJQdWJsaWNLZXkiLCJ0eXBlc18xIiwicmVxdWlyZSIsImJvcnNoXzEiLCJ0d2VldG5hY2xfMSIsImNvbnN0YW50c18xIiwia2V5X3R5cGVfdG9fc3RyIiwia2V5VHlwZSIsIktleVR5cGUiLCJFRDI1NTE5IiwiRXJyb3IiLCJzdHJfdG9fa2V5X3R5cGUiLCJ0b0xvd2VyQ2FzZSIsIkFzc2lnbmFibGUiLCJmcm9tIiwiZnJvbVN0cmluZyIsImVuY29kZWRLZXkiLCJwYXJ0cyIsInNwbGl0IiwibGVuZ3RoIiwiZGF0YSIsImJhc2VEZWNvZGUiLCJ0b1N0cmluZyIsImJhc2VFbmNvZGUiLCJ2ZXJpZnkiLCJtZXNzYWdlIiwic2lnbmF0dXJlIiwiZGVmYXVsdCIsInNpZ24iLCJkZXRhY2hlZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@near-js/crypto/lib/public_key.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@near-js/keystores-browser/lib/browser_local_storage_key_store.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@near-js/keystores-browser/lib/browser_local_storage_key_store.js ***!
  \****************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n        });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.BrowserLocalStorageKeyStore = void 0;\nconst crypto_1 = __webpack_require__(/*! @near-js/crypto */ \"(ssr)/./node_modules/@near-js/crypto/lib/index.js\");\nconst keystores_1 = __webpack_require__(/*! @near-js/keystores */ \"(ssr)/./node_modules/@near-js/keystores/lib/index.js\");\nconst LOCAL_STORAGE_KEY_PREFIX = \"near-api-js:keystore:\";\n/**\n * This class is used to store keys in the browsers local storage.\n *\n * @see [https://docs.near.org/docs/develop/front-end/naj-quick-reference#key-store](https://docs.near.org/docs/develop/front-end/naj-quick-reference#key-store)\n * @example\n * ```js\n * import { connect, keyStores } from 'near-api-js';\n *\n * const keyStore = new keyStores.BrowserLocalStorageKeyStore();\n * const config = {\n *   keyStore, // instance of BrowserLocalStorageKeyStore\n *   networkId: 'testnet',\n *   nodeUrl: 'https://rpc.testnet.near.org',\n *   walletUrl: 'https://wallet.testnet.near.org',\n *   helperUrl: 'https://helper.testnet.near.org',\n *   explorerUrl: 'https://explorer.testnet.near.org'\n * };\n *\n * // inside an async function\n * const near = await connect(config)\n * ```\n */ class BrowserLocalStorageKeyStore extends keystores_1.KeyStore {\n    /**\n     * @param localStorage defaults to window.localStorage\n     * @param prefix defaults to `near-api-js:keystore:`\n     */ constructor(localStorage = window.localStorage, prefix = LOCAL_STORAGE_KEY_PREFIX){\n        super();\n        this.localStorage = localStorage;\n        this.prefix = prefix;\n    }\n    /**\n     * Stores a {@link utils/key_pair!KeyPair} in local storage.\n     * @param networkId The targeted network. (ex. default, betanet, etc…)\n     * @param accountId The NEAR account tied to the key pair\n     * @param keyPair The key pair to store in local storage\n     */ setKey(networkId, accountId, keyPair) {\n        return __awaiter(this, void 0, void 0, function*() {\n            this.localStorage.setItem(this.storageKeyForSecretKey(networkId, accountId), keyPair.toString());\n        });\n    }\n    /**\n     * Gets a {@link utils/key_pair!KeyPair} from local storage\n     * @param networkId The targeted network. (ex. default, betanet, etc…)\n     * @param accountId The NEAR account tied to the key pair\n     * @returns {Promise<KeyPair>}\n     */ getKey(networkId, accountId) {\n        return __awaiter(this, void 0, void 0, function*() {\n            const value = this.localStorage.getItem(this.storageKeyForSecretKey(networkId, accountId));\n            if (!value) {\n                return null;\n            }\n            return crypto_1.KeyPair.fromString(value);\n        });\n    }\n    /**\n     * Removes a {@link utils/key_pair!KeyPair} from local storage\n     * @param networkId The targeted network. (ex. default, betanet, etc…)\n     * @param accountId The NEAR account tied to the key pair\n     */ removeKey(networkId, accountId) {\n        return __awaiter(this, void 0, void 0, function*() {\n            this.localStorage.removeItem(this.storageKeyForSecretKey(networkId, accountId));\n        });\n    }\n    /**\n     * Removes all items that start with `prefix` from local storage\n     */ clear() {\n        return __awaiter(this, void 0, void 0, function*() {\n            for (const key of this.storageKeys()){\n                if (key.startsWith(this.prefix)) {\n                    this.localStorage.removeItem(key);\n                }\n            }\n        });\n    }\n    /**\n     * Get the network(s) from local storage\n     * @returns {Promise<string[]>}\n     */ getNetworks() {\n        return __awaiter(this, void 0, void 0, function*() {\n            const result = new Set();\n            for (const key of this.storageKeys()){\n                if (key.startsWith(this.prefix)) {\n                    const parts = key.substring(this.prefix.length).split(\":\");\n                    result.add(parts[1]);\n                }\n            }\n            return Array.from(result.values());\n        });\n    }\n    /**\n     * Gets the account(s) from local storage\n     * @param networkId The targeted network. (ex. default, betanet, etc…)\n     */ getAccounts(networkId) {\n        return __awaiter(this, void 0, void 0, function*() {\n            const result = new Array();\n            for (const key of this.storageKeys()){\n                if (key.startsWith(this.prefix)) {\n                    const parts = key.substring(this.prefix.length).split(\":\");\n                    if (parts[1] === networkId) {\n                        result.push(parts[0]);\n                    }\n                }\n            }\n            return result;\n        });\n    }\n    /**\n     * @hidden\n     * Helper function to retrieve a local storage key\n     * @param networkId The targeted network. (ex. default, betanet, etc…)\n     * @param accountId The NEAR account tied to the storage keythat's sought\n     * @returns {string} An example might be: `near-api-js:keystore:near-friend:default`\n     */ storageKeyForSecretKey(networkId, accountId) {\n        return `${this.prefix}${accountId}:${networkId}`;\n    }\n    /** @hidden */ *storageKeys() {\n        for(let i = 0; i < this.localStorage.length; i++){\n            yield this.localStorage.key(i);\n        }\n    }\n}\nexports.BrowserLocalStorageKeyStore = BrowserLocalStorageKeyStore;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@near-js/keystores-browser/lib/browser_local_storage_key_store.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@near-js/keystores-browser/lib/index.js":
/*!**************************************************************!*\
  !*** ./node_modules/@near-js/keystores-browser/lib/index.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.BrowserLocalStorageKeyStore = void 0;\nvar browser_local_storage_key_store_1 = __webpack_require__(/*! ./browser_local_storage_key_store */ \"(ssr)/./node_modules/@near-js/keystores-browser/lib/browser_local_storage_key_store.js\");\nObject.defineProperty(exports, \"BrowserLocalStorageKeyStore\", ({\n    enumerable: true,\n    get: function() {\n        return browser_local_storage_key_store_1.BrowserLocalStorageKeyStore;\n    }\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG5lYXItanMva2V5c3RvcmVzLWJyb3dzZXIvbGliL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxtQ0FBbUMsR0FBRyxLQUFLO0FBQzNDLElBQUlHLG9DQUFvQ0MsbUJBQU9BLENBQUMsaUlBQW1DO0FBQ25GTiwrREFBOEQ7SUFBRU8sWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT0gsa0NBQWtDRCwyQkFBMkI7SUFBRTtBQUFFLENBQUMsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2ktYW0tbmVhcmJ5Ly4vbm9kZV9tb2R1bGVzL0BuZWFyLWpzL2tleXN0b3Jlcy1icm93c2VyL2xpYi9pbmRleC5qcz9kMGY2Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Ccm93c2VyTG9jYWxTdG9yYWdlS2V5U3RvcmUgPSB2b2lkIDA7XG52YXIgYnJvd3Nlcl9sb2NhbF9zdG9yYWdlX2tleV9zdG9yZV8xID0gcmVxdWlyZShcIi4vYnJvd3Nlcl9sb2NhbF9zdG9yYWdlX2tleV9zdG9yZVwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkJyb3dzZXJMb2NhbFN0b3JhZ2VLZXlTdG9yZVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gYnJvd3Nlcl9sb2NhbF9zdG9yYWdlX2tleV9zdG9yZV8xLkJyb3dzZXJMb2NhbFN0b3JhZ2VLZXlTdG9yZTsgfSB9KTtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIkJyb3dzZXJMb2NhbFN0b3JhZ2VLZXlTdG9yZSIsImJyb3dzZXJfbG9jYWxfc3RvcmFnZV9rZXlfc3RvcmVfMSIsInJlcXVpcmUiLCJlbnVtZXJhYmxlIiwiZ2V0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@near-js/keystores-browser/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@near-js/keystores-node/lib/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/@near-js/keystores-node/lib/index.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.UnencryptedFileSystemKeyStore = exports.readKeyFile = void 0;\nvar unencrypted_file_system_keystore_1 = __webpack_require__(/*! ./unencrypted_file_system_keystore */ \"(ssr)/./node_modules/@near-js/keystores-node/lib/unencrypted_file_system_keystore.js\");\nObject.defineProperty(exports, \"readKeyFile\", ({\n    enumerable: true,\n    get: function() {\n        return unencrypted_file_system_keystore_1.readKeyFile;\n    }\n}));\nObject.defineProperty(exports, \"UnencryptedFileSystemKeyStore\", ({\n    enumerable: true,\n    get: function() {\n        return unencrypted_file_system_keystore_1.UnencryptedFileSystemKeyStore;\n    }\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG5lYXItanMva2V5c3RvcmVzLW5vZGUvbGliL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxxQ0FBcUMsR0FBR0EsbUJBQW1CLEdBQUcsS0FBSztBQUNuRSxJQUFJSSxxQ0FBcUNDLG1CQUFPQSxDQUFDLGdJQUFvQztBQUNyRlAsK0NBQThDO0lBQUVRLFlBQVk7SUFBTUMsS0FBSztRQUFjLE9BQU9ILG1DQUFtQ0QsV0FBVztJQUFFO0FBQUUsQ0FBQyxFQUFDO0FBQ2hKTCxpRUFBZ0U7SUFBRVEsWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT0gsbUNBQW1DRiw2QkFBNkI7SUFBRTtBQUFFLENBQUMsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2ktYW0tbmVhcmJ5Ly4vbm9kZV9tb2R1bGVzL0BuZWFyLWpzL2tleXN0b3Jlcy1ub2RlL2xpYi9pbmRleC5qcz8wMTlkIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5VbmVuY3J5cHRlZEZpbGVTeXN0ZW1LZXlTdG9yZSA9IGV4cG9ydHMucmVhZEtleUZpbGUgPSB2b2lkIDA7XG52YXIgdW5lbmNyeXB0ZWRfZmlsZV9zeXN0ZW1fa2V5c3RvcmVfMSA9IHJlcXVpcmUoXCIuL3VuZW5jcnlwdGVkX2ZpbGVfc3lzdGVtX2tleXN0b3JlXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwicmVhZEtleUZpbGVcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHVuZW5jcnlwdGVkX2ZpbGVfc3lzdGVtX2tleXN0b3JlXzEucmVhZEtleUZpbGU7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJVbmVuY3J5cHRlZEZpbGVTeXN0ZW1LZXlTdG9yZVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdW5lbmNyeXB0ZWRfZmlsZV9zeXN0ZW1fa2V5c3RvcmVfMS5VbmVuY3J5cHRlZEZpbGVTeXN0ZW1LZXlTdG9yZTsgfSB9KTtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIlVuZW5jcnlwdGVkRmlsZVN5c3RlbUtleVN0b3JlIiwicmVhZEtleUZpbGUiLCJ1bmVuY3J5cHRlZF9maWxlX3N5c3RlbV9rZXlzdG9yZV8xIiwicmVxdWlyZSIsImVudW1lcmFibGUiLCJnZXQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@near-js/keystores-node/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@near-js/keystores-node/lib/unencrypted_file_system_keystore.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@near-js/keystores-node/lib/unencrypted_file_system_keystore.js ***!
  \**************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n        });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = this && this.__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.UnencryptedFileSystemKeyStore = exports.readKeyFile = void 0;\nconst crypto_1 = __webpack_require__(/*! @near-js/crypto */ \"(ssr)/./node_modules/@near-js/crypto/lib/index.js\");\nconst keystores_1 = __webpack_require__(/*! @near-js/keystores */ \"(ssr)/./node_modules/@near-js/keystores/lib/index.js\");\nconst fs_1 = __importDefault(__webpack_require__(/*! fs */ \"fs\"));\nconst path_1 = __importDefault(__webpack_require__(/*! path */ \"path\"));\nconst util_1 = __webpack_require__(/*! util */ \"util\");\n/* remove for versions not referenced by near-api-js */ const promisify = (fn)=>{\n    if (!fn) {\n        return ()=>{\n            throw new Error(\"Trying to use unimplemented function. `fs` module not available in web build?\");\n        };\n    }\n    return (0, util_1.promisify)(fn);\n};\nconst exists = promisify(fs_1.default.exists);\nconst readFile = promisify(fs_1.default.readFile);\nconst writeFile = promisify(fs_1.default.writeFile);\nconst unlink = promisify(fs_1.default.unlink);\nconst readdir = promisify(fs_1.default.readdir);\nconst mkdir = promisify(fs_1.default.mkdir);\n/** @hidden */ function loadJsonFile(filename) {\n    return __awaiter(this, void 0, void 0, function*() {\n        const content = yield readFile(filename);\n        return JSON.parse(content.toString());\n    });\n}\nfunction ensureDir(dir) {\n    return __awaiter(this, void 0, void 0, function*() {\n        try {\n            yield mkdir(dir, {\n                recursive: true\n            });\n        } catch (err) {\n            if (err.code !== \"EEXIST\") {\n                throw err;\n            }\n        }\n    });\n}\n/** @hidden */ function readKeyFile(filename) {\n    return __awaiter(this, void 0, void 0, function*() {\n        const accountInfo = yield loadJsonFile(filename);\n        // The private key might be in private_key or secret_key field.\n        let privateKey = accountInfo.private_key;\n        if (!privateKey && accountInfo.secret_key) {\n            privateKey = accountInfo.secret_key;\n        }\n        return [\n            accountInfo.account_id,\n            crypto_1.KeyPair.fromString(privateKey)\n        ];\n    });\n}\nexports.readKeyFile = readKeyFile;\n/**\n * This class is used to store keys on the file system.\n *\n * @see [https://docs.near.org/docs/develop/front-end/naj-quick-reference#key-store](https://docs.near.org/docs/develop/front-end/naj-quick-reference#key-store)\n * @example\n * ```js\n * const { homedir } = require('os');\n * const { connect, keyStores } = require('near-api-js');\n *\n * const keyStore = new keyStores.UnencryptedFileSystemKeyStore(`${homedir()}/.near-credentials`);\n * const config = {\n *   keyStore, // instance of UnencryptedFileSystemKeyStore\n *   networkId: 'testnet',\n *   nodeUrl: 'https://rpc.testnet.near.org',\n *   walletUrl: 'https://wallet.testnet.near.org',\n *   helperUrl: 'https://helper.testnet.near.org',\n *   explorerUrl: 'https://explorer.testnet.near.org'\n * };\n *\n * // inside an async function\n * const near = await connect(config)\n * ```\n */ class UnencryptedFileSystemKeyStore extends keystores_1.KeyStore {\n    /**\n     * @param keyDir base directory for key storage. Keys will be stored in `keyDir/networkId/accountId.json`\n     */ constructor(keyDir){\n        super();\n        this.keyDir = path_1.default.resolve(keyDir);\n    }\n    /**\n     * Store a {@link utils/key_pair!KeyPair} in an unencrypted file\n     * @param networkId The targeted network. (ex. default, betanet, etc…)\n     * @param accountId The NEAR account tied to the key pair\n     * @param keyPair The key pair to store in local storage\n     */ setKey(networkId, accountId, keyPair) {\n        return __awaiter(this, void 0, void 0, function*() {\n            yield ensureDir(`${this.keyDir}/${networkId}`);\n            const content = {\n                account_id: accountId,\n                public_key: keyPair.getPublicKey().toString(),\n                private_key: keyPair.toString()\n            };\n            yield writeFile(this.getKeyFilePath(networkId, accountId), JSON.stringify(content), {\n                mode: 384\n            });\n        });\n    }\n    /**\n     * Gets a {@link utils/key_pair!KeyPair} from an unencrypted file\n     * @param networkId The targeted network. (ex. default, betanet, etc…)\n     * @param accountId The NEAR account tied to the key pair\n     * @returns {Promise<KeyPair>}\n     */ getKey(networkId, accountId) {\n        return __awaiter(this, void 0, void 0, function*() {\n            // Find key / account id.\n            if (!(yield exists(this.getKeyFilePath(networkId, accountId)))) {\n                return null;\n            }\n            const accountKeyPair = yield readKeyFile(this.getKeyFilePath(networkId, accountId));\n            return accountKeyPair[1];\n        });\n    }\n    /**\n     * Deletes an unencrypted file holding a {@link utils/key_pair!KeyPair}\n     * @param networkId The targeted network. (ex. default, betanet, etc…)\n     * @param accountId The NEAR account tied to the key pair\n     */ removeKey(networkId, accountId) {\n        return __awaiter(this, void 0, void 0, function*() {\n            if (yield exists(this.getKeyFilePath(networkId, accountId))) {\n                yield unlink(this.getKeyFilePath(networkId, accountId));\n            }\n        });\n    }\n    /**\n     * Deletes all unencrypted files from the `keyDir` path.\n     */ clear() {\n        return __awaiter(this, void 0, void 0, function*() {\n            for (const network of yield this.getNetworks()){\n                for (const account of yield this.getAccounts(network)){\n                    yield this.removeKey(network, account);\n                }\n            }\n        });\n    }\n    /** @hidden */ getKeyFilePath(networkId, accountId) {\n        return `${this.keyDir}/${networkId}/${accountId}.json`;\n    }\n    /**\n     * Get the network(s) from files in `keyDir`\n     * @returns {Promise<string[]>}\n     */ getNetworks() {\n        return __awaiter(this, void 0, void 0, function*() {\n            const files = yield readdir(this.keyDir);\n            const result = new Array();\n            files.forEach((item)=>{\n                result.push(item);\n            });\n            return result;\n        });\n    }\n    /**\n     * Gets the account(s) files in `keyDir/networkId`\n     * @param networkId The targeted network. (ex. default, betanet, etc…)\n     */ getAccounts(networkId) {\n        return __awaiter(this, void 0, void 0, function*() {\n            if (!(yield exists(`${this.keyDir}/${networkId}`))) {\n                return [];\n            }\n            const files = yield readdir(`${this.keyDir}/${networkId}`);\n            return files.filter((file)=>file.endsWith(\".json\")).map((file)=>file.replace(/.json$/, \"\"));\n        });\n    }\n    /** @hidden */ toString() {\n        return `UnencryptedFileSystemKeyStore(${this.keyDir})`;\n    }\n}\nexports.UnencryptedFileSystemKeyStore = UnencryptedFileSystemKeyStore;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@near-js/keystores-node/lib/unencrypted_file_system_keystore.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@near-js/keystores/lib/in_memory_key_store.js":
/*!********************************************************************!*\
  !*** ./node_modules/@near-js/keystores/lib/in_memory_key_store.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n        });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.InMemoryKeyStore = void 0;\nconst crypto_1 = __webpack_require__(/*! @near-js/crypto */ \"(ssr)/./node_modules/@near-js/crypto/lib/index.js\");\nconst keystore_1 = __webpack_require__(/*! ./keystore */ \"(ssr)/./node_modules/@near-js/keystores/lib/keystore.js\");\n/**\n * Simple in-memory keystore for mainly for testing purposes.\n *\n * @see [https://docs.near.org/docs/develop/front-end/naj-quick-reference#key-store](https://docs.near.org/docs/develop/front-end/naj-quick-reference#key-store)\n * @example\n * ```js\n * import { connect, keyStores, utils } from 'near-api-js';\n *\n * const privateKey = '.......';\n * const keyPair = utils.KeyPair.fromString(privateKey);\n *\n * const keyStore = new keyStores.InMemoryKeyStore();\n * keyStore.setKey('testnet', 'example-account.testnet', keyPair);\n *\n * const config = {\n *   keyStore, // instance of InMemoryKeyStore\n *   networkId: 'testnet',\n *   nodeUrl: 'https://rpc.testnet.near.org',\n *   walletUrl: 'https://wallet.testnet.near.org',\n *   helperUrl: 'https://helper.testnet.near.org',\n *   explorerUrl: 'https://explorer.testnet.near.org'\n * };\n *\n * // inside an async function\n * const near = await connect(config)\n * ```\n */ class InMemoryKeyStore extends keystore_1.KeyStore {\n    constructor(){\n        super();\n        this.keys = {};\n    }\n    /**\n     * Stores a {@link utils/key_pair!KeyPair} in in-memory storage item\n     * @param networkId The targeted network. (ex. default, betanet, etc…)\n     * @param accountId The NEAR account tied to the key pair\n     * @param keyPair The key pair to store in local storage\n     */ setKey(networkId, accountId, keyPair) {\n        return __awaiter(this, void 0, void 0, function*() {\n            this.keys[`${accountId}:${networkId}`] = keyPair.toString();\n        });\n    }\n    /**\n     * Gets a {@link utils/key_pair!KeyPair} from in-memory storage\n     * @param networkId The targeted network. (ex. default, betanet, etc…)\n     * @param accountId The NEAR account tied to the key pair\n     * @returns {Promise<KeyPair>}\n     */ getKey(networkId, accountId) {\n        return __awaiter(this, void 0, void 0, function*() {\n            const value = this.keys[`${accountId}:${networkId}`];\n            if (!value) {\n                return null;\n            }\n            return crypto_1.KeyPair.fromString(value);\n        });\n    }\n    /**\n     * Removes a {@link utils/key_pair!KeyPair} from in-memory storage\n     * @param networkId The targeted network. (ex. default, betanet, etc…)\n     * @param accountId The NEAR account tied to the key pair\n     */ removeKey(networkId, accountId) {\n        return __awaiter(this, void 0, void 0, function*() {\n            delete this.keys[`${accountId}:${networkId}`];\n        });\n    }\n    /**\n     * Removes all {@link utils/key_pair!KeyPair} from in-memory storage\n     */ clear() {\n        return __awaiter(this, void 0, void 0, function*() {\n            this.keys = {};\n        });\n    }\n    /**\n     * Get the network(s) from in-memory storage\n     * @returns {Promise<string[]>}\n     */ getNetworks() {\n        return __awaiter(this, void 0, void 0, function*() {\n            const result = new Set();\n            Object.keys(this.keys).forEach((key)=>{\n                const parts = key.split(\":\");\n                result.add(parts[1]);\n            });\n            return Array.from(result.values());\n        });\n    }\n    /**\n     * Gets the account(s) from in-memory storage\n     * @param networkId The targeted network. (ex. default, betanet, etc…)\n     */ getAccounts(networkId) {\n        return __awaiter(this, void 0, void 0, function*() {\n            const result = new Array();\n            Object.keys(this.keys).forEach((key)=>{\n                const parts = key.split(\":\");\n                if (parts[parts.length - 1] === networkId) {\n                    result.push(parts.slice(0, parts.length - 1).join(\":\"));\n                }\n            });\n            return result;\n        });\n    }\n    /** @hidden */ toString() {\n        return \"InMemoryKeyStore\";\n    }\n}\nexports.InMemoryKeyStore = InMemoryKeyStore;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@near-js/keystores/lib/in_memory_key_store.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@near-js/keystores/lib/index.js":
/*!******************************************************!*\
  !*** ./node_modules/@near-js/keystores/lib/index.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.MergeKeyStore = exports.KeyStore = exports.InMemoryKeyStore = void 0;\nvar in_memory_key_store_1 = __webpack_require__(/*! ./in_memory_key_store */ \"(ssr)/./node_modules/@near-js/keystores/lib/in_memory_key_store.js\");\nObject.defineProperty(exports, \"InMemoryKeyStore\", ({\n    enumerable: true,\n    get: function() {\n        return in_memory_key_store_1.InMemoryKeyStore;\n    }\n}));\nvar keystore_1 = __webpack_require__(/*! ./keystore */ \"(ssr)/./node_modules/@near-js/keystores/lib/keystore.js\");\nObject.defineProperty(exports, \"KeyStore\", ({\n    enumerable: true,\n    get: function() {\n        return keystore_1.KeyStore;\n    }\n}));\nvar merge_key_store_1 = __webpack_require__(/*! ./merge_key_store */ \"(ssr)/./node_modules/@near-js/keystores/lib/merge_key_store.js\");\nObject.defineProperty(exports, \"MergeKeyStore\", ({\n    enumerable: true,\n    get: function() {\n        return merge_key_store_1.MergeKeyStore;\n    }\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG5lYXItanMva2V5c3RvcmVzL2xpYi9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQscUJBQXFCLEdBQUdBLGdCQUFnQixHQUFHQSx3QkFBd0IsR0FBRyxLQUFLO0FBQzNFLElBQUlLLHdCQUF3QkMsbUJBQU9BLENBQUMsaUdBQXVCO0FBQzNEUixvREFBbUQ7SUFBRVMsWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT0gsc0JBQXNCRCxnQkFBZ0I7SUFBRTtBQUFFLENBQUMsRUFBQztBQUM3SSxJQUFJSyxhQUFhSCxtQkFBT0EsQ0FBQywyRUFBWTtBQUNyQ1IsNENBQTJDO0lBQUVTLFlBQVk7SUFBTUMsS0FBSztRQUFjLE9BQU9DLFdBQVdOLFFBQVE7SUFBRTtBQUFFLENBQUMsRUFBQztBQUNsSCxJQUFJTyxvQkFBb0JKLG1CQUFPQSxDQUFDLHlGQUFtQjtBQUNuRFIsaURBQWdEO0lBQUVTLFlBQVk7SUFBTUMsS0FBSztRQUFjLE9BQU9FLGtCQUFrQlIsYUFBYTtJQUFFO0FBQUUsQ0FBQyxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaS1hbS1uZWFyYnkvLi9ub2RlX21vZHVsZXMvQG5lYXItanMva2V5c3RvcmVzL2xpYi9pbmRleC5qcz84MjY1Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5NZXJnZUtleVN0b3JlID0gZXhwb3J0cy5LZXlTdG9yZSA9IGV4cG9ydHMuSW5NZW1vcnlLZXlTdG9yZSA9IHZvaWQgMDtcbnZhciBpbl9tZW1vcnlfa2V5X3N0b3JlXzEgPSByZXF1aXJlKFwiLi9pbl9tZW1vcnlfa2V5X3N0b3JlXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiSW5NZW1vcnlLZXlTdG9yZVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gaW5fbWVtb3J5X2tleV9zdG9yZV8xLkluTWVtb3J5S2V5U3RvcmU7IH0gfSk7XG52YXIga2V5c3RvcmVfMSA9IHJlcXVpcmUoXCIuL2tleXN0b3JlXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiS2V5U3RvcmVcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGtleXN0b3JlXzEuS2V5U3RvcmU7IH0gfSk7XG52YXIgbWVyZ2Vfa2V5X3N0b3JlXzEgPSByZXF1aXJlKFwiLi9tZXJnZV9rZXlfc3RvcmVcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJNZXJnZUtleVN0b3JlXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBtZXJnZV9rZXlfc3RvcmVfMS5NZXJnZUtleVN0b3JlOyB9IH0pO1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiTWVyZ2VLZXlTdG9yZSIsIktleVN0b3JlIiwiSW5NZW1vcnlLZXlTdG9yZSIsImluX21lbW9yeV9rZXlfc3RvcmVfMSIsInJlcXVpcmUiLCJlbnVtZXJhYmxlIiwiZ2V0Iiwia2V5c3RvcmVfMSIsIm1lcmdlX2tleV9zdG9yZV8xIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@near-js/keystores/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@near-js/keystores/lib/keystore.js":
/*!*********************************************************!*\
  !*** ./node_modules/@near-js/keystores/lib/keystore.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.KeyStore = void 0;\n/**\n * KeyStores are passed to {@link near!Near} via {@link near!NearConfig}\n * and are used by the {@link signer!InMemorySigner} to sign transactions.\n *\n * @see {@link connect}\n */ class KeyStore {\n}\nexports.KeyStore = KeyStore;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG5lYXItanMva2V5c3RvcmVzL2xpYi9rZXlzdG9yZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsZ0JBQWdCLEdBQUcsS0FBSztBQUN4Qjs7Ozs7Q0FLQyxHQUNELE1BQU1FO0FBQ047QUFDQUYsZ0JBQWdCLEdBQUdFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaS1hbS1uZWFyYnkvLi9ub2RlX21vZHVsZXMvQG5lYXItanMva2V5c3RvcmVzL2xpYi9rZXlzdG9yZS5qcz82MGFkIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5LZXlTdG9yZSA9IHZvaWQgMDtcbi8qKlxuICogS2V5U3RvcmVzIGFyZSBwYXNzZWQgdG8ge0BsaW5rIG5lYXIhTmVhcn0gdmlhIHtAbGluayBuZWFyIU5lYXJDb25maWd9XG4gKiBhbmQgYXJlIHVzZWQgYnkgdGhlIHtAbGluayBzaWduZXIhSW5NZW1vcnlTaWduZXJ9IHRvIHNpZ24gdHJhbnNhY3Rpb25zLlxuICpcbiAqIEBzZWUge0BsaW5rIGNvbm5lY3R9XG4gKi9cbmNsYXNzIEtleVN0b3JlIHtcbn1cbmV4cG9ydHMuS2V5U3RvcmUgPSBLZXlTdG9yZTtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIktleVN0b3JlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@near-js/keystores/lib/keystore.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@near-js/keystores/lib/merge_key_store.js":
/*!****************************************************************!*\
  !*** ./node_modules/@near-js/keystores/lib/merge_key_store.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n        });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.MergeKeyStore = void 0;\nconst keystore_1 = __webpack_require__(/*! ./keystore */ \"(ssr)/./node_modules/@near-js/keystores/lib/keystore.js\");\nclass MergeKeyStore extends keystore_1.KeyStore {\n    /**\n     * @param keyStores read calls are attempted from start to end of array\n     * @param options.writeKeyStoreIndex the keystore index that will receive all write calls\n     */ constructor(keyStores, options = {\n        writeKeyStoreIndex: 0\n    }){\n        super();\n        this.options = options;\n        this.keyStores = keyStores;\n    }\n    /**\n     * Store a {@link utils/key_pair!KeyPair} to the first index of a key store array\n     * @param networkId The targeted network. (ex. default, betanet, etc…)\n     * @param accountId The NEAR account tied to the key pair\n     * @param keyPair The key pair to store in local storage\n     */ setKey(networkId, accountId, keyPair) {\n        return __awaiter(this, void 0, void 0, function*() {\n            yield this.keyStores[this.options.writeKeyStoreIndex].setKey(networkId, accountId, keyPair);\n        });\n    }\n    /**\n     * Gets a {@link utils/key_pair!KeyPair} from the array of key stores\n     * @param networkId The targeted network. (ex. default, betanet, etc…)\n     * @param accountId The NEAR account tied to the key pair\n     * @returns {Promise<KeyPair>}\n     */ getKey(networkId, accountId) {\n        return __awaiter(this, void 0, void 0, function*() {\n            for (const keyStore of this.keyStores){\n                const keyPair = yield keyStore.getKey(networkId, accountId);\n                if (keyPair) {\n                    return keyPair;\n                }\n            }\n            return null;\n        });\n    }\n    /**\n     * Removes a {@link utils/key_pair!KeyPair} from the array of key stores\n     * @param networkId The targeted network. (ex. default, betanet, etc…)\n     * @param accountId The NEAR account tied to the key pair\n     */ removeKey(networkId, accountId) {\n        return __awaiter(this, void 0, void 0, function*() {\n            for (const keyStore of this.keyStores){\n                yield keyStore.removeKey(networkId, accountId);\n            }\n        });\n    }\n    /**\n     * Removes all items from each key store\n     */ clear() {\n        return __awaiter(this, void 0, void 0, function*() {\n            for (const keyStore of this.keyStores){\n                yield keyStore.clear();\n            }\n        });\n    }\n    /**\n     * Get the network(s) from the array of key stores\n     * @returns {Promise<string[]>}\n     */ getNetworks() {\n        return __awaiter(this, void 0, void 0, function*() {\n            const result = new Set();\n            for (const keyStore of this.keyStores){\n                for (const network of yield keyStore.getNetworks()){\n                    result.add(network);\n                }\n            }\n            return Array.from(result);\n        });\n    }\n    /**\n     * Gets the account(s) from the array of key stores\n     * @param networkId The targeted network. (ex. default, betanet, etc…)\n     */ getAccounts(networkId) {\n        return __awaiter(this, void 0, void 0, function*() {\n            const result = new Set();\n            for (const keyStore of this.keyStores){\n                for (const account of yield keyStore.getAccounts(networkId)){\n                    result.add(account);\n                }\n            }\n            return Array.from(result);\n        });\n    }\n    /** @hidden */ toString() {\n        return `MergeKeyStore(${this.keyStores.join(\", \")})`;\n    }\n}\nexports.MergeKeyStore = MergeKeyStore;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@near-js/keystores/lib/merge_key_store.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@near-js/providers/lib/exponential-backoff.js":
/*!********************************************************************!*\
  !*** ./node_modules/@near-js/providers/lib/exponential-backoff.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, exports) {

eval("\nvar __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n        });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.exponentialBackoff = void 0;\nfunction exponentialBackoff(startWaitTime, retryNumber, waitBackoff, getResult) {\n    return __awaiter(this, void 0, void 0, function*() {\n        // TODO: jitter?\n        let waitTime = startWaitTime;\n        for(let i = 0; i < retryNumber; i++){\n            const result = yield getResult();\n            if (result) {\n                return result;\n            }\n            yield sleep(waitTime);\n            waitTime *= waitBackoff;\n        }\n        return null;\n    });\n}\nexports.exponentialBackoff = exponentialBackoff;\n// Sleep given number of millis.\nfunction sleep(millis) {\n    return new Promise((resolve)=>setTimeout(resolve, millis));\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG5lYXItanMvcHJvdmlkZXJzL2xpYi9leHBvbmVudGlhbC1iYWNrb2ZmLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsSUFBSUEsWUFBWSxJQUFLLElBQUksSUFBSSxDQUFDQSxTQUFTLElBQUssU0FBVUMsT0FBTyxFQUFFQyxVQUFVLEVBQUVDLENBQUMsRUFBRUMsU0FBUztJQUNuRixTQUFTQyxNQUFNQyxLQUFLO1FBQUksT0FBT0EsaUJBQWlCSCxJQUFJRyxRQUFRLElBQUlILEVBQUUsU0FBVUksT0FBTztZQUFJQSxRQUFRRDtRQUFRO0lBQUk7SUFDM0csT0FBTyxJQUFLSCxDQUFBQSxLQUFNQSxDQUFBQSxJQUFJSyxPQUFNLENBQUMsRUFBRyxTQUFVRCxPQUFPLEVBQUVFLE1BQU07UUFDckQsU0FBU0MsVUFBVUosS0FBSztZQUFJLElBQUk7Z0JBQUVLLEtBQUtQLFVBQVVRLElBQUksQ0FBQ047WUFBUyxFQUFFLE9BQU9PLEdBQUc7Z0JBQUVKLE9BQU9JO1lBQUk7UUFBRTtRQUMxRixTQUFTQyxTQUFTUixLQUFLO1lBQUksSUFBSTtnQkFBRUssS0FBS1AsU0FBUyxDQUFDLFFBQVEsQ0FBQ0U7WUFBUyxFQUFFLE9BQU9PLEdBQUc7Z0JBQUVKLE9BQU9JO1lBQUk7UUFBRTtRQUM3RixTQUFTRixLQUFLSSxNQUFNO1lBQUlBLE9BQU9DLElBQUksR0FBR1QsUUFBUVEsT0FBT1QsS0FBSyxJQUFJRCxNQUFNVSxPQUFPVCxLQUFLLEVBQUVXLElBQUksQ0FBQ1AsV0FBV0k7UUFBVztRQUM3R0gsS0FBSyxDQUFDUCxZQUFZQSxVQUFVYyxLQUFLLENBQUNqQixTQUFTQyxjQUFjLEVBQUUsR0FBR1UsSUFBSTtJQUN0RTtBQUNKO0FBQ0FPLDhDQUE2QztJQUFFYixPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdEZSwwQkFBMEIsR0FBRyxLQUFLO0FBQ2xDLFNBQVNDLG1CQUFtQkMsYUFBYSxFQUFFQyxXQUFXLEVBQUVDLFdBQVcsRUFBRUMsU0FBUztJQUMxRSxPQUFPMUIsVUFBVSxJQUFJLEVBQUUsS0FBSyxHQUFHLEtBQUssR0FBRztRQUNuQyxnQkFBZ0I7UUFDaEIsSUFBSTJCLFdBQVdKO1FBQ2YsSUFBSyxJQUFJSyxJQUFJLEdBQUdBLElBQUlKLGFBQWFJLElBQUs7WUFDbEMsTUFBTWIsU0FBUyxNQUFNVztZQUNyQixJQUFJWCxRQUFRO2dCQUNSLE9BQU9BO1lBQ1g7WUFDQSxNQUFNYyxNQUFNRjtZQUNaQSxZQUFZRjtRQUNoQjtRQUNBLE9BQU87SUFDWDtBQUNKO0FBQ0FKLDBCQUEwQixHQUFHQztBQUM3QixnQ0FBZ0M7QUFDaEMsU0FBU08sTUFBTUMsTUFBTTtJQUNqQixPQUFPLElBQUl0QixRQUFRRCxDQUFBQSxVQUFXd0IsV0FBV3hCLFNBQVN1QjtBQUN0RCIsInNvdXJjZXMiOlsid2VicGFjazovL2ktYW0tbmVhcmJ5Ly4vbm9kZV9tb2R1bGVzL0BuZWFyLWpzL3Byb3ZpZGVycy9saWIvZXhwb25lbnRpYWwtYmFja29mZi5qcz9iYzNiIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcbiAgICB9KTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmV4cG9uZW50aWFsQmFja29mZiA9IHZvaWQgMDtcbmZ1bmN0aW9uIGV4cG9uZW50aWFsQmFja29mZihzdGFydFdhaXRUaW1lLCByZXRyeU51bWJlciwgd2FpdEJhY2tvZmYsIGdldFJlc3VsdCkge1xuICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgIC8vIFRPRE86IGppdHRlcj9cbiAgICAgICAgbGV0IHdhaXRUaW1lID0gc3RhcnRXYWl0VGltZTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCByZXRyeU51bWJlcjsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSB5aWVsZCBnZXRSZXN1bHQoKTtcbiAgICAgICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgeWllbGQgc2xlZXAod2FpdFRpbWUpO1xuICAgICAgICAgICAgd2FpdFRpbWUgKj0gd2FpdEJhY2tvZmY7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSk7XG59XG5leHBvcnRzLmV4cG9uZW50aWFsQmFja29mZiA9IGV4cG9uZW50aWFsQmFja29mZjtcbi8vIFNsZWVwIGdpdmVuIG51bWJlciBvZiBtaWxsaXMuXG5mdW5jdGlvbiBzbGVlcChtaWxsaXMpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIG1pbGxpcykpO1xufVxuIl0sIm5hbWVzIjpbIl9fYXdhaXRlciIsInRoaXNBcmciLCJfYXJndW1lbnRzIiwiUCIsImdlbmVyYXRvciIsImFkb3B0IiwidmFsdWUiLCJyZXNvbHZlIiwiUHJvbWlzZSIsInJlamVjdCIsImZ1bGZpbGxlZCIsInN0ZXAiLCJuZXh0IiwiZSIsInJlamVjdGVkIiwicmVzdWx0IiwiZG9uZSIsInRoZW4iLCJhcHBseSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsImV4cG9uZW50aWFsQmFja29mZiIsInN0YXJ0V2FpdFRpbWUiLCJyZXRyeU51bWJlciIsIndhaXRCYWNrb2ZmIiwiZ2V0UmVzdWx0Iiwid2FpdFRpbWUiLCJpIiwic2xlZXAiLCJtaWxsaXMiLCJzZXRUaW1lb3V0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@near-js/providers/lib/exponential-backoff.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@near-js/providers/lib/fetch.js":
/*!******************************************************!*\
  !*** ./node_modules/@near-js/providers/lib/fetch.js ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = this && this.__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst node_fetch_1 = __importDefault(__webpack_require__(/*! node-fetch */ \"(ssr)/./node_modules/node-fetch/lib/index.mjs\"));\nconst http_1 = __importDefault(__webpack_require__(/*! http */ \"http\"));\nconst https_1 = __importDefault(__webpack_require__(/*! https */ \"https\"));\nconst httpAgent = new http_1.default.Agent({\n    keepAlive: true\n});\nconst httpsAgent = new https_1.default.Agent({\n    keepAlive: true\n});\nfunction agent(_parsedURL) {\n    if (_parsedURL.protocol === \"http:\") {\n        return httpAgent;\n    } else {\n        return httpsAgent;\n    }\n}\nfunction default_1(resource, init) {\n    return (0, node_fetch_1.default)(resource, Object.assign({\n        agent: agent(new URL(resource.toString()))\n    }, init));\n}\nexports[\"default\"] = default_1;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG5lYXItanMvcHJvdmlkZXJzL2xpYi9mZXRjaC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLElBQUlBLGtCQUFrQixJQUFLLElBQUksSUFBSSxDQUFDQSxlQUFlLElBQUssU0FBVUMsR0FBRztJQUNqRSxPQUFPLE9BQVFBLElBQUlDLFVBQVUsR0FBSUQsTUFBTTtRQUFFLFdBQVdBO0lBQUk7QUFDNUQ7QUFDQUUsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0QsTUFBTUMsZUFBZVAsZ0JBQWdCUSxtQkFBT0EsQ0FBQyxpRUFBWTtBQUN6RCxNQUFNQyxTQUFTVCxnQkFBZ0JRLG1CQUFPQSxDQUFDLGtCQUFNO0FBQzdDLE1BQU1FLFVBQVVWLGdCQUFnQlEsbUJBQU9BLENBQUMsb0JBQU87QUFDL0MsTUFBTUcsWUFBWSxJQUFJRixPQUFPRyxPQUFPLENBQUNDLEtBQUssQ0FBQztJQUFFQyxXQUFXO0FBQUs7QUFDN0QsTUFBTUMsYUFBYSxJQUFJTCxRQUFRRSxPQUFPLENBQUNDLEtBQUssQ0FBQztJQUFFQyxXQUFXO0FBQUs7QUFDL0QsU0FBU0UsTUFBTUMsVUFBVTtJQUNyQixJQUFJQSxXQUFXQyxRQUFRLEtBQUssU0FBUztRQUNqQyxPQUFPUDtJQUNYLE9BQ0s7UUFDRCxPQUFPSTtJQUNYO0FBQ0o7QUFDQSxTQUFTSSxVQUFVQyxRQUFRLEVBQUVDLElBQUk7SUFDN0IsT0FBTyxDQUFDLEdBQUdkLGFBQWFLLE9BQU8sRUFBRVEsVUFBVWpCLE9BQU9tQixNQUFNLENBQUM7UUFBRU4sT0FBT0EsTUFBTSxJQUFJTyxJQUFJSCxTQUFTSSxRQUFRO0lBQUssR0FBR0g7QUFDN0c7QUFDQWhCLGtCQUFlLEdBQUdjIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaS1hbS1uZWFyYnkvLi9ub2RlX21vZHVsZXMvQG5lYXItanMvcHJvdmlkZXJzL2xpYi9mZXRjaC5qcz9hM2JiIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3Qgbm9kZV9mZXRjaF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJub2RlLWZldGNoXCIpKTtcbmNvbnN0IGh0dHBfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiaHR0cFwiKSk7XG5jb25zdCBodHRwc18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJodHRwc1wiKSk7XG5jb25zdCBodHRwQWdlbnQgPSBuZXcgaHR0cF8xLmRlZmF1bHQuQWdlbnQoeyBrZWVwQWxpdmU6IHRydWUgfSk7XG5jb25zdCBodHRwc0FnZW50ID0gbmV3IGh0dHBzXzEuZGVmYXVsdC5BZ2VudCh7IGtlZXBBbGl2ZTogdHJ1ZSB9KTtcbmZ1bmN0aW9uIGFnZW50KF9wYXJzZWRVUkwpIHtcbiAgICBpZiAoX3BhcnNlZFVSTC5wcm90b2NvbCA9PT0gJ2h0dHA6Jykge1xuICAgICAgICByZXR1cm4gaHR0cEFnZW50O1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGh0dHBzQWdlbnQ7XG4gICAgfVxufVxuZnVuY3Rpb24gZGVmYXVsdF8xKHJlc291cmNlLCBpbml0KSB7XG4gICAgcmV0dXJuICgwLCBub2RlX2ZldGNoXzEuZGVmYXVsdCkocmVzb3VyY2UsIE9iamVjdC5hc3NpZ24oeyBhZ2VudDogYWdlbnQobmV3IFVSTChyZXNvdXJjZS50b1N0cmluZygpKSkgfSwgaW5pdCkpO1xufVxuZXhwb3J0cy5kZWZhdWx0ID0gZGVmYXVsdF8xO1xuIl0sIm5hbWVzIjpbIl9faW1wb3J0RGVmYXVsdCIsIm1vZCIsIl9fZXNNb2R1bGUiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIm5vZGVfZmV0Y2hfMSIsInJlcXVpcmUiLCJodHRwXzEiLCJodHRwc18xIiwiaHR0cEFnZW50IiwiZGVmYXVsdCIsIkFnZW50Iiwia2VlcEFsaXZlIiwiaHR0cHNBZ2VudCIsImFnZW50IiwiX3BhcnNlZFVSTCIsInByb3RvY29sIiwiZGVmYXVsdF8xIiwicmVzb3VyY2UiLCJpbml0IiwiYXNzaWduIiwiVVJMIiwidG9TdHJpbmciXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@near-js/providers/lib/fetch.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@near-js/providers/lib/fetch_json.js":
/*!***********************************************************!*\
  !*** ./node_modules/@near-js/providers/lib/fetch_json.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n        desc = {\n            enumerable: true,\n            get: function() {\n                return m[k];\n            }\n        };\n    }\n    Object.defineProperty(o, k2, desc);\n} : function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {\n    Object.defineProperty(o, \"default\", {\n        enumerable: true,\n        value: v\n    });\n} : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function(mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) {\n        for(var k in mod)if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    }\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n        });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = this && this.__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.fetchJson = void 0;\nconst types_1 = __webpack_require__(/*! @near-js/types */ \"(ssr)/./node_modules/@near-js/types/lib/index.js\");\nconst http_errors_1 = __importDefault(__webpack_require__(/*! http-errors */ \"(ssr)/./node_modules/http-errors/index.js\"));\nconst exponential_backoff_1 = __webpack_require__(/*! ./exponential-backoff */ \"(ssr)/./node_modules/@near-js/providers/lib/exponential-backoff.js\");\nconst START_WAIT_TIME_MS = 1000;\nconst BACKOFF_MULTIPLIER = 1.5;\nconst RETRY_NUMBER = 10;\nconst logWarning = (...args)=>!process.env[\"NEAR_NO_LOGS\"] && console.warn(...args);\nfunction fetchJson(connectionInfoOrUrl, json) {\n    return __awaiter(this, void 0, void 0, function*() {\n        let connectionInfo = {\n            url: null\n        };\n        if (typeof connectionInfoOrUrl === \"string\") {\n            connectionInfo.url = connectionInfoOrUrl;\n        } else {\n            connectionInfo = connectionInfoOrUrl;\n        }\n        const response = yield (0, exponential_backoff_1.exponentialBackoff)(START_WAIT_TIME_MS, RETRY_NUMBER, BACKOFF_MULTIPLIER, ()=>__awaiter(this, void 0, void 0, function*() {\n                try {\n                    if (!global.fetch) {\n                        global.fetch = (yield Promise.resolve().then(()=>__importStar(__webpack_require__(/*! ./fetch */ \"(ssr)/./node_modules/@near-js/providers/lib/fetch.js\")))).default;\n                    }\n                    const response = yield global.fetch(connectionInfo.url, {\n                        method: json ? \"POST\" : \"GET\",\n                        body: json ? json : undefined,\n                        headers: Object.assign(Object.assign({}, connectionInfo.headers), {\n                            \"Content-Type\": \"application/json\"\n                        })\n                    });\n                    if (!response.ok) {\n                        if (response.status === 503) {\n                            logWarning(`Retrying HTTP request for ${connectionInfo.url} as it's not available now`);\n                            return null;\n                        }\n                        throw (0, http_errors_1.default)(response.status, (yield response.text()));\n                    }\n                    return response;\n                } catch (error) {\n                    if (error.toString().includes(\"FetchError\") || error.toString().includes(\"Failed to fetch\")) {\n                        logWarning(`Retrying HTTP request for ${connectionInfo.url} because of error: ${error}`);\n                        return null;\n                    }\n                    throw error;\n                }\n            }));\n        if (!response) {\n            throw new types_1.TypedError(`Exceeded ${RETRY_NUMBER} attempts for ${connectionInfo.url}.`, \"RetriesExceeded\");\n        }\n        return yield response.json();\n    });\n}\nexports.fetchJson = fetchJson;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@near-js/providers/lib/fetch_json.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@near-js/providers/lib/index.js":
/*!******************************************************!*\
  !*** ./node_modules/@near-js/providers/lib/index.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.fetchJson = exports.Provider = exports.JsonRpcProvider = exports.exponentialBackoff = void 0;\nvar exponential_backoff_1 = __webpack_require__(/*! ./exponential-backoff */ \"(ssr)/./node_modules/@near-js/providers/lib/exponential-backoff.js\");\nObject.defineProperty(exports, \"exponentialBackoff\", ({\n    enumerable: true,\n    get: function() {\n        return exponential_backoff_1.exponentialBackoff;\n    }\n}));\nvar json_rpc_provider_1 = __webpack_require__(/*! ./json-rpc-provider */ \"(ssr)/./node_modules/@near-js/providers/lib/json-rpc-provider.js\");\nObject.defineProperty(exports, \"JsonRpcProvider\", ({\n    enumerable: true,\n    get: function() {\n        return json_rpc_provider_1.JsonRpcProvider;\n    }\n}));\nvar provider_1 = __webpack_require__(/*! ./provider */ \"(ssr)/./node_modules/@near-js/providers/lib/provider.js\");\nObject.defineProperty(exports, \"Provider\", ({\n    enumerable: true,\n    get: function() {\n        return provider_1.Provider;\n    }\n}));\nvar fetch_json_1 = __webpack_require__(/*! ./fetch_json */ \"(ssr)/./node_modules/@near-js/providers/lib/fetch_json.js\");\nObject.defineProperty(exports, \"fetchJson\", ({\n    enumerable: true,\n    get: function() {\n        return fetch_json_1.fetchJson;\n    }\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG5lYXItanMvcHJvdmlkZXJzL2xpYi9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsaUJBQWlCLEdBQUdBLGdCQUFnQixHQUFHQSx1QkFBdUIsR0FBR0EsMEJBQTBCLEdBQUcsS0FBSztBQUNuRyxJQUFJTSx3QkFBd0JDLG1CQUFPQSxDQUFDLGlHQUF1QjtBQUMzRFQsc0RBQXFEO0lBQUVVLFlBQVk7SUFBTUMsS0FBSztRQUFjLE9BQU9ILHNCQUFzQkQsa0JBQWtCO0lBQUU7QUFBRSxDQUFDLEVBQUM7QUFDakosSUFBSUssc0JBQXNCSCxtQkFBT0EsQ0FBQyw2RkFBcUI7QUFDdkRULG1EQUFrRDtJQUFFVSxZQUFZO0lBQU1DLEtBQUs7UUFBYyxPQUFPQyxvQkFBb0JOLGVBQWU7SUFBRTtBQUFFLENBQUMsRUFBQztBQUN6SSxJQUFJTyxhQUFhSixtQkFBT0EsQ0FBQywyRUFBWTtBQUNyQ1QsNENBQTJDO0lBQUVVLFlBQVk7SUFBTUMsS0FBSztRQUFjLE9BQU9FLFdBQVdSLFFBQVE7SUFBRTtBQUFFLENBQUMsRUFBQztBQUNsSCxJQUFJUyxlQUFlTCxtQkFBT0EsQ0FBQywrRUFBYztBQUN6Q1QsNkNBQTRDO0lBQUVVLFlBQVk7SUFBTUMsS0FBSztRQUFjLE9BQU9HLGFBQWFWLFNBQVM7SUFBRTtBQUFFLENBQUMsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2ktYW0tbmVhcmJ5Ly4vbm9kZV9tb2R1bGVzL0BuZWFyLWpzL3Byb3ZpZGVycy9saWIvaW5kZXguanM/YjM3YiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZmV0Y2hKc29uID0gZXhwb3J0cy5Qcm92aWRlciA9IGV4cG9ydHMuSnNvblJwY1Byb3ZpZGVyID0gZXhwb3J0cy5leHBvbmVudGlhbEJhY2tvZmYgPSB2b2lkIDA7XG52YXIgZXhwb25lbnRpYWxfYmFja29mZl8xID0gcmVxdWlyZShcIi4vZXhwb25lbnRpYWwtYmFja29mZlwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImV4cG9uZW50aWFsQmFja29mZlwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZXhwb25lbnRpYWxfYmFja29mZl8xLmV4cG9uZW50aWFsQmFja29mZjsgfSB9KTtcbnZhciBqc29uX3JwY19wcm92aWRlcl8xID0gcmVxdWlyZShcIi4vanNvbi1ycGMtcHJvdmlkZXJcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJKc29uUnBjUHJvdmlkZXJcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGpzb25fcnBjX3Byb3ZpZGVyXzEuSnNvblJwY1Byb3ZpZGVyOyB9IH0pO1xudmFyIHByb3ZpZGVyXzEgPSByZXF1aXJlKFwiLi9wcm92aWRlclwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlByb3ZpZGVyXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBwcm92aWRlcl8xLlByb3ZpZGVyOyB9IH0pO1xudmFyIGZldGNoX2pzb25fMSA9IHJlcXVpcmUoXCIuL2ZldGNoX2pzb25cIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJmZXRjaEpzb25cIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGZldGNoX2pzb25fMS5mZXRjaEpzb247IH0gfSk7XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJmZXRjaEpzb24iLCJQcm92aWRlciIsIkpzb25ScGNQcm92aWRlciIsImV4cG9uZW50aWFsQmFja29mZiIsImV4cG9uZW50aWFsX2JhY2tvZmZfMSIsInJlcXVpcmUiLCJlbnVtZXJhYmxlIiwiZ2V0IiwianNvbl9ycGNfcHJvdmlkZXJfMSIsInByb3ZpZGVyXzEiLCJmZXRjaF9qc29uXzEiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@near-js/providers/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@near-js/providers/lib/json-rpc-provider.js":
/*!******************************************************************!*\
  !*** ./node_modules/@near-js/providers/lib/json-rpc-provider.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n        });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __rest = this && this.__rest || function(s, e) {\n    var t = {};\n    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++){\n        if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n    }\n    return t;\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.JsonRpcProvider = void 0;\n/**\n * @module\n * @description\n * This module contains the {@link JsonRpcProvider} client class\n * which can be used to interact with the [NEAR RPC API](https://docs.near.org/api/rpc/introduction).\n * @see {@link providers/provider | providers} for a list of request and response types\n */ const utils_1 = __webpack_require__(/*! @near-js/utils */ \"(ssr)/./node_modules/@near-js/utils/lib/index.js\");\nconst types_1 = __webpack_require__(/*! @near-js/types */ \"(ssr)/./node_modules/@near-js/types/lib/index.js\");\nconst transactions_1 = __webpack_require__(/*! @near-js/transactions */ \"(ssr)/./node_modules/@near-js/transactions/lib/index.js\");\nconst borsh_1 = __webpack_require__(/*! borsh */ \"(ssr)/./node_modules/borsh/lib/index.js\");\nconst exponential_backoff_1 = __webpack_require__(/*! ./exponential-backoff */ \"(ssr)/./node_modules/@near-js/providers/lib/exponential-backoff.js\");\nconst provider_1 = __webpack_require__(/*! ./provider */ \"(ssr)/./node_modules/@near-js/providers/lib/provider.js\");\nconst fetch_json_1 = __webpack_require__(/*! ./fetch_json */ \"(ssr)/./node_modules/@near-js/providers/lib/fetch_json.js\");\n/** @hidden */ // Default number of retries before giving up on a request.\nconst REQUEST_RETRY_NUMBER = 12;\n// Default wait until next retry in millis.\nconst REQUEST_RETRY_WAIT = 500;\n// Exponential back off for waiting to retry.\nconst REQUEST_RETRY_WAIT_BACKOFF = 1.5;\n/// Keep ids unique across all connections.\nlet _nextId = 123;\n/**\n * Client class to interact with the [NEAR RPC API](https://docs.near.org/api/rpc/introduction).\n * @see [https://github.com/near/nearcore/tree/master/chain/jsonrpc](https://github.com/near/nearcore/tree/master/chain/jsonrpc)\n */ class JsonRpcProvider extends provider_1.Provider {\n    /**\n     * @param connectionInfo Connection info\n     */ constructor(connectionInfo){\n        super();\n        this.connection = connectionInfo || {\n            url: \"\"\n        };\n    }\n    /**\n     * Gets the RPC's status\n     * @see [https://docs.near.org/docs/develop/front-end/rpc#general-validator-status](https://docs.near.org/docs/develop/front-end/rpc#general-validator-status)\n     */ status() {\n        return __awaiter(this, void 0, void 0, function*() {\n            return this.sendJsonRpc(\"status\", []);\n        });\n    }\n    /**\n     * Sends a signed transaction to the RPC and waits until transaction is fully complete\n     * @see [https://docs.near.org/docs/develop/front-end/rpc#send-transaction-await](https://docs.near.org/docs/develop/front-end/rpc#general-validator-status)\n     *\n     * @param signedTransaction The signed transaction being sent\n     */ sendTransaction(signedTransaction) {\n        return __awaiter(this, void 0, void 0, function*() {\n            const bytes = (0, transactions_1.encodeTransaction)(signedTransaction);\n            return this.sendJsonRpc(\"broadcast_tx_commit\", [\n                Buffer.from(bytes).toString(\"base64\")\n            ]);\n        });\n    }\n    /**\n     * Sends a signed transaction to the RPC and immediately returns transaction hash\n     * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#send-transaction-async)\n     * @param signedTransaction The signed transaction being sent\n     * @returns {Promise<FinalExecutionOutcome>}\n     */ sendTransactionAsync(signedTransaction) {\n        return __awaiter(this, void 0, void 0, function*() {\n            const bytes = (0, transactions_1.encodeTransaction)(signedTransaction);\n            return this.sendJsonRpc(\"broadcast_tx_async\", [\n                Buffer.from(bytes).toString(\"base64\")\n            ]);\n        });\n    }\n    /**\n     * Gets a transaction's status from the RPC\n     * @see [https://docs.near.org/docs/develop/front-end/rpc#transaction-status](https://docs.near.org/docs/develop/front-end/rpc#general-validator-status)\n     *\n     * @param txHash A transaction hash as either a Uint8Array or a base58 encoded string\n     * @param accountId The NEAR account that signed the transaction\n     */ txStatus(txHash, accountId) {\n        return __awaiter(this, void 0, void 0, function*() {\n            if (typeof txHash === \"string\") {\n                return this.txStatusString(txHash, accountId);\n            } else {\n                return this.txStatusUint8Array(txHash, accountId);\n            }\n        });\n    }\n    txStatusUint8Array(txHash, accountId) {\n        return __awaiter(this, void 0, void 0, function*() {\n            return this.sendJsonRpc(\"tx\", [\n                (0, borsh_1.baseEncode)(txHash),\n                accountId\n            ]);\n        });\n    }\n    txStatusString(txHash, accountId) {\n        return __awaiter(this, void 0, void 0, function*() {\n            return this.sendJsonRpc(\"tx\", [\n                txHash,\n                accountId\n            ]);\n        });\n    }\n    /**\n     * Gets a transaction's status from the RPC with receipts\n     * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#transaction-status-with-receipts)\n     * @param txHash The hash of the transaction\n     * @param accountId The NEAR account that signed the transaction\n     * @returns {Promise<FinalExecutionOutcome>}\n     */ txStatusReceipts(txHash, accountId) {\n        return __awaiter(this, void 0, void 0, function*() {\n            if (typeof txHash === \"string\") {\n                return this.sendJsonRpc(\"EXPERIMENTAL_tx_status\", [\n                    txHash,\n                    accountId\n                ]);\n            } else {\n                return this.sendJsonRpc(\"EXPERIMENTAL_tx_status\", [\n                    (0, borsh_1.baseEncode)(txHash),\n                    accountId\n                ]);\n            }\n        });\n    }\n    /**\n     * Query the RPC by passing an {@link providers/provider!RpcQueryRequest}\n     * @see [https://docs.near.org/api/rpc/contracts](https://docs.near.org/api/rpc/contracts)\n     *\n     * @typeParam T the shape of the returned query response\n     */ query(...args) {\n        return __awaiter(this, void 0, void 0, function*() {\n            let result;\n            if (args.length === 1) {\n                const _a = args[0], { block_id, blockId } = _a, otherParams = __rest(_a, [\n                    \"block_id\",\n                    \"blockId\"\n                ]);\n                result = yield this.sendJsonRpc(\"query\", Object.assign(Object.assign({}, otherParams), {\n                    block_id: block_id || blockId\n                }));\n            } else {\n                const [path, data] = args;\n                result = yield this.sendJsonRpc(\"query\", [\n                    path,\n                    data\n                ]);\n            }\n            if (result && result.error) {\n                throw new types_1.TypedError(`Querying failed: ${result.error}.\\n${JSON.stringify(result, null, 2)}`, (0, utils_1.getErrorTypeFromErrorMessage)(result.error, result.error.name));\n            }\n            return result;\n        });\n    }\n    /**\n     * Query for block info from the RPC\n     * pass block_id OR finality as blockQuery, not both\n     * @see [https://docs.near.org/api/rpc/block-chunk](https://docs.near.org/api/rpc/block-chunk)\n     *\n     * @param blockQuery {@link providers/provider!BlockReference} (passing a {@link providers/provider!BlockId} is deprecated)\n     */ block(blockQuery) {\n        return __awaiter(this, void 0, void 0, function*() {\n            const { finality } = blockQuery;\n            const { blockId } = blockQuery;\n            return this.sendJsonRpc(\"block\", {\n                block_id: blockId,\n                finality\n            });\n        });\n    }\n    /**\n     * Query changes in block from the RPC\n     * pass block_id OR finality as blockQuery, not both\n     * @see [https://docs.near.org/api/rpc/block-chunk](https://docs.near.org/api/rpc/block-chunk)\n     */ blockChanges(blockQuery) {\n        return __awaiter(this, void 0, void 0, function*() {\n            const { finality } = blockQuery;\n            const { blockId } = blockQuery;\n            return this.sendJsonRpc(\"EXPERIMENTAL_changes_in_block\", {\n                block_id: blockId,\n                finality\n            });\n        });\n    }\n    /**\n     * Queries for details about a specific chunk appending details of receipts and transactions to the same chunk data provided by a block\n     * @see [https://docs.near.org/api/rpc/block-chunk](https://docs.near.org/api/rpc/block-chunk)\n     *\n     * @param chunkId Hash of a chunk ID or shard ID\n     */ chunk(chunkId) {\n        return __awaiter(this, void 0, void 0, function*() {\n            return this.sendJsonRpc(\"chunk\", [\n                chunkId\n            ]);\n        });\n    }\n    /**\n     * Query validators of the epoch defined by the given block id.\n     * @see [https://docs.near.org/api/rpc/network#validation-status](https://docs.near.org/api/rpc/network#validation-status)\n     *\n     * @param blockId Block hash or height, or null for latest.\n     */ validators(blockId) {\n        return __awaiter(this, void 0, void 0, function*() {\n            return this.sendJsonRpc(\"validators\", [\n                blockId\n            ]);\n        });\n    }\n    /**\n     * Gets the protocol config at a block from RPC\n     *\n     * @param blockReference specifies the block to get the protocol config for\n     */ experimental_protocolConfig(blockReference) {\n        return __awaiter(this, void 0, void 0, function*() {\n            const _a = blockReference, { blockId } = _a, otherParams = __rest(_a, [\n                \"blockId\"\n            ]);\n            return yield this.sendJsonRpc(\"EXPERIMENTAL_protocol_config\", Object.assign(Object.assign({}, otherParams), {\n                block_id: blockId\n            }));\n        });\n    }\n    /**\n     * Gets a light client execution proof for verifying execution outcomes\n     * @see [https://github.com/nearprotocol/NEPs/blob/master/specs/ChainSpec/LightClient.md#light-client-proof](https://github.com/nearprotocol/NEPs/blob/master/specs/ChainSpec/LightClient.md#light-client-proof)\n     */ lightClientProof(request) {\n        return __awaiter(this, void 0, void 0, function*() {\n            return yield this.sendJsonRpc(\"EXPERIMENTAL_light_client_proof\", request);\n        });\n    }\n    /**\n     * Returns the next light client block as far in the future as possible from the last known hash\n     * to still be able to validate from that hash. This will either return the last block of the\n     * next epoch, or the last final known block.\n     *\n     * @see [https://github.com/near/NEPs/blob/master/specs/ChainSpec/LightClient.md#light-client-block](https://github.com/near/NEPs/blob/master/specs/ChainSpec/LightClient.md#light-client-block)\n     */ nextLightClientBlock(request) {\n        return __awaiter(this, void 0, void 0, function*() {\n            return yield this.sendJsonRpc(\"next_light_client_block\", request);\n        });\n    }\n    /**\n     * Gets access key changes for a given array of accountIds\n     * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#view-access-key-changes-all)\n     * @returns {Promise<ChangeResult>}\n     */ accessKeyChanges(accountIdArray, blockQuery) {\n        return __awaiter(this, void 0, void 0, function*() {\n            const { finality } = blockQuery;\n            const { blockId } = blockQuery;\n            return this.sendJsonRpc(\"EXPERIMENTAL_changes\", {\n                changes_type: \"all_access_key_changes\",\n                account_ids: accountIdArray,\n                block_id: blockId,\n                finality\n            });\n        });\n    }\n    /**\n     * Gets single access key changes for a given array of access keys\n     * pass block_id OR finality as blockQuery, not both\n     * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#view-access-key-changes-single)\n     * @returns {Promise<ChangeResult>}\n     */ singleAccessKeyChanges(accessKeyArray, blockQuery) {\n        return __awaiter(this, void 0, void 0, function*() {\n            const { finality } = blockQuery;\n            const { blockId } = blockQuery;\n            return this.sendJsonRpc(\"EXPERIMENTAL_changes\", {\n                changes_type: \"single_access_key_changes\",\n                keys: accessKeyArray,\n                block_id: blockId,\n                finality\n            });\n        });\n    }\n    /**\n     * Gets account changes for a given array of accountIds\n     * pass block_id OR finality as blockQuery, not both\n     * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#view-account-changes)\n     * @returns {Promise<ChangeResult>}\n     */ accountChanges(accountIdArray, blockQuery) {\n        return __awaiter(this, void 0, void 0, function*() {\n            const { finality } = blockQuery;\n            const { blockId } = blockQuery;\n            return this.sendJsonRpc(\"EXPERIMENTAL_changes\", {\n                changes_type: \"account_changes\",\n                account_ids: accountIdArray,\n                block_id: blockId,\n                finality\n            });\n        });\n    }\n    /**\n     * Gets contract state changes for a given array of accountIds\n     * pass block_id OR finality as blockQuery, not both\n     * Note: If you pass a keyPrefix it must be base64 encoded\n     * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#view-contract-state-changes)\n     * @returns {Promise<ChangeResult>}\n     */ contractStateChanges(accountIdArray, blockQuery, keyPrefix = \"\") {\n        return __awaiter(this, void 0, void 0, function*() {\n            const { finality } = blockQuery;\n            const { blockId } = blockQuery;\n            return this.sendJsonRpc(\"EXPERIMENTAL_changes\", {\n                changes_type: \"data_changes\",\n                account_ids: accountIdArray,\n                key_prefix_base64: keyPrefix,\n                block_id: blockId,\n                finality\n            });\n        });\n    }\n    /**\n     * Gets contract code changes for a given array of accountIds\n     * pass block_id OR finality as blockQuery, not both\n     * Note: Change is returned in a base64 encoded WASM file\n     * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#view-contract-code-changes)\n     * @returns {Promise<ChangeResult>}\n     */ contractCodeChanges(accountIdArray, blockQuery) {\n        return __awaiter(this, void 0, void 0, function*() {\n            const { finality } = blockQuery;\n            const { blockId } = blockQuery;\n            return this.sendJsonRpc(\"EXPERIMENTAL_changes\", {\n                changes_type: \"contract_code_changes\",\n                account_ids: accountIdArray,\n                block_id: blockId,\n                finality\n            });\n        });\n    }\n    /**\n     * Returns gas price for a specific block_height or block_hash.\n     * @see [https://docs.near.org/api/rpc/gas](https://docs.near.org/api/rpc/gas)\n     *\n     * @param blockId Block hash or height, or null for latest.\n     */ gasPrice(blockId) {\n        return __awaiter(this, void 0, void 0, function*() {\n            return yield this.sendJsonRpc(\"gas_price\", [\n                blockId\n            ]);\n        });\n    }\n    /**\n     * Directly call the RPC specifying the method and params\n     *\n     * @param method RPC method\n     * @param params Parameters to the method\n     */ sendJsonRpc(method, params) {\n        return __awaiter(this, void 0, void 0, function*() {\n            const response = yield (0, exponential_backoff_1.exponentialBackoff)(REQUEST_RETRY_WAIT, REQUEST_RETRY_NUMBER, REQUEST_RETRY_WAIT_BACKOFF, ()=>__awaiter(this, void 0, void 0, function*() {\n                    try {\n                        const request = {\n                            method,\n                            params,\n                            id: _nextId++,\n                            jsonrpc: \"2.0\"\n                        };\n                        const response = yield (0, fetch_json_1.fetchJson)(this.connection, JSON.stringify(request));\n                        if (response.error) {\n                            if (typeof response.error.data === \"object\") {\n                                if (typeof response.error.data.error_message === \"string\" && typeof response.error.data.error_type === \"string\") {\n                                    // if error data has error_message and error_type properties, we consider that node returned an error in the old format\n                                    throw new types_1.TypedError(response.error.data.error_message, response.error.data.error_type);\n                                }\n                                throw (0, utils_1.parseRpcError)(response.error.data);\n                            } else {\n                                const errorMessage = `[${response.error.code}] ${response.error.message}: ${response.error.data}`;\n                                // NOTE: All this hackery is happening because structured errors not implemented\n                                // TODO: Fix when https://github.com/nearprotocol/nearcore/issues/1839 gets resolved\n                                if (response.error.data === \"Timeout\" || errorMessage.includes(\"Timeout error\") || errorMessage.includes(\"query has timed out\")) {\n                                    throw new types_1.TypedError(errorMessage, \"TimeoutError\");\n                                }\n                                throw new types_1.TypedError(errorMessage, (0, utils_1.getErrorTypeFromErrorMessage)(response.error.data, response.error.name));\n                            }\n                        }\n                        // Success when response.error is not exist\n                        return response;\n                    } catch (error) {\n                        if (error.type === \"TimeoutError\") {\n                            if (!process.env[\"NEAR_NO_LOGS\"]) {\n                                console.warn(`Retrying request to ${method} as it has timed out`, params);\n                            }\n                            return null;\n                        }\n                        throw error;\n                    }\n                }));\n            const { result } = response;\n            // From jsonrpc spec:\n            // result\n            //   This member is REQUIRED on success.\n            //   This member MUST NOT exist if there was an error invoking the method.\n            if (typeof result === \"undefined\") {\n                throw new types_1.TypedError(`Exceeded ${REQUEST_RETRY_NUMBER} attempts for request to ${method}.`, \"RetriesExceeded\");\n            }\n            return result;\n        });\n    }\n}\nexports.JsonRpcProvider = JsonRpcProvider;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG5lYXItanMvcHJvdmlkZXJzL2xpYi9qc29uLXJwYy1wcm92aWRlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLElBQUlBLFlBQVksSUFBSyxJQUFJLElBQUksQ0FBQ0EsU0FBUyxJQUFLLFNBQVVDLE9BQU8sRUFBRUMsVUFBVSxFQUFFQyxDQUFDLEVBQUVDLFNBQVM7SUFDbkYsU0FBU0MsTUFBTUMsS0FBSztRQUFJLE9BQU9BLGlCQUFpQkgsSUFBSUcsUUFBUSxJQUFJSCxFQUFFLFNBQVVJLE9BQU87WUFBSUEsUUFBUUQ7UUFBUTtJQUFJO0lBQzNHLE9BQU8sSUFBS0gsQ0FBQUEsS0FBTUEsQ0FBQUEsSUFBSUssT0FBTSxDQUFDLEVBQUcsU0FBVUQsT0FBTyxFQUFFRSxNQUFNO1FBQ3JELFNBQVNDLFVBQVVKLEtBQUs7WUFBSSxJQUFJO2dCQUFFSyxLQUFLUCxVQUFVUSxJQUFJLENBQUNOO1lBQVMsRUFBRSxPQUFPTyxHQUFHO2dCQUFFSixPQUFPSTtZQUFJO1FBQUU7UUFDMUYsU0FBU0MsU0FBU1IsS0FBSztZQUFJLElBQUk7Z0JBQUVLLEtBQUtQLFNBQVMsQ0FBQyxRQUFRLENBQUNFO1lBQVMsRUFBRSxPQUFPTyxHQUFHO2dCQUFFSixPQUFPSTtZQUFJO1FBQUU7UUFDN0YsU0FBU0YsS0FBS0ksTUFBTTtZQUFJQSxPQUFPQyxJQUFJLEdBQUdULFFBQVFRLE9BQU9ULEtBQUssSUFBSUQsTUFBTVUsT0FBT1QsS0FBSyxFQUFFVyxJQUFJLENBQUNQLFdBQVdJO1FBQVc7UUFDN0dILEtBQUssQ0FBQ1AsWUFBWUEsVUFBVWMsS0FBSyxDQUFDakIsU0FBU0MsY0FBYyxFQUFFLEdBQUdVLElBQUk7SUFDdEU7QUFDSjtBQUNBLElBQUlPLFNBQVMsSUFBSyxJQUFJLElBQUksQ0FBQ0EsTUFBTSxJQUFLLFNBQVVDLENBQUMsRUFBRVAsQ0FBQztJQUNoRCxJQUFJUSxJQUFJLENBQUM7SUFDVCxJQUFLLElBQUlDLEtBQUtGLEVBQUcsSUFBSUcsT0FBT0MsU0FBUyxDQUFDQyxjQUFjLENBQUNDLElBQUksQ0FBQ04sR0FBR0UsTUFBTVQsRUFBRWMsT0FBTyxDQUFDTCxLQUFLLEdBQzlFRCxDQUFDLENBQUNDLEVBQUUsR0FBR0YsQ0FBQyxDQUFDRSxFQUFFO0lBQ2YsSUFBSUYsS0FBSyxRQUFRLE9BQU9HLE9BQU9LLHFCQUFxQixLQUFLLFlBQ3JELElBQUssSUFBSUMsSUFBSSxHQUFHUCxJQUFJQyxPQUFPSyxxQkFBcUIsQ0FBQ1IsSUFBSVMsSUFBSVAsRUFBRVEsTUFBTSxFQUFFRCxJQUFLO1FBQ3BFLElBQUloQixFQUFFYyxPQUFPLENBQUNMLENBQUMsQ0FBQ08sRUFBRSxJQUFJLEtBQUtOLE9BQU9DLFNBQVMsQ0FBQ08sb0JBQW9CLENBQUNMLElBQUksQ0FBQ04sR0FBR0UsQ0FBQyxDQUFDTyxFQUFFLEdBQ3pFUixDQUFDLENBQUNDLENBQUMsQ0FBQ08sRUFBRSxDQUFDLEdBQUdULENBQUMsQ0FBQ0UsQ0FBQyxDQUFDTyxFQUFFLENBQUM7SUFDekI7SUFDSixPQUFPUjtBQUNYO0FBQ0FFLDhDQUE2QztJQUFFakIsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3RDJCLHVCQUF1QixHQUFHLEtBQUs7QUFDL0I7Ozs7OztDQU1DLEdBQ0QsTUFBTUUsVUFBVUMsbUJBQU9BLENBQUMsd0VBQWdCO0FBQ3hDLE1BQU1DLFVBQVVELG1CQUFPQSxDQUFDLHdFQUFnQjtBQUN4QyxNQUFNRSxpQkFBaUJGLG1CQUFPQSxDQUFDLHNGQUF1QjtBQUN0RCxNQUFNRyxVQUFVSCxtQkFBT0EsQ0FBQyxzREFBTztBQUMvQixNQUFNSSx3QkFBd0JKLG1CQUFPQSxDQUFDLGlHQUF1QjtBQUM3RCxNQUFNSyxhQUFhTCxtQkFBT0EsQ0FBQywyRUFBWTtBQUN2QyxNQUFNTSxlQUFlTixtQkFBT0EsQ0FBQywrRUFBYztBQUMzQyxZQUFZLEdBQ1osMkRBQTJEO0FBQzNELE1BQU1PLHVCQUF1QjtBQUM3QiwyQ0FBMkM7QUFDM0MsTUFBTUMscUJBQXFCO0FBQzNCLDZDQUE2QztBQUM3QyxNQUFNQyw2QkFBNkI7QUFDbkMsMkNBQTJDO0FBQzNDLElBQUlDLFVBQVU7QUFDZDs7O0NBR0MsR0FDRCxNQUFNWix3QkFBd0JPLFdBQVdNLFFBQVE7SUFDN0M7O0tBRUMsR0FDREMsWUFBWUMsY0FBYyxDQUFFO1FBQ3hCLEtBQUs7UUFDTCxJQUFJLENBQUNDLFVBQVUsR0FBR0Qsa0JBQWtCO1lBQUVFLEtBQUs7UUFBRztJQUNsRDtJQUNBOzs7S0FHQyxHQUNEQyxTQUFTO1FBQ0wsT0FBT3BELFVBQVUsSUFBSSxFQUFFLEtBQUssR0FBRyxLQUFLLEdBQUc7WUFDbkMsT0FBTyxJQUFJLENBQUNxRCxXQUFXLENBQUMsVUFBVSxFQUFFO1FBQ3hDO0lBQ0o7SUFDQTs7Ozs7S0FLQyxHQUNEQyxnQkFBZ0JDLGlCQUFpQixFQUFFO1FBQy9CLE9BQU92RCxVQUFVLElBQUksRUFBRSxLQUFLLEdBQUcsS0FBSyxHQUFHO1lBQ25DLE1BQU13RCxRQUFRLENBQUMsR0FBR2xCLGVBQWVtQixpQkFBaUIsRUFBRUY7WUFDcEQsT0FBTyxJQUFJLENBQUNGLFdBQVcsQ0FBQyx1QkFBdUI7Z0JBQUNLLE9BQU9DLElBQUksQ0FBQ0gsT0FBT0ksUUFBUSxDQUFDO2FBQVU7UUFDMUY7SUFDSjtJQUNBOzs7OztLQUtDLEdBQ0RDLHFCQUFxQk4saUJBQWlCLEVBQUU7UUFDcEMsT0FBT3ZELFVBQVUsSUFBSSxFQUFFLEtBQUssR0FBRyxLQUFLLEdBQUc7WUFDbkMsTUFBTXdELFFBQVEsQ0FBQyxHQUFHbEIsZUFBZW1CLGlCQUFpQixFQUFFRjtZQUNwRCxPQUFPLElBQUksQ0FBQ0YsV0FBVyxDQUFDLHNCQUFzQjtnQkFBQ0ssT0FBT0MsSUFBSSxDQUFDSCxPQUFPSSxRQUFRLENBQUM7YUFBVTtRQUN6RjtJQUNKO0lBQ0E7Ozs7OztLQU1DLEdBQ0RFLFNBQVNDLE1BQU0sRUFBRUMsU0FBUyxFQUFFO1FBQ3hCLE9BQU9oRSxVQUFVLElBQUksRUFBRSxLQUFLLEdBQUcsS0FBSyxHQUFHO1lBQ25DLElBQUksT0FBTytELFdBQVcsVUFBVTtnQkFDNUIsT0FBTyxJQUFJLENBQUNFLGNBQWMsQ0FBQ0YsUUFBUUM7WUFDdkMsT0FDSztnQkFDRCxPQUFPLElBQUksQ0FBQ0Usa0JBQWtCLENBQUNILFFBQVFDO1lBQzNDO1FBQ0o7SUFDSjtJQUNBRSxtQkFBbUJILE1BQU0sRUFBRUMsU0FBUyxFQUFFO1FBQ2xDLE9BQU9oRSxVQUFVLElBQUksRUFBRSxLQUFLLEdBQUcsS0FBSyxHQUFHO1lBQ25DLE9BQU8sSUFBSSxDQUFDcUQsV0FBVyxDQUFDLE1BQU07Z0JBQUUsSUFBR2QsUUFBUTRCLFVBQVUsRUFBRUo7Z0JBQVNDO2FBQVU7UUFDOUU7SUFDSjtJQUNBQyxlQUFlRixNQUFNLEVBQUVDLFNBQVMsRUFBRTtRQUM5QixPQUFPaEUsVUFBVSxJQUFJLEVBQUUsS0FBSyxHQUFHLEtBQUssR0FBRztZQUNuQyxPQUFPLElBQUksQ0FBQ3FELFdBQVcsQ0FBQyxNQUFNO2dCQUFDVTtnQkFBUUM7YUFBVTtRQUNyRDtJQUNKO0lBQ0E7Ozs7OztLQU1DLEdBQ0RJLGlCQUFpQkwsTUFBTSxFQUFFQyxTQUFTLEVBQUU7UUFDaEMsT0FBT2hFLFVBQVUsSUFBSSxFQUFFLEtBQUssR0FBRyxLQUFLLEdBQUc7WUFDbkMsSUFBSSxPQUFPK0QsV0FBVyxVQUFVO2dCQUM1QixPQUFPLElBQUksQ0FBQ1YsV0FBVyxDQUFDLDBCQUEwQjtvQkFBQ1U7b0JBQVFDO2lCQUFVO1lBQ3pFLE9BQ0s7Z0JBQ0QsT0FBTyxJQUFJLENBQUNYLFdBQVcsQ0FBQywwQkFBMEI7b0JBQUUsSUFBR2QsUUFBUTRCLFVBQVUsRUFBRUo7b0JBQVNDO2lCQUFVO1lBQ2xHO1FBQ0o7SUFDSjtJQUNBOzs7OztLQUtDLEdBQ0RLLE1BQU0sR0FBR0MsSUFBSSxFQUFFO1FBQ1gsT0FBT3RFLFVBQVUsSUFBSSxFQUFFLEtBQUssR0FBRyxLQUFLLEdBQUc7WUFDbkMsSUFBSWU7WUFDSixJQUFJdUQsS0FBS3hDLE1BQU0sS0FBSyxHQUFHO2dCQUNuQixNQUFNeUMsS0FBS0QsSUFBSSxDQUFDLEVBQUUsRUFBRSxFQUFFRSxRQUFRLEVBQUVDLE9BQU8sRUFBRSxHQUFHRixJQUFJRyxjQUFjdkQsT0FBT29ELElBQUk7b0JBQUM7b0JBQVk7aUJBQVU7Z0JBQ2hHeEQsU0FBUyxNQUFNLElBQUksQ0FBQ3NDLFdBQVcsQ0FBQyxTQUFTOUIsT0FBT29ELE1BQU0sQ0FBQ3BELE9BQU9vRCxNQUFNLENBQUMsQ0FBQyxHQUFHRCxjQUFjO29CQUFFRixVQUFVQSxZQUFZQztnQkFBUTtZQUMzSCxPQUNLO2dCQUNELE1BQU0sQ0FBQ0csTUFBTUMsS0FBSyxHQUFHUDtnQkFDckJ2RCxTQUFTLE1BQU0sSUFBSSxDQUFDc0MsV0FBVyxDQUFDLFNBQVM7b0JBQUN1QjtvQkFBTUM7aUJBQUs7WUFDekQ7WUFDQSxJQUFJOUQsVUFBVUEsT0FBTytELEtBQUssRUFBRTtnQkFDeEIsTUFBTSxJQUFJekMsUUFBUTBDLFVBQVUsQ0FBQyxDQUFDLGlCQUFpQixFQUFFaEUsT0FBTytELEtBQUssQ0FBQyxHQUFHLEVBQUVFLEtBQUtDLFNBQVMsQ0FBQ2xFLFFBQVEsTUFBTSxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUdvQixRQUFRK0MsNEJBQTRCLEVBQUVuRSxPQUFPK0QsS0FBSyxFQUFFL0QsT0FBTytELEtBQUssQ0FBQ0ssSUFBSTtZQUNuTDtZQUNBLE9BQU9wRTtRQUNYO0lBQ0o7SUFDQTs7Ozs7O0tBTUMsR0FDRHFFLE1BQU1DLFVBQVUsRUFBRTtRQUNkLE9BQU9yRixVQUFVLElBQUksRUFBRSxLQUFLLEdBQUcsS0FBSyxHQUFHO1lBQ25DLE1BQU0sRUFBRXNGLFFBQVEsRUFBRSxHQUFHRDtZQUNyQixNQUFNLEVBQUVaLE9BQU8sRUFBRSxHQUFHWTtZQUNwQixPQUFPLElBQUksQ0FBQ2hDLFdBQVcsQ0FBQyxTQUFTO2dCQUFFbUIsVUFBVUM7Z0JBQVNhO1lBQVM7UUFDbkU7SUFDSjtJQUNBOzs7O0tBSUMsR0FDREMsYUFBYUYsVUFBVSxFQUFFO1FBQ3JCLE9BQU9yRixVQUFVLElBQUksRUFBRSxLQUFLLEdBQUcsS0FBSyxHQUFHO1lBQ25DLE1BQU0sRUFBRXNGLFFBQVEsRUFBRSxHQUFHRDtZQUNyQixNQUFNLEVBQUVaLE9BQU8sRUFBRSxHQUFHWTtZQUNwQixPQUFPLElBQUksQ0FBQ2hDLFdBQVcsQ0FBQyxpQ0FBaUM7Z0JBQUVtQixVQUFVQztnQkFBU2E7WUFBUztRQUMzRjtJQUNKO0lBQ0E7Ozs7O0tBS0MsR0FDREUsTUFBTUMsT0FBTyxFQUFFO1FBQ1gsT0FBT3pGLFVBQVUsSUFBSSxFQUFFLEtBQUssR0FBRyxLQUFLLEdBQUc7WUFDbkMsT0FBTyxJQUFJLENBQUNxRCxXQUFXLENBQUMsU0FBUztnQkFBQ29DO2FBQVE7UUFDOUM7SUFDSjtJQUNBOzs7OztLQUtDLEdBQ0RDLFdBQVdqQixPQUFPLEVBQUU7UUFDaEIsT0FBT3pFLFVBQVUsSUFBSSxFQUFFLEtBQUssR0FBRyxLQUFLLEdBQUc7WUFDbkMsT0FBTyxJQUFJLENBQUNxRCxXQUFXLENBQUMsY0FBYztnQkFBQ29CO2FBQVE7UUFDbkQ7SUFDSjtJQUNBOzs7O0tBSUMsR0FDRGtCLDRCQUE0QkMsY0FBYyxFQUFFO1FBQ3hDLE9BQU81RixVQUFVLElBQUksRUFBRSxLQUFLLEdBQUcsS0FBSyxHQUFHO1lBQ25DLE1BQU11RSxLQUFLcUIsZ0JBQWdCLEVBQUVuQixPQUFPLEVBQUUsR0FBR0YsSUFBSUcsY0FBY3ZELE9BQU9vRCxJQUFJO2dCQUFDO2FBQVU7WUFDakYsT0FBTyxNQUFNLElBQUksQ0FBQ2xCLFdBQVcsQ0FBQyxnQ0FBZ0M5QixPQUFPb0QsTUFBTSxDQUFDcEQsT0FBT29ELE1BQU0sQ0FBQyxDQUFDLEdBQUdELGNBQWM7Z0JBQUVGLFVBQVVDO1lBQVE7UUFDcEk7SUFDSjtJQUNBOzs7S0FHQyxHQUNEb0IsaUJBQWlCQyxPQUFPLEVBQUU7UUFDdEIsT0FBTzlGLFVBQVUsSUFBSSxFQUFFLEtBQUssR0FBRyxLQUFLLEdBQUc7WUFDbkMsT0FBTyxNQUFNLElBQUksQ0FBQ3FELFdBQVcsQ0FBQyxtQ0FBbUN5QztRQUNyRTtJQUNKO0lBQ0E7Ozs7OztLQU1DLEdBQ0RDLHFCQUFxQkQsT0FBTyxFQUFFO1FBQzFCLE9BQU85RixVQUFVLElBQUksRUFBRSxLQUFLLEdBQUcsS0FBSyxHQUFHO1lBQ25DLE9BQU8sTUFBTSxJQUFJLENBQUNxRCxXQUFXLENBQUMsMkJBQTJCeUM7UUFDN0Q7SUFDSjtJQUNBOzs7O0tBSUMsR0FDREUsaUJBQWlCQyxjQUFjLEVBQUVaLFVBQVUsRUFBRTtRQUN6QyxPQUFPckYsVUFBVSxJQUFJLEVBQUUsS0FBSyxHQUFHLEtBQUssR0FBRztZQUNuQyxNQUFNLEVBQUVzRixRQUFRLEVBQUUsR0FBR0Q7WUFDckIsTUFBTSxFQUFFWixPQUFPLEVBQUUsR0FBR1k7WUFDcEIsT0FBTyxJQUFJLENBQUNoQyxXQUFXLENBQUMsd0JBQXdCO2dCQUM1QzZDLGNBQWM7Z0JBQ2RDLGFBQWFGO2dCQUNiekIsVUFBVUM7Z0JBQ1ZhO1lBQ0o7UUFDSjtJQUNKO0lBQ0E7Ozs7O0tBS0MsR0FDRGMsdUJBQXVCQyxjQUFjLEVBQUVoQixVQUFVLEVBQUU7UUFDL0MsT0FBT3JGLFVBQVUsSUFBSSxFQUFFLEtBQUssR0FBRyxLQUFLLEdBQUc7WUFDbkMsTUFBTSxFQUFFc0YsUUFBUSxFQUFFLEdBQUdEO1lBQ3JCLE1BQU0sRUFBRVosT0FBTyxFQUFFLEdBQUdZO1lBQ3BCLE9BQU8sSUFBSSxDQUFDaEMsV0FBVyxDQUFDLHdCQUF3QjtnQkFDNUM2QyxjQUFjO2dCQUNkSSxNQUFNRDtnQkFDTjdCLFVBQVVDO2dCQUNWYTtZQUNKO1FBQ0o7SUFDSjtJQUNBOzs7OztLQUtDLEdBQ0RpQixlQUFlTixjQUFjLEVBQUVaLFVBQVUsRUFBRTtRQUN2QyxPQUFPckYsVUFBVSxJQUFJLEVBQUUsS0FBSyxHQUFHLEtBQUssR0FBRztZQUNuQyxNQUFNLEVBQUVzRixRQUFRLEVBQUUsR0FBR0Q7WUFDckIsTUFBTSxFQUFFWixPQUFPLEVBQUUsR0FBR1k7WUFDcEIsT0FBTyxJQUFJLENBQUNoQyxXQUFXLENBQUMsd0JBQXdCO2dCQUM1QzZDLGNBQWM7Z0JBQ2RDLGFBQWFGO2dCQUNiekIsVUFBVUM7Z0JBQ1ZhO1lBQ0o7UUFDSjtJQUNKO0lBQ0E7Ozs7OztLQU1DLEdBQ0RrQixxQkFBcUJQLGNBQWMsRUFBRVosVUFBVSxFQUFFb0IsWUFBWSxFQUFFLEVBQUU7UUFDN0QsT0FBT3pHLFVBQVUsSUFBSSxFQUFFLEtBQUssR0FBRyxLQUFLLEdBQUc7WUFDbkMsTUFBTSxFQUFFc0YsUUFBUSxFQUFFLEdBQUdEO1lBQ3JCLE1BQU0sRUFBRVosT0FBTyxFQUFFLEdBQUdZO1lBQ3BCLE9BQU8sSUFBSSxDQUFDaEMsV0FBVyxDQUFDLHdCQUF3QjtnQkFDNUM2QyxjQUFjO2dCQUNkQyxhQUFhRjtnQkFDYlMsbUJBQW1CRDtnQkFDbkJqQyxVQUFVQztnQkFDVmE7WUFDSjtRQUNKO0lBQ0o7SUFDQTs7Ozs7O0tBTUMsR0FDRHFCLG9CQUFvQlYsY0FBYyxFQUFFWixVQUFVLEVBQUU7UUFDNUMsT0FBT3JGLFVBQVUsSUFBSSxFQUFFLEtBQUssR0FBRyxLQUFLLEdBQUc7WUFDbkMsTUFBTSxFQUFFc0YsUUFBUSxFQUFFLEdBQUdEO1lBQ3JCLE1BQU0sRUFBRVosT0FBTyxFQUFFLEdBQUdZO1lBQ3BCLE9BQU8sSUFBSSxDQUFDaEMsV0FBVyxDQUFDLHdCQUF3QjtnQkFDNUM2QyxjQUFjO2dCQUNkQyxhQUFhRjtnQkFDYnpCLFVBQVVDO2dCQUNWYTtZQUNKO1FBQ0o7SUFDSjtJQUNBOzs7OztLQUtDLEdBQ0RzQixTQUFTbkMsT0FBTyxFQUFFO1FBQ2QsT0FBT3pFLFVBQVUsSUFBSSxFQUFFLEtBQUssR0FBRyxLQUFLLEdBQUc7WUFDbkMsT0FBTyxNQUFNLElBQUksQ0FBQ3FELFdBQVcsQ0FBQyxhQUFhO2dCQUFDb0I7YUFBUTtRQUN4RDtJQUNKO0lBQ0E7Ozs7O0tBS0MsR0FDRHBCLFlBQVl3RCxNQUFNLEVBQUVDLE1BQU0sRUFBRTtRQUN4QixPQUFPOUcsVUFBVSxJQUFJLEVBQUUsS0FBSyxHQUFHLEtBQUssR0FBRztZQUNuQyxNQUFNK0csV0FBVyxNQUFNLENBQUMsR0FBR3ZFLHNCQUFzQndFLGtCQUFrQixFQUFFcEUsb0JBQW9CRCxzQkFBc0JFLDRCQUE0QixJQUFNN0MsVUFBVSxJQUFJLEVBQUUsS0FBSyxHQUFHLEtBQUssR0FBRztvQkFDN0ssSUFBSTt3QkFDQSxNQUFNOEYsVUFBVTs0QkFDWmU7NEJBQ0FDOzRCQUNBRyxJQUFLbkU7NEJBQ0xvRSxTQUFTO3dCQUNiO3dCQUNBLE1BQU1ILFdBQVcsTUFBTSxDQUFDLEdBQUdyRSxhQUFheUUsU0FBUyxFQUFFLElBQUksQ0FBQ2pFLFVBQVUsRUFBRThCLEtBQUtDLFNBQVMsQ0FBQ2E7d0JBQ25GLElBQUlpQixTQUFTakMsS0FBSyxFQUFFOzRCQUNoQixJQUFJLE9BQU9pQyxTQUFTakMsS0FBSyxDQUFDRCxJQUFJLEtBQUssVUFBVTtnQ0FDekMsSUFBSSxPQUFPa0MsU0FBU2pDLEtBQUssQ0FBQ0QsSUFBSSxDQUFDdUMsYUFBYSxLQUFLLFlBQVksT0FBT0wsU0FBU2pDLEtBQUssQ0FBQ0QsSUFBSSxDQUFDd0MsVUFBVSxLQUFLLFVBQVU7b0NBQzdHLHVIQUF1SDtvQ0FDdkgsTUFBTSxJQUFJaEYsUUFBUTBDLFVBQVUsQ0FBQ2dDLFNBQVNqQyxLQUFLLENBQUNELElBQUksQ0FBQ3VDLGFBQWEsRUFBRUwsU0FBU2pDLEtBQUssQ0FBQ0QsSUFBSSxDQUFDd0MsVUFBVTtnQ0FDbEc7Z0NBQ0EsTUFBTSxDQUFDLEdBQUdsRixRQUFRbUYsYUFBYSxFQUFFUCxTQUFTakMsS0FBSyxDQUFDRCxJQUFJOzRCQUN4RCxPQUNLO2dDQUNELE1BQU0wQyxlQUFlLENBQUMsQ0FBQyxFQUFFUixTQUFTakMsS0FBSyxDQUFDMEMsSUFBSSxDQUFDLEVBQUUsRUFBRVQsU0FBU2pDLEtBQUssQ0FBQzJDLE9BQU8sQ0FBQyxFQUFFLEVBQUVWLFNBQVNqQyxLQUFLLENBQUNELElBQUksQ0FBQyxDQUFDO2dDQUNqRyxnRkFBZ0Y7Z0NBQ2hGLG9GQUFvRjtnQ0FDcEYsSUFBSWtDLFNBQVNqQyxLQUFLLENBQUNELElBQUksS0FBSyxhQUFhMEMsYUFBYUcsUUFBUSxDQUFDLG9CQUN4REgsYUFBYUcsUUFBUSxDQUFDLHdCQUF3QjtvQ0FDakQsTUFBTSxJQUFJckYsUUFBUTBDLFVBQVUsQ0FBQ3dDLGNBQWM7Z0NBQy9DO2dDQUNBLE1BQU0sSUFBSWxGLFFBQVEwQyxVQUFVLENBQUN3QyxjQUFjLENBQUMsR0FBR3BGLFFBQVErQyw0QkFBNEIsRUFBRTZCLFNBQVNqQyxLQUFLLENBQUNELElBQUksRUFBRWtDLFNBQVNqQyxLQUFLLENBQUNLLElBQUk7NEJBQ2pJO3dCQUNKO3dCQUNBLDJDQUEyQzt3QkFDM0MsT0FBTzRCO29CQUNYLEVBQ0EsT0FBT2pDLE9BQU87d0JBQ1YsSUFBSUEsTUFBTTZDLElBQUksS0FBSyxnQkFBZ0I7NEJBQy9CLElBQUksQ0FBQ0MsUUFBUUMsR0FBRyxDQUFDLGVBQWUsRUFBRTtnQ0FDOUJDLFFBQVFDLElBQUksQ0FBQyxDQUFDLG9CQUFvQixFQUFFbEIsT0FBTyxvQkFBb0IsQ0FBQyxFQUFFQzs0QkFDdEU7NEJBQ0EsT0FBTzt3QkFDWDt3QkFDQSxNQUFNaEM7b0JBQ1Y7Z0JBQ0o7WUFDQSxNQUFNLEVBQUUvRCxNQUFNLEVBQUUsR0FBR2dHO1lBQ25CLHFCQUFxQjtZQUNyQixTQUFTO1lBQ1Qsd0NBQXdDO1lBQ3hDLDBFQUEwRTtZQUMxRSxJQUFJLE9BQU9oRyxXQUFXLGFBQWE7Z0JBQy9CLE1BQU0sSUFBSXNCLFFBQVEwQyxVQUFVLENBQUMsQ0FBQyxTQUFTLEVBQUVwQyxxQkFBcUIseUJBQXlCLEVBQUVrRSxPQUFPLENBQUMsQ0FBQyxFQUFFO1lBQ3hHO1lBQ0EsT0FBTzlGO1FBQ1g7SUFDSjtBQUNKO0FBQ0FrQix1QkFBdUIsR0FBR0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pLWFtLW5lYXJieS8uL25vZGVfbW9kdWxlcy9AbmVhci1qcy9wcm92aWRlcnMvbGliL2pzb24tcnBjLXByb3ZpZGVyLmpzP2Y3NmIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19hd2FpdGVyID0gKHRoaXMgJiYgdGhpcy5fX2F3YWl0ZXIpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcbiAgICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xuICAgIH0pO1xufTtcbnZhciBfX3Jlc3QgPSAodGhpcyAmJiB0aGlzLl9fcmVzdCkgfHwgZnVuY3Rpb24gKHMsIGUpIHtcbiAgICB2YXIgdCA9IHt9O1xuICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSAmJiBlLmluZGV4T2YocCkgPCAwKVxuICAgICAgICB0W3BdID0gc1twXTtcbiAgICBpZiAocyAhPSBudWxsICYmIHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSBcImZ1bmN0aW9uXCIpXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBwID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzKTsgaSA8IHAubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChlLmluZGV4T2YocFtpXSkgPCAwICYmIE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzLCBwW2ldKSlcbiAgICAgICAgICAgICAgICB0W3BbaV1dID0gc1twW2ldXTtcbiAgICAgICAgfVxuICAgIHJldHVybiB0O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuSnNvblJwY1Byb3ZpZGVyID0gdm9pZCAwO1xuLyoqXG4gKiBAbW9kdWxlXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoaXMgbW9kdWxlIGNvbnRhaW5zIHRoZSB7QGxpbmsgSnNvblJwY1Byb3ZpZGVyfSBjbGllbnQgY2xhc3NcbiAqIHdoaWNoIGNhbiBiZSB1c2VkIHRvIGludGVyYWN0IHdpdGggdGhlIFtORUFSIFJQQyBBUEldKGh0dHBzOi8vZG9jcy5uZWFyLm9yZy9hcGkvcnBjL2ludHJvZHVjdGlvbikuXG4gKiBAc2VlIHtAbGluayBwcm92aWRlcnMvcHJvdmlkZXIgfCBwcm92aWRlcnN9IGZvciBhIGxpc3Qgb2YgcmVxdWVzdCBhbmQgcmVzcG9uc2UgdHlwZXNcbiAqL1xuY29uc3QgdXRpbHNfMSA9IHJlcXVpcmUoXCJAbmVhci1qcy91dGlsc1wiKTtcbmNvbnN0IHR5cGVzXzEgPSByZXF1aXJlKFwiQG5lYXItanMvdHlwZXNcIik7XG5jb25zdCB0cmFuc2FjdGlvbnNfMSA9IHJlcXVpcmUoXCJAbmVhci1qcy90cmFuc2FjdGlvbnNcIik7XG5jb25zdCBib3JzaF8xID0gcmVxdWlyZShcImJvcnNoXCIpO1xuY29uc3QgZXhwb25lbnRpYWxfYmFja29mZl8xID0gcmVxdWlyZShcIi4vZXhwb25lbnRpYWwtYmFja29mZlwiKTtcbmNvbnN0IHByb3ZpZGVyXzEgPSByZXF1aXJlKFwiLi9wcm92aWRlclwiKTtcbmNvbnN0IGZldGNoX2pzb25fMSA9IHJlcXVpcmUoXCIuL2ZldGNoX2pzb25cIik7XG4vKiogQGhpZGRlbiAqL1xuLy8gRGVmYXVsdCBudW1iZXIgb2YgcmV0cmllcyBiZWZvcmUgZ2l2aW5nIHVwIG9uIGEgcmVxdWVzdC5cbmNvbnN0IFJFUVVFU1RfUkVUUllfTlVNQkVSID0gMTI7XG4vLyBEZWZhdWx0IHdhaXQgdW50aWwgbmV4dCByZXRyeSBpbiBtaWxsaXMuXG5jb25zdCBSRVFVRVNUX1JFVFJZX1dBSVQgPSA1MDA7XG4vLyBFeHBvbmVudGlhbCBiYWNrIG9mZiBmb3Igd2FpdGluZyB0byByZXRyeS5cbmNvbnN0IFJFUVVFU1RfUkVUUllfV0FJVF9CQUNLT0ZGID0gMS41O1xuLy8vIEtlZXAgaWRzIHVuaXF1ZSBhY3Jvc3MgYWxsIGNvbm5lY3Rpb25zLlxubGV0IF9uZXh0SWQgPSAxMjM7XG4vKipcbiAqIENsaWVudCBjbGFzcyB0byBpbnRlcmFjdCB3aXRoIHRoZSBbTkVBUiBSUEMgQVBJXShodHRwczovL2RvY3MubmVhci5vcmcvYXBpL3JwYy9pbnRyb2R1Y3Rpb24pLlxuICogQHNlZSBbaHR0cHM6Ly9naXRodWIuY29tL25lYXIvbmVhcmNvcmUvdHJlZS9tYXN0ZXIvY2hhaW4vanNvbnJwY10oaHR0cHM6Ly9naXRodWIuY29tL25lYXIvbmVhcmNvcmUvdHJlZS9tYXN0ZXIvY2hhaW4vanNvbnJwYylcbiAqL1xuY2xhc3MgSnNvblJwY1Byb3ZpZGVyIGV4dGVuZHMgcHJvdmlkZXJfMS5Qcm92aWRlciB7XG4gICAgLyoqXG4gICAgICogQHBhcmFtIGNvbm5lY3Rpb25JbmZvIENvbm5lY3Rpb24gaW5mb1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGNvbm5lY3Rpb25JbmZvKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuY29ubmVjdGlvbiA9IGNvbm5lY3Rpb25JbmZvIHx8IHsgdXJsOiAnJyB9O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBSUEMncyBzdGF0dXNcbiAgICAgKiBAc2VlIFtodHRwczovL2RvY3MubmVhci5vcmcvZG9jcy9kZXZlbG9wL2Zyb250LWVuZC9ycGMjZ2VuZXJhbC12YWxpZGF0b3Itc3RhdHVzXShodHRwczovL2RvY3MubmVhci5vcmcvZG9jcy9kZXZlbG9wL2Zyb250LWVuZC9ycGMjZ2VuZXJhbC12YWxpZGF0b3Itc3RhdHVzKVxuICAgICAqL1xuICAgIHN0YXR1cygpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnNlbmRKc29uUnBjKCdzdGF0dXMnLCBbXSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZW5kcyBhIHNpZ25lZCB0cmFuc2FjdGlvbiB0byB0aGUgUlBDIGFuZCB3YWl0cyB1bnRpbCB0cmFuc2FjdGlvbiBpcyBmdWxseSBjb21wbGV0ZVxuICAgICAqIEBzZWUgW2h0dHBzOi8vZG9jcy5uZWFyLm9yZy9kb2NzL2RldmVsb3AvZnJvbnQtZW5kL3JwYyNzZW5kLXRyYW5zYWN0aW9uLWF3YWl0XShodHRwczovL2RvY3MubmVhci5vcmcvZG9jcy9kZXZlbG9wL2Zyb250LWVuZC9ycGMjZ2VuZXJhbC12YWxpZGF0b3Itc3RhdHVzKVxuICAgICAqXG4gICAgICogQHBhcmFtIHNpZ25lZFRyYW5zYWN0aW9uIFRoZSBzaWduZWQgdHJhbnNhY3Rpb24gYmVpbmcgc2VudFxuICAgICAqL1xuICAgIHNlbmRUcmFuc2FjdGlvbihzaWduZWRUcmFuc2FjdGlvbikge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgY29uc3QgYnl0ZXMgPSAoMCwgdHJhbnNhY3Rpb25zXzEuZW5jb2RlVHJhbnNhY3Rpb24pKHNpZ25lZFRyYW5zYWN0aW9uKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnNlbmRKc29uUnBjKCdicm9hZGNhc3RfdHhfY29tbWl0JywgW0J1ZmZlci5mcm9tKGJ5dGVzKS50b1N0cmluZygnYmFzZTY0JyldKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNlbmRzIGEgc2lnbmVkIHRyYW5zYWN0aW9uIHRvIHRoZSBSUEMgYW5kIGltbWVkaWF0ZWx5IHJldHVybnMgdHJhbnNhY3Rpb24gaGFzaFxuICAgICAqIFNlZSBbZG9jcyBmb3IgbW9yZSBpbmZvXShodHRwczovL2RvY3MubmVhci5vcmcvZG9jcy9kZXZlbG9wL2Zyb250LWVuZC9ycGMjc2VuZC10cmFuc2FjdGlvbi1hc3luYylcbiAgICAgKiBAcGFyYW0gc2lnbmVkVHJhbnNhY3Rpb24gVGhlIHNpZ25lZCB0cmFuc2FjdGlvbiBiZWluZyBzZW50XG4gICAgICogQHJldHVybnMge1Byb21pc2U8RmluYWxFeGVjdXRpb25PdXRjb21lPn1cbiAgICAgKi9cbiAgICBzZW5kVHJhbnNhY3Rpb25Bc3luYyhzaWduZWRUcmFuc2FjdGlvbikge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgY29uc3QgYnl0ZXMgPSAoMCwgdHJhbnNhY3Rpb25zXzEuZW5jb2RlVHJhbnNhY3Rpb24pKHNpZ25lZFRyYW5zYWN0aW9uKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnNlbmRKc29uUnBjKCdicm9hZGNhc3RfdHhfYXN5bmMnLCBbQnVmZmVyLmZyb20oYnl0ZXMpLnRvU3RyaW5nKCdiYXNlNjQnKV0pO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0cyBhIHRyYW5zYWN0aW9uJ3Mgc3RhdHVzIGZyb20gdGhlIFJQQ1xuICAgICAqIEBzZWUgW2h0dHBzOi8vZG9jcy5uZWFyLm9yZy9kb2NzL2RldmVsb3AvZnJvbnQtZW5kL3JwYyN0cmFuc2FjdGlvbi1zdGF0dXNdKGh0dHBzOi8vZG9jcy5uZWFyLm9yZy9kb2NzL2RldmVsb3AvZnJvbnQtZW5kL3JwYyNnZW5lcmFsLXZhbGlkYXRvci1zdGF0dXMpXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdHhIYXNoIEEgdHJhbnNhY3Rpb24gaGFzaCBhcyBlaXRoZXIgYSBVaW50OEFycmF5IG9yIGEgYmFzZTU4IGVuY29kZWQgc3RyaW5nXG4gICAgICogQHBhcmFtIGFjY291bnRJZCBUaGUgTkVBUiBhY2NvdW50IHRoYXQgc2lnbmVkIHRoZSB0cmFuc2FjdGlvblxuICAgICAqL1xuICAgIHR4U3RhdHVzKHR4SGFzaCwgYWNjb3VudElkKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHR4SGFzaCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy50eFN0YXR1c1N0cmluZyh0eEhhc2gsIGFjY291bnRJZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy50eFN0YXR1c1VpbnQ4QXJyYXkodHhIYXNoLCBhY2NvdW50SWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgdHhTdGF0dXNVaW50OEFycmF5KHR4SGFzaCwgYWNjb3VudElkKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zZW5kSnNvblJwYygndHgnLCBbKDAsIGJvcnNoXzEuYmFzZUVuY29kZSkodHhIYXNoKSwgYWNjb3VudElkXSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICB0eFN0YXR1c1N0cmluZyh0eEhhc2gsIGFjY291bnRJZCkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2VuZEpzb25ScGMoJ3R4JywgW3R4SGFzaCwgYWNjb3VudElkXSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXRzIGEgdHJhbnNhY3Rpb24ncyBzdGF0dXMgZnJvbSB0aGUgUlBDIHdpdGggcmVjZWlwdHNcbiAgICAgKiBTZWUgW2RvY3MgZm9yIG1vcmUgaW5mb10oaHR0cHM6Ly9kb2NzLm5lYXIub3JnL2RvY3MvZGV2ZWxvcC9mcm9udC1lbmQvcnBjI3RyYW5zYWN0aW9uLXN0YXR1cy13aXRoLXJlY2VpcHRzKVxuICAgICAqIEBwYXJhbSB0eEhhc2ggVGhlIGhhc2ggb2YgdGhlIHRyYW5zYWN0aW9uXG4gICAgICogQHBhcmFtIGFjY291bnRJZCBUaGUgTkVBUiBhY2NvdW50IHRoYXQgc2lnbmVkIHRoZSB0cmFuc2FjdGlvblxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlPEZpbmFsRXhlY3V0aW9uT3V0Y29tZT59XG4gICAgICovXG4gICAgdHhTdGF0dXNSZWNlaXB0cyh0eEhhc2gsIGFjY291bnRJZCkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiB0eEhhc2ggPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2VuZEpzb25ScGMoJ0VYUEVSSU1FTlRBTF90eF9zdGF0dXMnLCBbdHhIYXNoLCBhY2NvdW50SWRdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnNlbmRKc29uUnBjKCdFWFBFUklNRU5UQUxfdHhfc3RhdHVzJywgWygwLCBib3JzaF8xLmJhc2VFbmNvZGUpKHR4SGFzaCksIGFjY291bnRJZF0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUXVlcnkgdGhlIFJQQyBieSBwYXNzaW5nIGFuIHtAbGluayBwcm92aWRlcnMvcHJvdmlkZXIhUnBjUXVlcnlSZXF1ZXN0fVxuICAgICAqIEBzZWUgW2h0dHBzOi8vZG9jcy5uZWFyLm9yZy9hcGkvcnBjL2NvbnRyYWN0c10oaHR0cHM6Ly9kb2NzLm5lYXIub3JnL2FwaS9ycGMvY29udHJhY3RzKVxuICAgICAqXG4gICAgICogQHR5cGVQYXJhbSBUIHRoZSBzaGFwZSBvZiB0aGUgcmV0dXJuZWQgcXVlcnkgcmVzcG9uc2VcbiAgICAgKi9cbiAgICBxdWVyeSguLi5hcmdzKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICBsZXQgcmVzdWx0O1xuICAgICAgICAgICAgaWYgKGFyZ3MubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgX2EgPSBhcmdzWzBdLCB7IGJsb2NrX2lkLCBibG9ja0lkIH0gPSBfYSwgb3RoZXJQYXJhbXMgPSBfX3Jlc3QoX2EsIFtcImJsb2NrX2lkXCIsIFwiYmxvY2tJZFwiXSk7XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0geWllbGQgdGhpcy5zZW5kSnNvblJwYygncXVlcnknLCBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIG90aGVyUGFyYW1zKSwgeyBibG9ja19pZDogYmxvY2tfaWQgfHwgYmxvY2tJZCB9KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCBbcGF0aCwgZGF0YV0gPSBhcmdzO1xuICAgICAgICAgICAgICAgIHJlc3VsdCA9IHlpZWxkIHRoaXMuc2VuZEpzb25ScGMoJ3F1ZXJ5JywgW3BhdGgsIGRhdGFdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChyZXN1bHQgJiYgcmVzdWx0LmVycm9yKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IHR5cGVzXzEuVHlwZWRFcnJvcihgUXVlcnlpbmcgZmFpbGVkOiAke3Jlc3VsdC5lcnJvcn0uXFxuJHtKU09OLnN0cmluZ2lmeShyZXN1bHQsIG51bGwsIDIpfWAsICgwLCB1dGlsc18xLmdldEVycm9yVHlwZUZyb21FcnJvck1lc3NhZ2UpKHJlc3VsdC5lcnJvciwgcmVzdWx0LmVycm9yLm5hbWUpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBRdWVyeSBmb3IgYmxvY2sgaW5mbyBmcm9tIHRoZSBSUENcbiAgICAgKiBwYXNzIGJsb2NrX2lkIE9SIGZpbmFsaXR5IGFzIGJsb2NrUXVlcnksIG5vdCBib3RoXG4gICAgICogQHNlZSBbaHR0cHM6Ly9kb2NzLm5lYXIub3JnL2FwaS9ycGMvYmxvY2stY2h1bmtdKGh0dHBzOi8vZG9jcy5uZWFyLm9yZy9hcGkvcnBjL2Jsb2NrLWNodW5rKVxuICAgICAqXG4gICAgICogQHBhcmFtIGJsb2NrUXVlcnkge0BsaW5rIHByb3ZpZGVycy9wcm92aWRlciFCbG9ja1JlZmVyZW5jZX0gKHBhc3NpbmcgYSB7QGxpbmsgcHJvdmlkZXJzL3Byb3ZpZGVyIUJsb2NrSWR9IGlzIGRlcHJlY2F0ZWQpXG4gICAgICovXG4gICAgYmxvY2soYmxvY2tRdWVyeSkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgY29uc3QgeyBmaW5hbGl0eSB9ID0gYmxvY2tRdWVyeTtcbiAgICAgICAgICAgIGNvbnN0IHsgYmxvY2tJZCB9ID0gYmxvY2tRdWVyeTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnNlbmRKc29uUnBjKCdibG9jaycsIHsgYmxvY2tfaWQ6IGJsb2NrSWQsIGZpbmFsaXR5IH0pO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUXVlcnkgY2hhbmdlcyBpbiBibG9jayBmcm9tIHRoZSBSUENcbiAgICAgKiBwYXNzIGJsb2NrX2lkIE9SIGZpbmFsaXR5IGFzIGJsb2NrUXVlcnksIG5vdCBib3RoXG4gICAgICogQHNlZSBbaHR0cHM6Ly9kb2NzLm5lYXIub3JnL2FwaS9ycGMvYmxvY2stY2h1bmtdKGh0dHBzOi8vZG9jcy5uZWFyLm9yZy9hcGkvcnBjL2Jsb2NrLWNodW5rKVxuICAgICAqL1xuICAgIGJsb2NrQ2hhbmdlcyhibG9ja1F1ZXJ5KSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICBjb25zdCB7IGZpbmFsaXR5IH0gPSBibG9ja1F1ZXJ5O1xuICAgICAgICAgICAgY29uc3QgeyBibG9ja0lkIH0gPSBibG9ja1F1ZXJ5O1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2VuZEpzb25ScGMoJ0VYUEVSSU1FTlRBTF9jaGFuZ2VzX2luX2Jsb2NrJywgeyBibG9ja19pZDogYmxvY2tJZCwgZmluYWxpdHkgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBRdWVyaWVzIGZvciBkZXRhaWxzIGFib3V0IGEgc3BlY2lmaWMgY2h1bmsgYXBwZW5kaW5nIGRldGFpbHMgb2YgcmVjZWlwdHMgYW5kIHRyYW5zYWN0aW9ucyB0byB0aGUgc2FtZSBjaHVuayBkYXRhIHByb3ZpZGVkIGJ5IGEgYmxvY2tcbiAgICAgKiBAc2VlIFtodHRwczovL2RvY3MubmVhci5vcmcvYXBpL3JwYy9ibG9jay1jaHVua10oaHR0cHM6Ly9kb2NzLm5lYXIub3JnL2FwaS9ycGMvYmxvY2stY2h1bmspXG4gICAgICpcbiAgICAgKiBAcGFyYW0gY2h1bmtJZCBIYXNoIG9mIGEgY2h1bmsgSUQgb3Igc2hhcmQgSURcbiAgICAgKi9cbiAgICBjaHVuayhjaHVua0lkKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zZW5kSnNvblJwYygnY2h1bmsnLCBbY2h1bmtJZF0pO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUXVlcnkgdmFsaWRhdG9ycyBvZiB0aGUgZXBvY2ggZGVmaW5lZCBieSB0aGUgZ2l2ZW4gYmxvY2sgaWQuXG4gICAgICogQHNlZSBbaHR0cHM6Ly9kb2NzLm5lYXIub3JnL2FwaS9ycGMvbmV0d29yayN2YWxpZGF0aW9uLXN0YXR1c10oaHR0cHM6Ly9kb2NzLm5lYXIub3JnL2FwaS9ycGMvbmV0d29yayN2YWxpZGF0aW9uLXN0YXR1cylcbiAgICAgKlxuICAgICAqIEBwYXJhbSBibG9ja0lkIEJsb2NrIGhhc2ggb3IgaGVpZ2h0LCBvciBudWxsIGZvciBsYXRlc3QuXG4gICAgICovXG4gICAgdmFsaWRhdG9ycyhibG9ja0lkKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zZW5kSnNvblJwYygndmFsaWRhdG9ycycsIFtibG9ja0lkXSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBwcm90b2NvbCBjb25maWcgYXQgYSBibG9jayBmcm9tIFJQQ1xuICAgICAqXG4gICAgICogQHBhcmFtIGJsb2NrUmVmZXJlbmNlIHNwZWNpZmllcyB0aGUgYmxvY2sgdG8gZ2V0IHRoZSBwcm90b2NvbCBjb25maWcgZm9yXG4gICAgICovXG4gICAgZXhwZXJpbWVudGFsX3Byb3RvY29sQ29uZmlnKGJsb2NrUmVmZXJlbmNlKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICBjb25zdCBfYSA9IGJsb2NrUmVmZXJlbmNlLCB7IGJsb2NrSWQgfSA9IF9hLCBvdGhlclBhcmFtcyA9IF9fcmVzdChfYSwgW1wiYmxvY2tJZFwiXSk7XG4gICAgICAgICAgICByZXR1cm4geWllbGQgdGhpcy5zZW5kSnNvblJwYygnRVhQRVJJTUVOVEFMX3Byb3RvY29sX2NvbmZpZycsIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgb3RoZXJQYXJhbXMpLCB7IGJsb2NrX2lkOiBibG9ja0lkIH0pKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldHMgYSBsaWdodCBjbGllbnQgZXhlY3V0aW9uIHByb29mIGZvciB2ZXJpZnlpbmcgZXhlY3V0aW9uIG91dGNvbWVzXG4gICAgICogQHNlZSBbaHR0cHM6Ly9naXRodWIuY29tL25lYXJwcm90b2NvbC9ORVBzL2Jsb2IvbWFzdGVyL3NwZWNzL0NoYWluU3BlYy9MaWdodENsaWVudC5tZCNsaWdodC1jbGllbnQtcHJvb2ZdKGh0dHBzOi8vZ2l0aHViLmNvbS9uZWFycHJvdG9jb2wvTkVQcy9ibG9iL21hc3Rlci9zcGVjcy9DaGFpblNwZWMvTGlnaHRDbGllbnQubWQjbGlnaHQtY2xpZW50LXByb29mKVxuICAgICAqL1xuICAgIGxpZ2h0Q2xpZW50UHJvb2YocmVxdWVzdCkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgcmV0dXJuIHlpZWxkIHRoaXMuc2VuZEpzb25ScGMoJ0VYUEVSSU1FTlRBTF9saWdodF9jbGllbnRfcHJvb2YnLCByZXF1ZXN0KTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIG5leHQgbGlnaHQgY2xpZW50IGJsb2NrIGFzIGZhciBpbiB0aGUgZnV0dXJlIGFzIHBvc3NpYmxlIGZyb20gdGhlIGxhc3Qga25vd24gaGFzaFxuICAgICAqIHRvIHN0aWxsIGJlIGFibGUgdG8gdmFsaWRhdGUgZnJvbSB0aGF0IGhhc2guIFRoaXMgd2lsbCBlaXRoZXIgcmV0dXJuIHRoZSBsYXN0IGJsb2NrIG9mIHRoZVxuICAgICAqIG5leHQgZXBvY2gsIG9yIHRoZSBsYXN0IGZpbmFsIGtub3duIGJsb2NrLlxuICAgICAqXG4gICAgICogQHNlZSBbaHR0cHM6Ly9naXRodWIuY29tL25lYXIvTkVQcy9ibG9iL21hc3Rlci9zcGVjcy9DaGFpblNwZWMvTGlnaHRDbGllbnQubWQjbGlnaHQtY2xpZW50LWJsb2NrXShodHRwczovL2dpdGh1Yi5jb20vbmVhci9ORVBzL2Jsb2IvbWFzdGVyL3NwZWNzL0NoYWluU3BlYy9MaWdodENsaWVudC5tZCNsaWdodC1jbGllbnQtYmxvY2spXG4gICAgICovXG4gICAgbmV4dExpZ2h0Q2xpZW50QmxvY2socmVxdWVzdCkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgcmV0dXJuIHlpZWxkIHRoaXMuc2VuZEpzb25ScGMoJ25leHRfbGlnaHRfY2xpZW50X2Jsb2NrJywgcmVxdWVzdCk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXRzIGFjY2VzcyBrZXkgY2hhbmdlcyBmb3IgYSBnaXZlbiBhcnJheSBvZiBhY2NvdW50SWRzXG4gICAgICogU2VlIFtkb2NzIGZvciBtb3JlIGluZm9dKGh0dHBzOi8vZG9jcy5uZWFyLm9yZy9kb2NzL2RldmVsb3AvZnJvbnQtZW5kL3JwYyN2aWV3LWFjY2Vzcy1rZXktY2hhbmdlcy1hbGwpXG4gICAgICogQHJldHVybnMge1Byb21pc2U8Q2hhbmdlUmVzdWx0Pn1cbiAgICAgKi9cbiAgICBhY2Nlc3NLZXlDaGFuZ2VzKGFjY291bnRJZEFycmF5LCBibG9ja1F1ZXJ5KSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICBjb25zdCB7IGZpbmFsaXR5IH0gPSBibG9ja1F1ZXJ5O1xuICAgICAgICAgICAgY29uc3QgeyBibG9ja0lkIH0gPSBibG9ja1F1ZXJ5O1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2VuZEpzb25ScGMoJ0VYUEVSSU1FTlRBTF9jaGFuZ2VzJywge1xuICAgICAgICAgICAgICAgIGNoYW5nZXNfdHlwZTogJ2FsbF9hY2Nlc3Nfa2V5X2NoYW5nZXMnLFxuICAgICAgICAgICAgICAgIGFjY291bnRfaWRzOiBhY2NvdW50SWRBcnJheSxcbiAgICAgICAgICAgICAgICBibG9ja19pZDogYmxvY2tJZCxcbiAgICAgICAgICAgICAgICBmaW5hbGl0eVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXRzIHNpbmdsZSBhY2Nlc3Mga2V5IGNoYW5nZXMgZm9yIGEgZ2l2ZW4gYXJyYXkgb2YgYWNjZXNzIGtleXNcbiAgICAgKiBwYXNzIGJsb2NrX2lkIE9SIGZpbmFsaXR5IGFzIGJsb2NrUXVlcnksIG5vdCBib3RoXG4gICAgICogU2VlIFtkb2NzIGZvciBtb3JlIGluZm9dKGh0dHBzOi8vZG9jcy5uZWFyLm9yZy9kb2NzL2RldmVsb3AvZnJvbnQtZW5kL3JwYyN2aWV3LWFjY2Vzcy1rZXktY2hhbmdlcy1zaW5nbGUpXG4gICAgICogQHJldHVybnMge1Byb21pc2U8Q2hhbmdlUmVzdWx0Pn1cbiAgICAgKi9cbiAgICBzaW5nbGVBY2Nlc3NLZXlDaGFuZ2VzKGFjY2Vzc0tleUFycmF5LCBibG9ja1F1ZXJ5KSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICBjb25zdCB7IGZpbmFsaXR5IH0gPSBibG9ja1F1ZXJ5O1xuICAgICAgICAgICAgY29uc3QgeyBibG9ja0lkIH0gPSBibG9ja1F1ZXJ5O1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2VuZEpzb25ScGMoJ0VYUEVSSU1FTlRBTF9jaGFuZ2VzJywge1xuICAgICAgICAgICAgICAgIGNoYW5nZXNfdHlwZTogJ3NpbmdsZV9hY2Nlc3Nfa2V5X2NoYW5nZXMnLFxuICAgICAgICAgICAgICAgIGtleXM6IGFjY2Vzc0tleUFycmF5LFxuICAgICAgICAgICAgICAgIGJsb2NrX2lkOiBibG9ja0lkLFxuICAgICAgICAgICAgICAgIGZpbmFsaXR5XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldHMgYWNjb3VudCBjaGFuZ2VzIGZvciBhIGdpdmVuIGFycmF5IG9mIGFjY291bnRJZHNcbiAgICAgKiBwYXNzIGJsb2NrX2lkIE9SIGZpbmFsaXR5IGFzIGJsb2NrUXVlcnksIG5vdCBib3RoXG4gICAgICogU2VlIFtkb2NzIGZvciBtb3JlIGluZm9dKGh0dHBzOi8vZG9jcy5uZWFyLm9yZy9kb2NzL2RldmVsb3AvZnJvbnQtZW5kL3JwYyN2aWV3LWFjY291bnQtY2hhbmdlcylcbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTxDaGFuZ2VSZXN1bHQ+fVxuICAgICAqL1xuICAgIGFjY291bnRDaGFuZ2VzKGFjY291bnRJZEFycmF5LCBibG9ja1F1ZXJ5KSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICBjb25zdCB7IGZpbmFsaXR5IH0gPSBibG9ja1F1ZXJ5O1xuICAgICAgICAgICAgY29uc3QgeyBibG9ja0lkIH0gPSBibG9ja1F1ZXJ5O1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2VuZEpzb25ScGMoJ0VYUEVSSU1FTlRBTF9jaGFuZ2VzJywge1xuICAgICAgICAgICAgICAgIGNoYW5nZXNfdHlwZTogJ2FjY291bnRfY2hhbmdlcycsXG4gICAgICAgICAgICAgICAgYWNjb3VudF9pZHM6IGFjY291bnRJZEFycmF5LFxuICAgICAgICAgICAgICAgIGJsb2NrX2lkOiBibG9ja0lkLFxuICAgICAgICAgICAgICAgIGZpbmFsaXR5XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldHMgY29udHJhY3Qgc3RhdGUgY2hhbmdlcyBmb3IgYSBnaXZlbiBhcnJheSBvZiBhY2NvdW50SWRzXG4gICAgICogcGFzcyBibG9ja19pZCBPUiBmaW5hbGl0eSBhcyBibG9ja1F1ZXJ5LCBub3QgYm90aFxuICAgICAqIE5vdGU6IElmIHlvdSBwYXNzIGEga2V5UHJlZml4IGl0IG11c3QgYmUgYmFzZTY0IGVuY29kZWRcbiAgICAgKiBTZWUgW2RvY3MgZm9yIG1vcmUgaW5mb10oaHR0cHM6Ly9kb2NzLm5lYXIub3JnL2RvY3MvZGV2ZWxvcC9mcm9udC1lbmQvcnBjI3ZpZXctY29udHJhY3Qtc3RhdGUtY2hhbmdlcylcbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTxDaGFuZ2VSZXN1bHQ+fVxuICAgICAqL1xuICAgIGNvbnRyYWN0U3RhdGVDaGFuZ2VzKGFjY291bnRJZEFycmF5LCBibG9ja1F1ZXJ5LCBrZXlQcmVmaXggPSAnJykge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgY29uc3QgeyBmaW5hbGl0eSB9ID0gYmxvY2tRdWVyeTtcbiAgICAgICAgICAgIGNvbnN0IHsgYmxvY2tJZCB9ID0gYmxvY2tRdWVyeTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnNlbmRKc29uUnBjKCdFWFBFUklNRU5UQUxfY2hhbmdlcycsIHtcbiAgICAgICAgICAgICAgICBjaGFuZ2VzX3R5cGU6ICdkYXRhX2NoYW5nZXMnLFxuICAgICAgICAgICAgICAgIGFjY291bnRfaWRzOiBhY2NvdW50SWRBcnJheSxcbiAgICAgICAgICAgICAgICBrZXlfcHJlZml4X2Jhc2U2NDoga2V5UHJlZml4LFxuICAgICAgICAgICAgICAgIGJsb2NrX2lkOiBibG9ja0lkLFxuICAgICAgICAgICAgICAgIGZpbmFsaXR5XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldHMgY29udHJhY3QgY29kZSBjaGFuZ2VzIGZvciBhIGdpdmVuIGFycmF5IG9mIGFjY291bnRJZHNcbiAgICAgKiBwYXNzIGJsb2NrX2lkIE9SIGZpbmFsaXR5IGFzIGJsb2NrUXVlcnksIG5vdCBib3RoXG4gICAgICogTm90ZTogQ2hhbmdlIGlzIHJldHVybmVkIGluIGEgYmFzZTY0IGVuY29kZWQgV0FTTSBmaWxlXG4gICAgICogU2VlIFtkb2NzIGZvciBtb3JlIGluZm9dKGh0dHBzOi8vZG9jcy5uZWFyLm9yZy9kb2NzL2RldmVsb3AvZnJvbnQtZW5kL3JwYyN2aWV3LWNvbnRyYWN0LWNvZGUtY2hhbmdlcylcbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTxDaGFuZ2VSZXN1bHQ+fVxuICAgICAqL1xuICAgIGNvbnRyYWN0Q29kZUNoYW5nZXMoYWNjb3VudElkQXJyYXksIGJsb2NrUXVlcnkpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIGNvbnN0IHsgZmluYWxpdHkgfSA9IGJsb2NrUXVlcnk7XG4gICAgICAgICAgICBjb25zdCB7IGJsb2NrSWQgfSA9IGJsb2NrUXVlcnk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zZW5kSnNvblJwYygnRVhQRVJJTUVOVEFMX2NoYW5nZXMnLCB7XG4gICAgICAgICAgICAgICAgY2hhbmdlc190eXBlOiAnY29udHJhY3RfY29kZV9jaGFuZ2VzJyxcbiAgICAgICAgICAgICAgICBhY2NvdW50X2lkczogYWNjb3VudElkQXJyYXksXG4gICAgICAgICAgICAgICAgYmxvY2tfaWQ6IGJsb2NrSWQsXG4gICAgICAgICAgICAgICAgZmluYWxpdHlcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBnYXMgcHJpY2UgZm9yIGEgc3BlY2lmaWMgYmxvY2tfaGVpZ2h0IG9yIGJsb2NrX2hhc2guXG4gICAgICogQHNlZSBbaHR0cHM6Ly9kb2NzLm5lYXIub3JnL2FwaS9ycGMvZ2FzXShodHRwczovL2RvY3MubmVhci5vcmcvYXBpL3JwYy9nYXMpXG4gICAgICpcbiAgICAgKiBAcGFyYW0gYmxvY2tJZCBCbG9jayBoYXNoIG9yIGhlaWdodCwgb3IgbnVsbCBmb3IgbGF0ZXN0LlxuICAgICAqL1xuICAgIGdhc1ByaWNlKGJsb2NrSWQpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHJldHVybiB5aWVsZCB0aGlzLnNlbmRKc29uUnBjKCdnYXNfcHJpY2UnLCBbYmxvY2tJZF0pO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRGlyZWN0bHkgY2FsbCB0aGUgUlBDIHNwZWNpZnlpbmcgdGhlIG1ldGhvZCBhbmQgcGFyYW1zXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbWV0aG9kIFJQQyBtZXRob2RcbiAgICAgKiBAcGFyYW0gcGFyYW1zIFBhcmFtZXRlcnMgdG8gdGhlIG1ldGhvZFxuICAgICAqL1xuICAgIHNlbmRKc29uUnBjKG1ldGhvZCwgcGFyYW1zKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IHlpZWxkICgwLCBleHBvbmVudGlhbF9iYWNrb2ZmXzEuZXhwb25lbnRpYWxCYWNrb2ZmKShSRVFVRVNUX1JFVFJZX1dBSVQsIFJFUVVFU1RfUkVUUllfTlVNQkVSLCBSRVFVRVNUX1JFVFJZX1dBSVRfQkFDS09GRiwgKCkgPT4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlcXVlc3QgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtZXRob2QsXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJhbXMsXG4gICAgICAgICAgICAgICAgICAgICAgICBpZDogKF9uZXh0SWQrKyksXG4gICAgICAgICAgICAgICAgICAgICAgICBqc29ucnBjOiAnMi4wJ1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IHlpZWxkICgwLCBmZXRjaF9qc29uXzEuZmV0Y2hKc29uKSh0aGlzLmNvbm5lY3Rpb24sIEpTT04uc3RyaW5naWZ5KHJlcXVlc3QpKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLmVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHJlc3BvbnNlLmVycm9yLmRhdGEgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiByZXNwb25zZS5lcnJvci5kYXRhLmVycm9yX21lc3NhZ2UgPT09ICdzdHJpbmcnICYmIHR5cGVvZiByZXNwb25zZS5lcnJvci5kYXRhLmVycm9yX3R5cGUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlmIGVycm9yIGRhdGEgaGFzIGVycm9yX21lc3NhZ2UgYW5kIGVycm9yX3R5cGUgcHJvcGVydGllcywgd2UgY29uc2lkZXIgdGhhdCBub2RlIHJldHVybmVkIGFuIGVycm9yIGluIHRoZSBvbGQgZm9ybWF0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyB0eXBlc18xLlR5cGVkRXJyb3IocmVzcG9uc2UuZXJyb3IuZGF0YS5lcnJvcl9tZXNzYWdlLCByZXNwb25zZS5lcnJvci5kYXRhLmVycm9yX3R5cGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyAoMCwgdXRpbHNfMS5wYXJzZVJwY0Vycm9yKShyZXNwb25zZS5lcnJvci5kYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGVycm9yTWVzc2FnZSA9IGBbJHtyZXNwb25zZS5lcnJvci5jb2RlfV0gJHtyZXNwb25zZS5lcnJvci5tZXNzYWdlfTogJHtyZXNwb25zZS5lcnJvci5kYXRhfWA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTk9URTogQWxsIHRoaXMgaGFja2VyeSBpcyBoYXBwZW5pbmcgYmVjYXVzZSBzdHJ1Y3R1cmVkIGVycm9ycyBub3QgaW1wbGVtZW50ZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBUT0RPOiBGaXggd2hlbiBodHRwczovL2dpdGh1Yi5jb20vbmVhcnByb3RvY29sL25lYXJjb3JlL2lzc3Vlcy8xODM5IGdldHMgcmVzb2x2ZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UuZXJyb3IuZGF0YSA9PT0gJ1RpbWVvdXQnIHx8IGVycm9yTWVzc2FnZS5pbmNsdWRlcygnVGltZW91dCBlcnJvcicpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHx8IGVycm9yTWVzc2FnZS5pbmNsdWRlcygncXVlcnkgaGFzIHRpbWVkIG91dCcpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyB0eXBlc18xLlR5cGVkRXJyb3IoZXJyb3JNZXNzYWdlLCAnVGltZW91dEVycm9yJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyB0eXBlc18xLlR5cGVkRXJyb3IoZXJyb3JNZXNzYWdlLCAoMCwgdXRpbHNfMS5nZXRFcnJvclR5cGVGcm9tRXJyb3JNZXNzYWdlKShyZXNwb25zZS5lcnJvci5kYXRhLCByZXNwb25zZS5lcnJvci5uYW1lKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy8gU3VjY2VzcyB3aGVuIHJlc3BvbnNlLmVycm9yIGlzIG5vdCBleGlzdFxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZXJyb3IudHlwZSA9PT0gJ1RpbWVvdXRFcnJvcicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghcHJvY2Vzcy5lbnZbJ05FQVJfTk9fTE9HUyddKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKGBSZXRyeWluZyByZXF1ZXN0IHRvICR7bWV0aG9kfSBhcyBpdCBoYXMgdGltZWQgb3V0YCwgcGFyYW1zKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIGNvbnN0IHsgcmVzdWx0IH0gPSByZXNwb25zZTtcbiAgICAgICAgICAgIC8vIEZyb20ganNvbnJwYyBzcGVjOlxuICAgICAgICAgICAgLy8gcmVzdWx0XG4gICAgICAgICAgICAvLyAgIFRoaXMgbWVtYmVyIGlzIFJFUVVJUkVEIG9uIHN1Y2Nlc3MuXG4gICAgICAgICAgICAvLyAgIFRoaXMgbWVtYmVyIE1VU1QgTk9UIGV4aXN0IGlmIHRoZXJlIHdhcyBhbiBlcnJvciBpbnZva2luZyB0aGUgbWV0aG9kLlxuICAgICAgICAgICAgaWYgKHR5cGVvZiByZXN1bHQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IHR5cGVzXzEuVHlwZWRFcnJvcihgRXhjZWVkZWQgJHtSRVFVRVNUX1JFVFJZX05VTUJFUn0gYXR0ZW1wdHMgZm9yIHJlcXVlc3QgdG8gJHttZXRob2R9LmAsICdSZXRyaWVzRXhjZWVkZWQnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbmV4cG9ydHMuSnNvblJwY1Byb3ZpZGVyID0gSnNvblJwY1Byb3ZpZGVyO1xuIl0sIm5hbWVzIjpbIl9fYXdhaXRlciIsInRoaXNBcmciLCJfYXJndW1lbnRzIiwiUCIsImdlbmVyYXRvciIsImFkb3B0IiwidmFsdWUiLCJyZXNvbHZlIiwiUHJvbWlzZSIsInJlamVjdCIsImZ1bGZpbGxlZCIsInN0ZXAiLCJuZXh0IiwiZSIsInJlamVjdGVkIiwicmVzdWx0IiwiZG9uZSIsInRoZW4iLCJhcHBseSIsIl9fcmVzdCIsInMiLCJ0IiwicCIsIk9iamVjdCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImluZGV4T2YiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJpIiwibGVuZ3RoIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJKc29uUnBjUHJvdmlkZXIiLCJ1dGlsc18xIiwicmVxdWlyZSIsInR5cGVzXzEiLCJ0cmFuc2FjdGlvbnNfMSIsImJvcnNoXzEiLCJleHBvbmVudGlhbF9iYWNrb2ZmXzEiLCJwcm92aWRlcl8xIiwiZmV0Y2hfanNvbl8xIiwiUkVRVUVTVF9SRVRSWV9OVU1CRVIiLCJSRVFVRVNUX1JFVFJZX1dBSVQiLCJSRVFVRVNUX1JFVFJZX1dBSVRfQkFDS09GRiIsIl9uZXh0SWQiLCJQcm92aWRlciIsImNvbnN0cnVjdG9yIiwiY29ubmVjdGlvbkluZm8iLCJjb25uZWN0aW9uIiwidXJsIiwic3RhdHVzIiwic2VuZEpzb25ScGMiLCJzZW5kVHJhbnNhY3Rpb24iLCJzaWduZWRUcmFuc2FjdGlvbiIsImJ5dGVzIiwiZW5jb2RlVHJhbnNhY3Rpb24iLCJCdWZmZXIiLCJmcm9tIiwidG9TdHJpbmciLCJzZW5kVHJhbnNhY3Rpb25Bc3luYyIsInR4U3RhdHVzIiwidHhIYXNoIiwiYWNjb3VudElkIiwidHhTdGF0dXNTdHJpbmciLCJ0eFN0YXR1c1VpbnQ4QXJyYXkiLCJiYXNlRW5jb2RlIiwidHhTdGF0dXNSZWNlaXB0cyIsInF1ZXJ5IiwiYXJncyIsIl9hIiwiYmxvY2tfaWQiLCJibG9ja0lkIiwib3RoZXJQYXJhbXMiLCJhc3NpZ24iLCJwYXRoIiwiZGF0YSIsImVycm9yIiwiVHlwZWRFcnJvciIsIkpTT04iLCJzdHJpbmdpZnkiLCJnZXRFcnJvclR5cGVGcm9tRXJyb3JNZXNzYWdlIiwibmFtZSIsImJsb2NrIiwiYmxvY2tRdWVyeSIsImZpbmFsaXR5IiwiYmxvY2tDaGFuZ2VzIiwiY2h1bmsiLCJjaHVua0lkIiwidmFsaWRhdG9ycyIsImV4cGVyaW1lbnRhbF9wcm90b2NvbENvbmZpZyIsImJsb2NrUmVmZXJlbmNlIiwibGlnaHRDbGllbnRQcm9vZiIsInJlcXVlc3QiLCJuZXh0TGlnaHRDbGllbnRCbG9jayIsImFjY2Vzc0tleUNoYW5nZXMiLCJhY2NvdW50SWRBcnJheSIsImNoYW5nZXNfdHlwZSIsImFjY291bnRfaWRzIiwic2luZ2xlQWNjZXNzS2V5Q2hhbmdlcyIsImFjY2Vzc0tleUFycmF5Iiwia2V5cyIsImFjY291bnRDaGFuZ2VzIiwiY29udHJhY3RTdGF0ZUNoYW5nZXMiLCJrZXlQcmVmaXgiLCJrZXlfcHJlZml4X2Jhc2U2NCIsImNvbnRyYWN0Q29kZUNoYW5nZXMiLCJnYXNQcmljZSIsIm1ldGhvZCIsInBhcmFtcyIsInJlc3BvbnNlIiwiZXhwb25lbnRpYWxCYWNrb2ZmIiwiaWQiLCJqc29ucnBjIiwiZmV0Y2hKc29uIiwiZXJyb3JfbWVzc2FnZSIsImVycm9yX3R5cGUiLCJwYXJzZVJwY0Vycm9yIiwiZXJyb3JNZXNzYWdlIiwiY29kZSIsIm1lc3NhZ2UiLCJpbmNsdWRlcyIsInR5cGUiLCJwcm9jZXNzIiwiZW52IiwiY29uc29sZSIsIndhcm4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@near-js/providers/lib/json-rpc-provider.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@near-js/providers/lib/provider.js":
/*!*********************************************************!*\
  !*** ./node_modules/@near-js/providers/lib/provider.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/**\n * NEAR RPC API request types and responses\n * @module\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.Provider = void 0;\n/** @hidden */ class Provider {\n}\nexports.Provider = Provider;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG5lYXItanMvcHJvdmlkZXJzL2xpYi9wcm92aWRlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiOzs7Q0FHQyxHQUNEQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsZ0JBQWdCLEdBQUcsS0FBSztBQUN4QixZQUFZLEdBQ1osTUFBTUU7QUFDTjtBQUNBRixnQkFBZ0IsR0FBR0UiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pLWFtLW5lYXJieS8uL25vZGVfbW9kdWxlcy9AbmVhci1qcy9wcm92aWRlcnMvbGliL3Byb3ZpZGVyLmpzPzZiNDUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKipcbiAqIE5FQVIgUlBDIEFQSSByZXF1ZXN0IHR5cGVzIGFuZCByZXNwb25zZXNcbiAqIEBtb2R1bGVcbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Qcm92aWRlciA9IHZvaWQgMDtcbi8qKiBAaGlkZGVuICovXG5jbGFzcyBQcm92aWRlciB7XG59XG5leHBvcnRzLlByb3ZpZGVyID0gUHJvdmlkZXI7XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJQcm92aWRlciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@near-js/providers/lib/provider.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@near-js/signers/lib/in_memory_signer.js":
/*!***************************************************************!*\
  !*** ./node_modules/@near-js/signers/lib/in_memory_signer.js ***!
  \***************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n        });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = this && this.__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.InMemorySigner = void 0;\nconst crypto_1 = __webpack_require__(/*! @near-js/crypto */ \"(ssr)/./node_modules/@near-js/crypto/lib/index.js\");\nconst keystores_1 = __webpack_require__(/*! @near-js/keystores */ \"(ssr)/./node_modules/@near-js/keystores/lib/index.js\");\nconst js_sha256_1 = __importDefault(__webpack_require__(/*! js-sha256 */ \"(ssr)/./node_modules/js-sha256/src/sha256.js\"));\nconst signer_1 = __webpack_require__(/*! ./signer */ \"(ssr)/./node_modules/@near-js/signers/lib/signer.js\");\n/**\n * Signs using in memory key store.\n */ class InMemorySigner extends signer_1.Signer {\n    constructor(keyStore){\n        super();\n        this.keyStore = keyStore;\n    }\n    /**\n     * Creates a single account Signer instance with account, network and keyPair provided.\n     *\n     * Intended to be useful for temporary keys (e.g. claiming a Linkdrop).\n     *\n     * @param networkId The targeted network. (ex. default, betanet, etc…)\n     * @param accountId The NEAR account to assign the key pair to\n     * @param keyPair The keyPair to use for signing\n     */ static fromKeyPair(networkId, accountId, keyPair) {\n        return __awaiter(this, void 0, void 0, function*() {\n            const keyStore = new keystores_1.InMemoryKeyStore();\n            yield keyStore.setKey(networkId, accountId, keyPair);\n            return new InMemorySigner(keyStore);\n        });\n    }\n    /**\n     * Creates a public key for the account given\n     * @param accountId The NEAR account to assign a public key to\n     * @param networkId The targeted network. (ex. default, betanet, etc…)\n     * @returns {Promise<PublicKey>}\n     */ createKey(accountId, networkId) {\n        return __awaiter(this, void 0, void 0, function*() {\n            const keyPair = crypto_1.KeyPair.fromRandom(\"ed25519\");\n            yield this.keyStore.setKey(networkId, accountId, keyPair);\n            return keyPair.getPublicKey();\n        });\n    }\n    /**\n     * Gets the existing public key for a given account\n     * @param accountId The NEAR account to assign a public key to\n     * @param networkId The targeted network. (ex. default, betanet, etc…)\n     * @returns {Promise<PublicKey>} Returns the public key or null if not found\n     */ getPublicKey(accountId, networkId) {\n        return __awaiter(this, void 0, void 0, function*() {\n            const keyPair = yield this.keyStore.getKey(networkId, accountId);\n            if (keyPair === null) {\n                return null;\n            }\n            return keyPair.getPublicKey();\n        });\n    }\n    /**\n     * @param message A message to be signed, typically a serialized transaction\n     * @param accountId the NEAR account signing the message\n     * @param networkId The targeted network. (ex. default, betanet, etc…)\n     * @returns {Promise<Signature>}\n     */ signMessage(message, accountId, networkId) {\n        return __awaiter(this, void 0, void 0, function*() {\n            const hash = new Uint8Array(js_sha256_1.default.sha256.array(message));\n            if (!accountId) {\n                throw new Error(\"InMemorySigner requires provided account id\");\n            }\n            const keyPair = yield this.keyStore.getKey(networkId, accountId);\n            if (keyPair === null) {\n                throw new Error(`Key for ${accountId} not found in ${networkId}`);\n            }\n            return keyPair.sign(hash);\n        });\n    }\n    toString() {\n        return `InMemorySigner(${this.keyStore})`;\n    }\n}\nexports.InMemorySigner = InMemorySigner;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@near-js/signers/lib/in_memory_signer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@near-js/signers/lib/index.js":
/*!****************************************************!*\
  !*** ./node_modules/@near-js/signers/lib/index.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.Signer = exports.InMemorySigner = void 0;\nvar in_memory_signer_1 = __webpack_require__(/*! ./in_memory_signer */ \"(ssr)/./node_modules/@near-js/signers/lib/in_memory_signer.js\");\nObject.defineProperty(exports, \"InMemorySigner\", ({\n    enumerable: true,\n    get: function() {\n        return in_memory_signer_1.InMemorySigner;\n    }\n}));\nvar signer_1 = __webpack_require__(/*! ./signer */ \"(ssr)/./node_modules/@near-js/signers/lib/signer.js\");\nObject.defineProperty(exports, \"Signer\", ({\n    enumerable: true,\n    get: function() {\n        return signer_1.Signer;\n    }\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG5lYXItanMvc2lnbmVycy9saWIvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELGNBQWMsR0FBR0Esc0JBQXNCLEdBQUcsS0FBSztBQUMvQyxJQUFJSSxxQkFBcUJDLG1CQUFPQSxDQUFDLHlGQUFvQjtBQUNyRFAsa0RBQWlEO0lBQUVRLFlBQVk7SUFBTUMsS0FBSztRQUFjLE9BQU9ILG1CQUFtQkQsY0FBYztJQUFFO0FBQUUsQ0FBQyxFQUFDO0FBQ3RJLElBQUlLLFdBQVdILG1CQUFPQSxDQUFDLHFFQUFVO0FBQ2pDUCwwQ0FBeUM7SUFBRVEsWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT0MsU0FBU04sTUFBTTtJQUFFO0FBQUUsQ0FBQyxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaS1hbS1uZWFyYnkvLi9ub2RlX21vZHVsZXMvQG5lYXItanMvc2lnbmVycy9saWIvaW5kZXguanM/NmYxNCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuU2lnbmVyID0gZXhwb3J0cy5Jbk1lbW9yeVNpZ25lciA9IHZvaWQgMDtcbnZhciBpbl9tZW1vcnlfc2lnbmVyXzEgPSByZXF1aXJlKFwiLi9pbl9tZW1vcnlfc2lnbmVyXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiSW5NZW1vcnlTaWduZXJcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGluX21lbW9yeV9zaWduZXJfMS5Jbk1lbW9yeVNpZ25lcjsgfSB9KTtcbnZhciBzaWduZXJfMSA9IHJlcXVpcmUoXCIuL3NpZ25lclwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlNpZ25lclwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gc2lnbmVyXzEuU2lnbmVyOyB9IH0pO1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiU2lnbmVyIiwiSW5NZW1vcnlTaWduZXIiLCJpbl9tZW1vcnlfc2lnbmVyXzEiLCJyZXF1aXJlIiwiZW51bWVyYWJsZSIsImdldCIsInNpZ25lcl8xIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@near-js/signers/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@near-js/signers/lib/signer.js":
/*!*****************************************************!*\
  !*** ./node_modules/@near-js/signers/lib/signer.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.Signer = void 0;\n/**\n * General signing interface, can be used for in memory signing, RPC singing, external wallet, HSM, etc.\n */ class Signer {\n}\nexports.Signer = Signer;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG5lYXItanMvc2lnbmVycy9saWIvc2lnbmVyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxjQUFjLEdBQUcsS0FBSztBQUN0Qjs7Q0FFQyxHQUNELE1BQU1FO0FBQ047QUFDQUYsY0FBYyxHQUFHRSIsInNvdXJjZXMiOlsid2VicGFjazovL2ktYW0tbmVhcmJ5Ly4vbm9kZV9tb2R1bGVzL0BuZWFyLWpzL3NpZ25lcnMvbGliL3NpZ25lci5qcz9kNTgxIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5TaWduZXIgPSB2b2lkIDA7XG4vKipcbiAqIEdlbmVyYWwgc2lnbmluZyBpbnRlcmZhY2UsIGNhbiBiZSB1c2VkIGZvciBpbiBtZW1vcnkgc2lnbmluZywgUlBDIHNpbmdpbmcsIGV4dGVybmFsIHdhbGxldCwgSFNNLCBldGMuXG4gKi9cbmNsYXNzIFNpZ25lciB7XG59XG5leHBvcnRzLlNpZ25lciA9IFNpZ25lcjtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIlNpZ25lciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@near-js/signers/lib/signer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@near-js/transactions/lib/action_creators.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@near-js/transactions/lib/action_creators.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.actionCreators = exports.stringifyJsonOrBytes = void 0;\nconst actions_1 = __webpack_require__(/*! ./actions */ \"(ssr)/./node_modules/@near-js/transactions/lib/actions.js\");\nfunction fullAccessKey() {\n    return new actions_1.AccessKey({\n        permission: new actions_1.AccessKeyPermission({\n            fullAccess: new actions_1.FullAccessPermission({})\n        })\n    });\n}\nfunction functionCallAccessKey(receiverId, methodNames, allowance) {\n    return new actions_1.AccessKey({\n        permission: new actions_1.AccessKeyPermission({\n            functionCall: new actions_1.FunctionCallPermission({\n                receiverId,\n                allowance,\n                methodNames\n            })\n        })\n    });\n}\nfunction createAccount() {\n    return new actions_1.Action({\n        createAccount: new actions_1.CreateAccount({})\n    });\n}\nfunction deployContract(code) {\n    return new actions_1.Action({\n        deployContract: new actions_1.DeployContract({\n            code\n        })\n    });\n}\nfunction stringifyJsonOrBytes(args) {\n    const isUint8Array = args.byteLength !== undefined && args.byteLength === args.length;\n    return isUint8Array ? args : Buffer.from(JSON.stringify(args));\n}\nexports.stringifyJsonOrBytes = stringifyJsonOrBytes;\n/**\n * Constructs {@link Action} instance representing contract method call.\n *\n * @param methodName the name of the method to call\n * @param args arguments to pass to method. Can be either plain JS object which gets serialized as JSON automatically\n *  or `Uint8Array` instance which represents bytes passed as is.\n * @param gas max amount of gas that method call can use\n * @param deposit amount of NEAR (in yoctoNEAR) to send together with the call\n * @param stringify Convert input arguments into bytes array.\n * @param jsContract  Is contract from JS SDK, skips stringification of arguments.\n */ function functionCall(methodName, args, gas, deposit, stringify = stringifyJsonOrBytes, jsContract = false) {\n    if (jsContract) {\n        return new actions_1.Action({\n            functionCall: new actions_1.FunctionCall({\n                methodName,\n                args,\n                gas,\n                deposit\n            })\n        });\n    }\n    return new actions_1.Action({\n        functionCall: new actions_1.FunctionCall({\n            methodName,\n            args: stringify(args),\n            gas,\n            deposit\n        })\n    });\n}\nfunction transfer(deposit) {\n    return new actions_1.Action({\n        transfer: new actions_1.Transfer({\n            deposit\n        })\n    });\n}\nfunction stake(stake, publicKey) {\n    return new actions_1.Action({\n        stake: new actions_1.Stake({\n            stake,\n            publicKey\n        })\n    });\n}\nfunction addKey(publicKey, accessKey) {\n    return new actions_1.Action({\n        addKey: new actions_1.AddKey({\n            publicKey,\n            accessKey\n        })\n    });\n}\nfunction deleteKey(publicKey) {\n    return new actions_1.Action({\n        deleteKey: new actions_1.DeleteKey({\n            publicKey\n        })\n    });\n}\nfunction deleteAccount(beneficiaryId) {\n    return new actions_1.Action({\n        deleteAccount: new actions_1.DeleteAccount({\n            beneficiaryId\n        })\n    });\n}\nfunction signedDelegate({ delegateAction, signature }) {\n    return new actions_1.Action({\n        signedDelegate: new actions_1.SignedDelegate({\n            delegateAction,\n            signature\n        })\n    });\n}\nexports.actionCreators = {\n    addKey,\n    createAccount,\n    deleteAccount,\n    deleteKey,\n    deployContract,\n    fullAccessKey,\n    functionCall,\n    functionCallAccessKey,\n    signedDelegate,\n    stake,\n    transfer\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@near-js/transactions/lib/action_creators.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@near-js/transactions/lib/actions.js":
/*!***********************************************************!*\
  !*** ./node_modules/@near-js/transactions/lib/actions.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.Action = exports.SignedDelegate = exports.DeleteAccount = exports.DeleteKey = exports.AddKey = exports.Stake = exports.Transfer = exports.FunctionCall = exports.DeployContract = exports.CreateAccount = exports.IAction = exports.AccessKey = exports.AccessKeyPermission = exports.FullAccessPermission = exports.FunctionCallPermission = void 0;\nconst types_1 = __webpack_require__(/*! @near-js/types */ \"(ssr)/./node_modules/@near-js/types/lib/index.js\");\nclass Enum {\n    constructor(properties){\n        if (Object.keys(properties).length !== 1) {\n            throw new Error(\"Enum can only take single value\");\n        }\n        Object.keys(properties).map((key)=>{\n            this[key] = properties[key];\n            this.enum = key;\n        });\n    }\n}\nclass FunctionCallPermission extends types_1.Assignable {\n}\nexports.FunctionCallPermission = FunctionCallPermission;\nclass FullAccessPermission extends types_1.Assignable {\n}\nexports.FullAccessPermission = FullAccessPermission;\nclass AccessKeyPermission extends Enum {\n}\nexports.AccessKeyPermission = AccessKeyPermission;\nclass AccessKey extends types_1.Assignable {\n}\nexports.AccessKey = AccessKey;\nclass IAction extends types_1.Assignable {\n}\nexports.IAction = IAction;\nclass CreateAccount extends IAction {\n}\nexports.CreateAccount = CreateAccount;\nclass DeployContract extends IAction {\n}\nexports.DeployContract = DeployContract;\nclass FunctionCall extends IAction {\n}\nexports.FunctionCall = FunctionCall;\nclass Transfer extends IAction {\n}\nexports.Transfer = Transfer;\nclass Stake extends IAction {\n}\nexports.Stake = Stake;\nclass AddKey extends IAction {\n}\nexports.AddKey = AddKey;\nclass DeleteKey extends IAction {\n}\nexports.DeleteKey = DeleteKey;\nclass DeleteAccount extends IAction {\n}\nexports.DeleteAccount = DeleteAccount;\nclass SignedDelegate extends IAction {\n}\nexports.SignedDelegate = SignedDelegate;\n/**\n * Contains a list of the valid transaction Actions available with this API\n * @see {@link https://nomicon.io/RuntimeSpec/Actions.html | Actions Spec}\n */ class Action extends Enum {\n}\nexports.Action = Action;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG5lYXItanMvdHJhbnNhY3Rpb25zL2xpYi9hY3Rpb25zLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxjQUFjLEdBQUdBLHNCQUFzQixHQUFHQSxxQkFBcUIsR0FBR0EsaUJBQWlCLEdBQUdBLGNBQWMsR0FBR0EsYUFBYSxHQUFHQSxnQkFBZ0IsR0FBR0Esb0JBQW9CLEdBQUdBLHNCQUFzQixHQUFHQSxxQkFBcUIsR0FBR0EsZUFBZSxHQUFHQSxpQkFBaUIsR0FBR0EsMkJBQTJCLEdBQUdBLDRCQUE0QixHQUFHQSw4QkFBOEIsR0FBRyxLQUFLO0FBQzNWLE1BQU1pQixVQUFVQyxtQkFBT0EsQ0FBQyx3RUFBZ0I7QUFDeEMsTUFBTUM7SUFDRkMsWUFBWUMsVUFBVSxDQUFFO1FBQ3BCLElBQUl2QixPQUFPd0IsSUFBSSxDQUFDRCxZQUFZRSxNQUFNLEtBQUssR0FBRztZQUN0QyxNQUFNLElBQUlDLE1BQU07UUFDcEI7UUFDQTFCLE9BQU93QixJQUFJLENBQUNELFlBQVlJLEdBQUcsQ0FBQyxDQUFDQztZQUN6QixJQUFJLENBQUNBLElBQUksR0FBR0wsVUFBVSxDQUFDSyxJQUFJO1lBQzNCLElBQUksQ0FBQ0MsSUFBSSxHQUFHRDtRQUNoQjtJQUNKO0FBQ0o7QUFDQSxNQUFNViwrQkFBK0JDLFFBQVFXLFVBQVU7QUFDdkQ7QUFDQTVCLDhCQUE4QixHQUFHZ0I7QUFDakMsTUFBTUQsNkJBQTZCRSxRQUFRVyxVQUFVO0FBQ3JEO0FBQ0E1Qiw0QkFBNEIsR0FBR2U7QUFDL0IsTUFBTUQsNEJBQTRCSztBQUNsQztBQUNBbkIsMkJBQTJCLEdBQUdjO0FBQzlCLE1BQU1ELGtCQUFrQkksUUFBUVcsVUFBVTtBQUMxQztBQUNBNUIsaUJBQWlCLEdBQUdhO0FBQ3BCLE1BQU1ELGdCQUFnQkssUUFBUVcsVUFBVTtBQUN4QztBQUNBNUIsZUFBZSxHQUFHWTtBQUNsQixNQUFNRCxzQkFBc0JDO0FBQzVCO0FBQ0FaLHFCQUFxQixHQUFHVztBQUN4QixNQUFNRCx1QkFBdUJFO0FBQzdCO0FBQ0FaLHNCQUFzQixHQUFHVTtBQUN6QixNQUFNRCxxQkFBcUJHO0FBQzNCO0FBQ0FaLG9CQUFvQixHQUFHUztBQUN2QixNQUFNRCxpQkFBaUJJO0FBQ3ZCO0FBQ0FaLGdCQUFnQixHQUFHUTtBQUNuQixNQUFNRCxjQUFjSztBQUNwQjtBQUNBWixhQUFhLEdBQUdPO0FBQ2hCLE1BQU1ELGVBQWVNO0FBQ3JCO0FBQ0FaLGNBQWMsR0FBR007QUFDakIsTUFBTUQsa0JBQWtCTztBQUN4QjtBQUNBWixpQkFBaUIsR0FBR0s7QUFDcEIsTUFBTUQsc0JBQXNCUTtBQUM1QjtBQUNBWixxQkFBcUIsR0FBR0k7QUFDeEIsTUFBTUQsdUJBQXVCUztBQUM3QjtBQUNBWixzQkFBc0IsR0FBR0c7QUFDekI7OztDQUdDLEdBQ0QsTUFBTUQsZUFBZWlCO0FBQ3JCO0FBQ0FuQixjQUFjLEdBQUdFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaS1hbS1uZWFyYnkvLi9ub2RlX21vZHVsZXMvQG5lYXItanMvdHJhbnNhY3Rpb25zL2xpYi9hY3Rpb25zLmpzPzMwYWYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkFjdGlvbiA9IGV4cG9ydHMuU2lnbmVkRGVsZWdhdGUgPSBleHBvcnRzLkRlbGV0ZUFjY291bnQgPSBleHBvcnRzLkRlbGV0ZUtleSA9IGV4cG9ydHMuQWRkS2V5ID0gZXhwb3J0cy5TdGFrZSA9IGV4cG9ydHMuVHJhbnNmZXIgPSBleHBvcnRzLkZ1bmN0aW9uQ2FsbCA9IGV4cG9ydHMuRGVwbG95Q29udHJhY3QgPSBleHBvcnRzLkNyZWF0ZUFjY291bnQgPSBleHBvcnRzLklBY3Rpb24gPSBleHBvcnRzLkFjY2Vzc0tleSA9IGV4cG9ydHMuQWNjZXNzS2V5UGVybWlzc2lvbiA9IGV4cG9ydHMuRnVsbEFjY2Vzc1Blcm1pc3Npb24gPSBleHBvcnRzLkZ1bmN0aW9uQ2FsbFBlcm1pc3Npb24gPSB2b2lkIDA7XG5jb25zdCB0eXBlc18xID0gcmVxdWlyZShcIkBuZWFyLWpzL3R5cGVzXCIpO1xuY2xhc3MgRW51bSB7XG4gICAgY29uc3RydWN0b3IocHJvcGVydGllcykge1xuICAgICAgICBpZiAoT2JqZWN0LmtleXMocHJvcGVydGllcykubGVuZ3RoICE9PSAxKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0VudW0gY2FuIG9ubHkgdGFrZSBzaW5nbGUgdmFsdWUnKTtcbiAgICAgICAgfVxuICAgICAgICBPYmplY3Qua2V5cyhwcm9wZXJ0aWVzKS5tYXAoKGtleSkgPT4ge1xuICAgICAgICAgICAgdGhpc1trZXldID0gcHJvcGVydGllc1trZXldO1xuICAgICAgICAgICAgdGhpcy5lbnVtID0ga2V5O1xuICAgICAgICB9KTtcbiAgICB9XG59XG5jbGFzcyBGdW5jdGlvbkNhbGxQZXJtaXNzaW9uIGV4dGVuZHMgdHlwZXNfMS5Bc3NpZ25hYmxlIHtcbn1cbmV4cG9ydHMuRnVuY3Rpb25DYWxsUGVybWlzc2lvbiA9IEZ1bmN0aW9uQ2FsbFBlcm1pc3Npb247XG5jbGFzcyBGdWxsQWNjZXNzUGVybWlzc2lvbiBleHRlbmRzIHR5cGVzXzEuQXNzaWduYWJsZSB7XG59XG5leHBvcnRzLkZ1bGxBY2Nlc3NQZXJtaXNzaW9uID0gRnVsbEFjY2Vzc1Blcm1pc3Npb247XG5jbGFzcyBBY2Nlc3NLZXlQZXJtaXNzaW9uIGV4dGVuZHMgRW51bSB7XG59XG5leHBvcnRzLkFjY2Vzc0tleVBlcm1pc3Npb24gPSBBY2Nlc3NLZXlQZXJtaXNzaW9uO1xuY2xhc3MgQWNjZXNzS2V5IGV4dGVuZHMgdHlwZXNfMS5Bc3NpZ25hYmxlIHtcbn1cbmV4cG9ydHMuQWNjZXNzS2V5ID0gQWNjZXNzS2V5O1xuY2xhc3MgSUFjdGlvbiBleHRlbmRzIHR5cGVzXzEuQXNzaWduYWJsZSB7XG59XG5leHBvcnRzLklBY3Rpb24gPSBJQWN0aW9uO1xuY2xhc3MgQ3JlYXRlQWNjb3VudCBleHRlbmRzIElBY3Rpb24ge1xufVxuZXhwb3J0cy5DcmVhdGVBY2NvdW50ID0gQ3JlYXRlQWNjb3VudDtcbmNsYXNzIERlcGxveUNvbnRyYWN0IGV4dGVuZHMgSUFjdGlvbiB7XG59XG5leHBvcnRzLkRlcGxveUNvbnRyYWN0ID0gRGVwbG95Q29udHJhY3Q7XG5jbGFzcyBGdW5jdGlvbkNhbGwgZXh0ZW5kcyBJQWN0aW9uIHtcbn1cbmV4cG9ydHMuRnVuY3Rpb25DYWxsID0gRnVuY3Rpb25DYWxsO1xuY2xhc3MgVHJhbnNmZXIgZXh0ZW5kcyBJQWN0aW9uIHtcbn1cbmV4cG9ydHMuVHJhbnNmZXIgPSBUcmFuc2ZlcjtcbmNsYXNzIFN0YWtlIGV4dGVuZHMgSUFjdGlvbiB7XG59XG5leHBvcnRzLlN0YWtlID0gU3Rha2U7XG5jbGFzcyBBZGRLZXkgZXh0ZW5kcyBJQWN0aW9uIHtcbn1cbmV4cG9ydHMuQWRkS2V5ID0gQWRkS2V5O1xuY2xhc3MgRGVsZXRlS2V5IGV4dGVuZHMgSUFjdGlvbiB7XG59XG5leHBvcnRzLkRlbGV0ZUtleSA9IERlbGV0ZUtleTtcbmNsYXNzIERlbGV0ZUFjY291bnQgZXh0ZW5kcyBJQWN0aW9uIHtcbn1cbmV4cG9ydHMuRGVsZXRlQWNjb3VudCA9IERlbGV0ZUFjY291bnQ7XG5jbGFzcyBTaWduZWREZWxlZ2F0ZSBleHRlbmRzIElBY3Rpb24ge1xufVxuZXhwb3J0cy5TaWduZWREZWxlZ2F0ZSA9IFNpZ25lZERlbGVnYXRlO1xuLyoqXG4gKiBDb250YWlucyBhIGxpc3Qgb2YgdGhlIHZhbGlkIHRyYW5zYWN0aW9uIEFjdGlvbnMgYXZhaWxhYmxlIHdpdGggdGhpcyBBUElcbiAqIEBzZWUge0BsaW5rIGh0dHBzOi8vbm9taWNvbi5pby9SdW50aW1lU3BlYy9BY3Rpb25zLmh0bWwgfCBBY3Rpb25zIFNwZWN9XG4gKi9cbmNsYXNzIEFjdGlvbiBleHRlbmRzIEVudW0ge1xufVxuZXhwb3J0cy5BY3Rpb24gPSBBY3Rpb247XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJBY3Rpb24iLCJTaWduZWREZWxlZ2F0ZSIsIkRlbGV0ZUFjY291bnQiLCJEZWxldGVLZXkiLCJBZGRLZXkiLCJTdGFrZSIsIlRyYW5zZmVyIiwiRnVuY3Rpb25DYWxsIiwiRGVwbG95Q29udHJhY3QiLCJDcmVhdGVBY2NvdW50IiwiSUFjdGlvbiIsIkFjY2Vzc0tleSIsIkFjY2Vzc0tleVBlcm1pc3Npb24iLCJGdWxsQWNjZXNzUGVybWlzc2lvbiIsIkZ1bmN0aW9uQ2FsbFBlcm1pc3Npb24iLCJ0eXBlc18xIiwicmVxdWlyZSIsIkVudW0iLCJjb25zdHJ1Y3RvciIsInByb3BlcnRpZXMiLCJrZXlzIiwibGVuZ3RoIiwiRXJyb3IiLCJtYXAiLCJrZXkiLCJlbnVtIiwiQXNzaWduYWJsZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@near-js/transactions/lib/actions.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@near-js/transactions/lib/create_transaction.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@near-js/transactions/lib/create_transaction.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.createTransaction = void 0;\nconst schema_1 = __webpack_require__(/*! ./schema */ \"(ssr)/./node_modules/@near-js/transactions/lib/schema.js\");\nfunction createTransaction(signerId, publicKey, receiverId, nonce, actions, blockHash) {\n    return new schema_1.Transaction({\n        signerId,\n        publicKey,\n        nonce,\n        receiverId,\n        actions,\n        blockHash\n    });\n}\nexports.createTransaction = createTransaction;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG5lYXItanMvdHJhbnNhY3Rpb25zL2xpYi9jcmVhdGVfdHJhbnNhY3Rpb24uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELHlCQUF5QixHQUFHLEtBQUs7QUFDakMsTUFBTUcsV0FBV0MsbUJBQU9BLENBQUMsMEVBQVU7QUFDbkMsU0FBU0Ysa0JBQWtCRyxRQUFRLEVBQUVDLFNBQVMsRUFBRUMsVUFBVSxFQUFFQyxLQUFLLEVBQUVDLE9BQU8sRUFBRUMsU0FBUztJQUNqRixPQUFPLElBQUlQLFNBQVNRLFdBQVcsQ0FBQztRQUFFTjtRQUFVQztRQUFXRTtRQUFPRDtRQUFZRTtRQUFTQztJQUFVO0FBQ2pHO0FBQ0FWLHlCQUF5QixHQUFHRSIsInNvdXJjZXMiOlsid2VicGFjazovL2ktYW0tbmVhcmJ5Ly4vbm9kZV9tb2R1bGVzL0BuZWFyLWpzL3RyYW5zYWN0aW9ucy9saWIvY3JlYXRlX3RyYW5zYWN0aW9uLmpzP2E3NzkiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmNyZWF0ZVRyYW5zYWN0aW9uID0gdm9pZCAwO1xuY29uc3Qgc2NoZW1hXzEgPSByZXF1aXJlKFwiLi9zY2hlbWFcIik7XG5mdW5jdGlvbiBjcmVhdGVUcmFuc2FjdGlvbihzaWduZXJJZCwgcHVibGljS2V5LCByZWNlaXZlcklkLCBub25jZSwgYWN0aW9ucywgYmxvY2tIYXNoKSB7XG4gICAgcmV0dXJuIG5ldyBzY2hlbWFfMS5UcmFuc2FjdGlvbih7IHNpZ25lcklkLCBwdWJsaWNLZXksIG5vbmNlLCByZWNlaXZlcklkLCBhY3Rpb25zLCBibG9ja0hhc2ggfSk7XG59XG5leHBvcnRzLmNyZWF0ZVRyYW5zYWN0aW9uID0gY3JlYXRlVHJhbnNhY3Rpb247XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJjcmVhdGVUcmFuc2FjdGlvbiIsInNjaGVtYV8xIiwicmVxdWlyZSIsInNpZ25lcklkIiwicHVibGljS2V5IiwicmVjZWl2ZXJJZCIsIm5vbmNlIiwiYWN0aW9ucyIsImJsb2NrSGFzaCIsIlRyYW5zYWN0aW9uIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@near-js/transactions/lib/create_transaction.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@near-js/transactions/lib/delegate.js":
/*!************************************************************!*\
  !*** ./node_modules/@near-js/transactions/lib/delegate.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.buildDelegateAction = exports.DelegateAction = void 0;\nconst types_1 = __webpack_require__(/*! @near-js/types */ \"(ssr)/./node_modules/@near-js/types/lib/index.js\");\nconst action_creators_1 = __webpack_require__(/*! ./action_creators */ \"(ssr)/./node_modules/@near-js/transactions/lib/action_creators.js\");\nconst { addKey, createAccount, deleteAccount, deleteKey, deployContract, functionCall, stake, transfer } = action_creators_1.actionCreators;\nclass DelegateAction extends types_1.Assignable {\n}\nexports.DelegateAction = DelegateAction;\n/**\n * Compose a delegate action for inclusion with a meta transaction signed on the sender's behalf\n * @params.actions The set of actions to be included in the meta transaction\n * @params.maxBlockHeight The maximum block height for which this action can be executed as part of a transaction\n * @params.nonce Current nonce on the access key used to sign the delegate action\n * @params.publicKey Public key for the access key used to sign the delegate action\n * @params.receiverId Account ID for the intended receiver of the meta transaction\n * @params.senderId Account ID for the intended signer of the delegate action\n */ function buildDelegateAction({ actions, maxBlockHeight, nonce, publicKey, receiverId, senderId }) {\n    return new DelegateAction({\n        senderId,\n        receiverId,\n        actions: actions.map((a)=>{\n            // @ts-expect-error type workaround\n            if (!a.type && !a.params) {\n                return a;\n            }\n            // @ts-expect-error type workaround\n            switch(a.type){\n                case \"AddKey\":\n                    {\n                        // @ts-expect-error type workaround\n                        const { publicKey, accessKey } = a.params;\n                        return addKey(publicKey, accessKey);\n                    }\n                case \"CreateAccount\":\n                    {\n                        // @ts-expect-error type workaround\n                        return createAccount(a.params.createAccount);\n                    }\n                case \"DeleteAccount\":\n                    {\n                        // @ts-expect-error type workaround\n                        return deleteAccount(a.params.deleteAccount);\n                    }\n                case \"DeleteKey\":\n                    {\n                        // @ts-expect-error type workaround\n                        return deleteKey(a.params.publicKey);\n                    }\n                case \"DeployContract\":\n                    {\n                        // @ts-expect-error type workaround\n                        return deployContract(a.params.code);\n                    }\n                case \"FunctionCall\":\n                    {\n                        // @ts-expect-error type workaround\n                        const { methodName, args, gas, deposit } = a.params;\n                        return functionCall(methodName, args, gas, deposit);\n                    }\n                case \"Stake\":\n                    {\n                        // @ts-expect-error type workaround\n                        return stake(a.params.stake, a.params.publicKey);\n                    }\n                case \"Transfer\":\n                    {\n                        // @ts-expect-error type workaround\n                        const { deposit } = a.params;\n                        return transfer(deposit);\n                    }\n            }\n            throw new Error(\"Unrecognized action\");\n        }),\n        nonce,\n        maxBlockHeight,\n        publicKey\n    });\n}\nexports.buildDelegateAction = buildDelegateAction;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG5lYXItanMvdHJhbnNhY3Rpb25zL2xpYi9kZWxlZ2F0ZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsMkJBQTJCLEdBQUdBLHNCQUFzQixHQUFHLEtBQUs7QUFDNUQsTUFBTUksVUFBVUMsbUJBQU9BLENBQUMsd0VBQWdCO0FBQ3hDLE1BQU1DLG9CQUFvQkQsbUJBQU9BLENBQUMsNEZBQW1CO0FBQ3JELE1BQU0sRUFBRUUsTUFBTSxFQUFFQyxhQUFhLEVBQUVDLGFBQWEsRUFBRUMsU0FBUyxFQUFFQyxjQUFjLEVBQUVDLFlBQVksRUFBRUMsS0FBSyxFQUFFQyxRQUFRLEVBQUcsR0FBR1Isa0JBQWtCUyxjQUFjO0FBQzVJLE1BQU1aLHVCQUF1QkMsUUFBUVksVUFBVTtBQUMvQztBQUNBaEIsc0JBQXNCLEdBQUdHO0FBQ3pCOzs7Ozs7OztDQVFDLEdBQ0QsU0FBU0Qsb0JBQW9CLEVBQUVlLE9BQU8sRUFBRUMsY0FBYyxFQUFFQyxLQUFLLEVBQUVDLFNBQVMsRUFBRUMsVUFBVSxFQUFFQyxRQUFRLEVBQUc7SUFDN0YsT0FBTyxJQUFJbkIsZUFBZTtRQUN0Qm1CO1FBQ0FEO1FBQ0FKLFNBQVNBLFFBQVFNLEdBQUcsQ0FBQyxDQUFDQztZQUNsQixtQ0FBbUM7WUFDbkMsSUFBSSxDQUFDQSxFQUFFQyxJQUFJLElBQUksQ0FBQ0QsRUFBRUUsTUFBTSxFQUFFO2dCQUN0QixPQUFPRjtZQUNYO1lBQ0EsbUNBQW1DO1lBQ25DLE9BQVFBLEVBQUVDLElBQUk7Z0JBQ1YsS0FBSztvQkFBVTt3QkFDWCxtQ0FBbUM7d0JBQ25DLE1BQU0sRUFBRUwsU0FBUyxFQUFFTyxTQUFTLEVBQUUsR0FBR0gsRUFBRUUsTUFBTTt3QkFDekMsT0FBT25CLE9BQU9hLFdBQVdPO29CQUM3QjtnQkFDQSxLQUFLO29CQUFpQjt3QkFDbEIsbUNBQW1DO3dCQUNuQyxPQUFPbkIsY0FBY2dCLEVBQUVFLE1BQU0sQ0FBQ2xCLGFBQWE7b0JBQy9DO2dCQUNBLEtBQUs7b0JBQWlCO3dCQUNsQixtQ0FBbUM7d0JBQ25DLE9BQU9DLGNBQWNlLEVBQUVFLE1BQU0sQ0FBQ2pCLGFBQWE7b0JBQy9DO2dCQUNBLEtBQUs7b0JBQWE7d0JBQ2QsbUNBQW1DO3dCQUNuQyxPQUFPQyxVQUFVYyxFQUFFRSxNQUFNLENBQUNOLFNBQVM7b0JBQ3ZDO2dCQUNBLEtBQUs7b0JBQWtCO3dCQUNuQixtQ0FBbUM7d0JBQ25DLE9BQU9ULGVBQWVhLEVBQUVFLE1BQU0sQ0FBQ0UsSUFBSTtvQkFDdkM7Z0JBQ0EsS0FBSztvQkFBZ0I7d0JBQ2pCLG1DQUFtQzt3QkFDbkMsTUFBTSxFQUFFQyxVQUFVLEVBQUVDLElBQUksRUFBRUMsR0FBRyxFQUFFQyxPQUFPLEVBQUUsR0FBR1IsRUFBRUUsTUFBTTt3QkFDbkQsT0FBT2QsYUFBYWlCLFlBQVlDLE1BQU1DLEtBQUtDO29CQUMvQztnQkFDQSxLQUFLO29CQUFTO3dCQUNWLG1DQUFtQzt3QkFDbkMsT0FBT25CLE1BQU1XLEVBQUVFLE1BQU0sQ0FBQ2IsS0FBSyxFQUFFVyxFQUFFRSxNQUFNLENBQUNOLFNBQVM7b0JBQ25EO2dCQUNBLEtBQUs7b0JBQVk7d0JBQ2IsbUNBQW1DO3dCQUNuQyxNQUFNLEVBQUVZLE9BQU8sRUFBRSxHQUFHUixFQUFFRSxNQUFNO3dCQUM1QixPQUFPWixTQUFTa0I7b0JBQ3BCO1lBQ0o7WUFDQSxNQUFNLElBQUlDLE1BQU07UUFDcEI7UUFDQWQ7UUFDQUQ7UUFDQUU7SUFDSjtBQUNKO0FBQ0FwQiwyQkFBMkIsR0FBR0UiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pLWFtLW5lYXJieS8uL25vZGVfbW9kdWxlcy9AbmVhci1qcy90cmFuc2FjdGlvbnMvbGliL2RlbGVnYXRlLmpzP2RkYzciXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmJ1aWxkRGVsZWdhdGVBY3Rpb24gPSBleHBvcnRzLkRlbGVnYXRlQWN0aW9uID0gdm9pZCAwO1xuY29uc3QgdHlwZXNfMSA9IHJlcXVpcmUoXCJAbmVhci1qcy90eXBlc1wiKTtcbmNvbnN0IGFjdGlvbl9jcmVhdG9yc18xID0gcmVxdWlyZShcIi4vYWN0aW9uX2NyZWF0b3JzXCIpO1xuY29uc3QgeyBhZGRLZXksIGNyZWF0ZUFjY291bnQsIGRlbGV0ZUFjY291bnQsIGRlbGV0ZUtleSwgZGVwbG95Q29udHJhY3QsIGZ1bmN0aW9uQ2FsbCwgc3Rha2UsIHRyYW5zZmVyLCB9ID0gYWN0aW9uX2NyZWF0b3JzXzEuYWN0aW9uQ3JlYXRvcnM7XG5jbGFzcyBEZWxlZ2F0ZUFjdGlvbiBleHRlbmRzIHR5cGVzXzEuQXNzaWduYWJsZSB7XG59XG5leHBvcnRzLkRlbGVnYXRlQWN0aW9uID0gRGVsZWdhdGVBY3Rpb247XG4vKipcbiAqIENvbXBvc2UgYSBkZWxlZ2F0ZSBhY3Rpb24gZm9yIGluY2x1c2lvbiB3aXRoIGEgbWV0YSB0cmFuc2FjdGlvbiBzaWduZWQgb24gdGhlIHNlbmRlcidzIGJlaGFsZlxuICogQHBhcmFtcy5hY3Rpb25zIFRoZSBzZXQgb2YgYWN0aW9ucyB0byBiZSBpbmNsdWRlZCBpbiB0aGUgbWV0YSB0cmFuc2FjdGlvblxuICogQHBhcmFtcy5tYXhCbG9ja0hlaWdodCBUaGUgbWF4aW11bSBibG9jayBoZWlnaHQgZm9yIHdoaWNoIHRoaXMgYWN0aW9uIGNhbiBiZSBleGVjdXRlZCBhcyBwYXJ0IG9mIGEgdHJhbnNhY3Rpb25cbiAqIEBwYXJhbXMubm9uY2UgQ3VycmVudCBub25jZSBvbiB0aGUgYWNjZXNzIGtleSB1c2VkIHRvIHNpZ24gdGhlIGRlbGVnYXRlIGFjdGlvblxuICogQHBhcmFtcy5wdWJsaWNLZXkgUHVibGljIGtleSBmb3IgdGhlIGFjY2VzcyBrZXkgdXNlZCB0byBzaWduIHRoZSBkZWxlZ2F0ZSBhY3Rpb25cbiAqIEBwYXJhbXMucmVjZWl2ZXJJZCBBY2NvdW50IElEIGZvciB0aGUgaW50ZW5kZWQgcmVjZWl2ZXIgb2YgdGhlIG1ldGEgdHJhbnNhY3Rpb25cbiAqIEBwYXJhbXMuc2VuZGVySWQgQWNjb3VudCBJRCBmb3IgdGhlIGludGVuZGVkIHNpZ25lciBvZiB0aGUgZGVsZWdhdGUgYWN0aW9uXG4gKi9cbmZ1bmN0aW9uIGJ1aWxkRGVsZWdhdGVBY3Rpb24oeyBhY3Rpb25zLCBtYXhCbG9ja0hlaWdodCwgbm9uY2UsIHB1YmxpY0tleSwgcmVjZWl2ZXJJZCwgc2VuZGVySWQsIH0pIHtcbiAgICByZXR1cm4gbmV3IERlbGVnYXRlQWN0aW9uKHtcbiAgICAgICAgc2VuZGVySWQsXG4gICAgICAgIHJlY2VpdmVySWQsXG4gICAgICAgIGFjdGlvbnM6IGFjdGlvbnMubWFwKChhKSA9PiB7XG4gICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIHR5cGUgd29ya2Fyb3VuZFxuICAgICAgICAgICAgaWYgKCFhLnR5cGUgJiYgIWEucGFyYW1zKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIHR5cGUgd29ya2Fyb3VuZFxuICAgICAgICAgICAgc3dpdGNoIChhLnR5cGUpIHtcbiAgICAgICAgICAgICAgICBjYXNlICdBZGRLZXknOiB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgdHlwZSB3b3JrYXJvdW5kXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHsgcHVibGljS2V5LCBhY2Nlc3NLZXkgfSA9IGEucGFyYW1zO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYWRkS2V5KHB1YmxpY0tleSwgYWNjZXNzS2V5KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2FzZSAnQ3JlYXRlQWNjb3VudCc6IHtcbiAgICAgICAgICAgICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciB0eXBlIHdvcmthcm91bmRcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZUFjY291bnQoYS5wYXJhbXMuY3JlYXRlQWNjb3VudCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhc2UgJ0RlbGV0ZUFjY291bnQnOiB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgdHlwZSB3b3JrYXJvdW5kXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkZWxldGVBY2NvdW50KGEucGFyYW1zLmRlbGV0ZUFjY291bnQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXNlICdEZWxldGVLZXknOiB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgdHlwZSB3b3JrYXJvdW5kXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkZWxldGVLZXkoYS5wYXJhbXMucHVibGljS2V5KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2FzZSAnRGVwbG95Q29udHJhY3QnOiB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgdHlwZSB3b3JrYXJvdW5kXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkZXBsb3lDb250cmFjdChhLnBhcmFtcy5jb2RlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2FzZSAnRnVuY3Rpb25DYWxsJzoge1xuICAgICAgICAgICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIHR5cGUgd29ya2Fyb3VuZFxuICAgICAgICAgICAgICAgICAgICBjb25zdCB7IG1ldGhvZE5hbWUsIGFyZ3MsIGdhcywgZGVwb3NpdCB9ID0gYS5wYXJhbXM7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbkNhbGwobWV0aG9kTmFtZSwgYXJncywgZ2FzLCBkZXBvc2l0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2FzZSAnU3Rha2UnOiB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgdHlwZSB3b3JrYXJvdW5kXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzdGFrZShhLnBhcmFtcy5zdGFrZSwgYS5wYXJhbXMucHVibGljS2V5KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2FzZSAnVHJhbnNmZXInOiB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgdHlwZSB3b3JrYXJvdW5kXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHsgZGVwb3NpdCB9ID0gYS5wYXJhbXM7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cmFuc2ZlcihkZXBvc2l0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1VucmVjb2duaXplZCBhY3Rpb24nKTtcbiAgICAgICAgfSksXG4gICAgICAgIG5vbmNlLFxuICAgICAgICBtYXhCbG9ja0hlaWdodCxcbiAgICAgICAgcHVibGljS2V5LFxuICAgIH0pO1xufVxuZXhwb3J0cy5idWlsZERlbGVnYXRlQWN0aW9uID0gYnVpbGREZWxlZ2F0ZUFjdGlvbjtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImJ1aWxkRGVsZWdhdGVBY3Rpb24iLCJEZWxlZ2F0ZUFjdGlvbiIsInR5cGVzXzEiLCJyZXF1aXJlIiwiYWN0aW9uX2NyZWF0b3JzXzEiLCJhZGRLZXkiLCJjcmVhdGVBY2NvdW50IiwiZGVsZXRlQWNjb3VudCIsImRlbGV0ZUtleSIsImRlcGxveUNvbnRyYWN0IiwiZnVuY3Rpb25DYWxsIiwic3Rha2UiLCJ0cmFuc2ZlciIsImFjdGlvbkNyZWF0b3JzIiwiQXNzaWduYWJsZSIsImFjdGlvbnMiLCJtYXhCbG9ja0hlaWdodCIsIm5vbmNlIiwicHVibGljS2V5IiwicmVjZWl2ZXJJZCIsInNlbmRlcklkIiwibWFwIiwiYSIsInR5cGUiLCJwYXJhbXMiLCJhY2Nlc3NLZXkiLCJjb2RlIiwibWV0aG9kTmFtZSIsImFyZ3MiLCJnYXMiLCJkZXBvc2l0IiwiRXJyb3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@near-js/transactions/lib/delegate.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@near-js/transactions/lib/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/@near-js/transactions/lib/index.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n        desc = {\n            enumerable: true,\n            get: function() {\n                return m[k];\n            }\n        };\n    }\n    Object.defineProperty(o, k2, desc);\n} : function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n});\nvar __exportStar = this && this.__exportStar || function(m, exports1) {\n    for(var p in m)if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n__exportStar(__webpack_require__(/*! ./action_creators */ \"(ssr)/./node_modules/@near-js/transactions/lib/action_creators.js\"), exports);\n__exportStar(__webpack_require__(/*! ./actions */ \"(ssr)/./node_modules/@near-js/transactions/lib/actions.js\"), exports);\n__exportStar(__webpack_require__(/*! ./create_transaction */ \"(ssr)/./node_modules/@near-js/transactions/lib/create_transaction.js\"), exports);\n__exportStar(__webpack_require__(/*! ./delegate */ \"(ssr)/./node_modules/@near-js/transactions/lib/delegate.js\"), exports);\n__exportStar(__webpack_require__(/*! ./schema */ \"(ssr)/./node_modules/@near-js/transactions/lib/schema.js\"), exports);\n__exportStar(__webpack_require__(/*! ./sign */ \"(ssr)/./node_modules/@near-js/transactions/lib/sign.js\"), exports);\n__exportStar(__webpack_require__(/*! ./signature */ \"(ssr)/./node_modules/@near-js/transactions/lib/signature.js\"), exports);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG5lYXItanMvdHJhbnNhY3Rpb25zL2xpYi9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLElBQUlBLGtCQUFrQixJQUFLLElBQUksSUFBSSxDQUFDQSxlQUFlLElBQU1DLENBQUFBLE9BQU9DLE1BQU0sR0FBSSxTQUFTQyxDQUFDLEVBQUVDLENBQUMsRUFBRUMsQ0FBQyxFQUFFQyxFQUFFO0lBQzFGLElBQUlBLE9BQU9DLFdBQVdELEtBQUtEO0lBQzNCLElBQUlHLE9BQU9QLE9BQU9RLHdCQUF3QixDQUFDTCxHQUFHQztJQUM5QyxJQUFJLENBQUNHLFFBQVMsVUFBU0EsT0FBTyxDQUFDSixFQUFFTSxVQUFVLEdBQUdGLEtBQUtHLFFBQVEsSUFBSUgsS0FBS0ksWUFBWSxHQUFHO1FBQ2pGSixPQUFPO1lBQUVLLFlBQVk7WUFBTUMsS0FBSztnQkFBYSxPQUFPVixDQUFDLENBQUNDLEVBQUU7WUFBRTtRQUFFO0lBQzlEO0lBQ0FKLE9BQU9jLGNBQWMsQ0FBQ1osR0FBR0csSUFBSUU7QUFDakMsSUFBTSxTQUFTTCxDQUFDLEVBQUVDLENBQUMsRUFBRUMsQ0FBQyxFQUFFQyxFQUFFO0lBQ3RCLElBQUlBLE9BQU9DLFdBQVdELEtBQUtEO0lBQzNCRixDQUFDLENBQUNHLEdBQUcsR0FBR0YsQ0FBQyxDQUFDQyxFQUFFO0FBQ2hCLENBQUM7QUFDRCxJQUFJVyxlQUFlLElBQUssSUFBSSxJQUFJLENBQUNBLFlBQVksSUFBSyxTQUFTWixDQUFDLEVBQUVhLFFBQU87SUFDakUsSUFBSyxJQUFJQyxLQUFLZCxFQUFHLElBQUljLE1BQU0sYUFBYSxDQUFDakIsT0FBT2tCLFNBQVMsQ0FBQ0MsY0FBYyxDQUFDQyxJQUFJLENBQUNKLFVBQVNDLElBQUlsQixnQkFBZ0JpQixVQUFTYixHQUFHYztBQUMzSDtBQUNBakIsOENBQTZDO0lBQUVxQixPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdETixhQUFhTyxtQkFBT0EsQ0FBQyw0RkFBbUIsR0FBR047QUFDM0NELGFBQWFPLG1CQUFPQSxDQUFDLDRFQUFXLEdBQUdOO0FBQ25DRCxhQUFhTyxtQkFBT0EsQ0FBQyxrR0FBc0IsR0FBR047QUFDOUNELGFBQWFPLG1CQUFPQSxDQUFDLDhFQUFZLEdBQUdOO0FBQ3BDRCxhQUFhTyxtQkFBT0EsQ0FBQywwRUFBVSxHQUFHTjtBQUNsQ0QsYUFBYU8sbUJBQU9BLENBQUMsc0VBQVEsR0FBR047QUFDaENELGFBQWFPLG1CQUFPQSxDQUFDLGdGQUFhLEdBQUdOIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaS1hbS1uZWFyYnkvLi9ub2RlX21vZHVsZXMvQG5lYXItanMvdHJhbnNhY3Rpb25zL2xpYi9pbmRleC5qcz9lMzY5Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG0sIGspO1xuICAgIGlmICghZGVzYyB8fCAoXCJnZXRcIiBpbiBkZXNjID8gIW0uX19lc01vZHVsZSA6IGRlc2Mud3JpdGFibGUgfHwgZGVzYy5jb25maWd1cmFibGUpKSB7XG4gICAgICBkZXNjID0geyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9O1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIGRlc2MpO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX2V4cG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9fZXhwb3J0U3RhcikgfHwgZnVuY3Rpb24obSwgZXhwb3J0cykge1xuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZXhwb3J0cywgcCkpIF9fY3JlYXRlQmluZGluZyhleHBvcnRzLCBtLCBwKTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vYWN0aW9uX2NyZWF0b3JzXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9hY3Rpb25zXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9jcmVhdGVfdHJhbnNhY3Rpb25cIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2RlbGVnYXRlXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9zY2hlbWFcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3NpZ25cIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3NpZ25hdHVyZVwiKSwgZXhwb3J0cyk7XG4iXSwibmFtZXMiOlsiX19jcmVhdGVCaW5kaW5nIiwiT2JqZWN0IiwiY3JlYXRlIiwibyIsIm0iLCJrIiwiazIiLCJ1bmRlZmluZWQiLCJkZXNjIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiX19lc01vZHVsZSIsIndyaXRhYmxlIiwiY29uZmlndXJhYmxlIiwiZW51bWVyYWJsZSIsImdldCIsImRlZmluZVByb3BlcnR5IiwiX19leHBvcnRTdGFyIiwiZXhwb3J0cyIsInAiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJ2YWx1ZSIsInJlcXVpcmUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@near-js/transactions/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@near-js/transactions/lib/prefix.js":
/*!**********************************************************!*\
  !*** ./node_modules/@near-js/transactions/lib/prefix.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.DelegateActionPrefix = void 0;\nconst types_1 = __webpack_require__(/*! @near-js/types */ \"(ssr)/./node_modules/@near-js/types/lib/index.js\");\nconst ACTIONABLE_MESSAGE_BASE = Math.pow(2, 30);\n// const NON_ACTIONABLE_MESSAGE_BASE = Math.pow(2, 31);\n/** The set of NEPs for which an [NEP-461](https://github.com/near/NEPs/pull/461) prefix is required on the message prior to hashing **/ const NEP = {\n    MetaTransactions: 366\n};\n/** Base class for NEP message prefixes **/ class NEPPrefix extends types_1.Assignable {\n}\n/** Class for constructing prefixes on actionable (on-chain) messages **/ class ActionableMessagePrefix extends NEPPrefix {\n    /** Given the NEP number, set the prefix using 2^30 as the offset **/ constructor(prefix){\n        super({\n            prefix: ACTIONABLE_MESSAGE_BASE + prefix\n        });\n    }\n}\n/**\n * Class for constructing prefixes on non-actionable (off-chain) messages\n * @todo uncomment when off-chain messages are supported\n * **/ // abstract class NonActionableMessagePrefix extends NEPPrefix {\n//     /** Given the NEP number, set the prefix using 2^31 as the offset **/\n//     protected constructor(prefix: number) {\n//         super({ prefix: NON_ACTIONABLE_MESSAGE_BASE + prefix });\n//     }\n// }\n/** Prefix for delegate actions whose signatures must always be distinguishable from valid transaction signatures **/ class DelegateActionPrefix extends ActionableMessagePrefix {\n    constructor(){\n        super(NEP.MetaTransactions);\n    }\n}\nexports.DelegateActionPrefix = DelegateActionPrefix;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG5lYXItanMvdHJhbnNhY3Rpb25zL2xpYi9wcmVmaXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELDRCQUE0QixHQUFHLEtBQUs7QUFDcEMsTUFBTUcsVUFBVUMsbUJBQU9BLENBQUMsd0VBQWdCO0FBQ3hDLE1BQU1DLDBCQUEwQkMsS0FBS0MsR0FBRyxDQUFDLEdBQUc7QUFDNUMsdURBQXVEO0FBQ3ZELHNJQUFzSSxHQUN0SSxNQUFNQyxNQUFNO0lBQ1JDLGtCQUFrQjtBQUN0QjtBQUNBLHlDQUF5QyxHQUN6QyxNQUFNQyxrQkFBa0JQLFFBQVFRLFVBQVU7QUFDMUM7QUFDQSx1RUFBdUUsR0FDdkUsTUFBTUMsZ0NBQWdDRjtJQUNsQyxtRUFBbUUsR0FDbkVHLFlBQVlDLE1BQU0sQ0FBRTtRQUNoQixLQUFLLENBQUM7WUFBRUEsUUFBUVQsMEJBQTBCUztRQUFPO0lBQ3JEO0FBQ0o7QUFDQTs7O0lBR0ksR0FDSixnRUFBZ0U7QUFDaEUsNEVBQTRFO0FBQzVFLDhDQUE4QztBQUM5QyxtRUFBbUU7QUFDbkUsUUFBUTtBQUNSLElBQUk7QUFDSixtSEFBbUgsR0FDbkgsTUFBTVosNkJBQTZCVTtJQUMvQkMsYUFBYztRQUFFLEtBQUssQ0FBQ0wsSUFBSUMsZ0JBQWdCO0lBQUc7QUFDakQ7QUFDQVQsNEJBQTRCLEdBQUdFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaS1hbS1uZWFyYnkvLi9ub2RlX21vZHVsZXMvQG5lYXItanMvdHJhbnNhY3Rpb25zL2xpYi9wcmVmaXguanM/MDgwMyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuRGVsZWdhdGVBY3Rpb25QcmVmaXggPSB2b2lkIDA7XG5jb25zdCB0eXBlc18xID0gcmVxdWlyZShcIkBuZWFyLWpzL3R5cGVzXCIpO1xuY29uc3QgQUNUSU9OQUJMRV9NRVNTQUdFX0JBU0UgPSBNYXRoLnBvdygyLCAzMCk7XG4vLyBjb25zdCBOT05fQUNUSU9OQUJMRV9NRVNTQUdFX0JBU0UgPSBNYXRoLnBvdygyLCAzMSk7XG4vKiogVGhlIHNldCBvZiBORVBzIGZvciB3aGljaCBhbiBbTkVQLTQ2MV0oaHR0cHM6Ly9naXRodWIuY29tL25lYXIvTkVQcy9wdWxsLzQ2MSkgcHJlZml4IGlzIHJlcXVpcmVkIG9uIHRoZSBtZXNzYWdlIHByaW9yIHRvIGhhc2hpbmcgKiovXG5jb25zdCBORVAgPSB7XG4gICAgTWV0YVRyYW5zYWN0aW9uczogMzY2LFxufTtcbi8qKiBCYXNlIGNsYXNzIGZvciBORVAgbWVzc2FnZSBwcmVmaXhlcyAqKi9cbmNsYXNzIE5FUFByZWZpeCBleHRlbmRzIHR5cGVzXzEuQXNzaWduYWJsZSB7XG59XG4vKiogQ2xhc3MgZm9yIGNvbnN0cnVjdGluZyBwcmVmaXhlcyBvbiBhY3Rpb25hYmxlIChvbi1jaGFpbikgbWVzc2FnZXMgKiovXG5jbGFzcyBBY3Rpb25hYmxlTWVzc2FnZVByZWZpeCBleHRlbmRzIE5FUFByZWZpeCB7XG4gICAgLyoqIEdpdmVuIHRoZSBORVAgbnVtYmVyLCBzZXQgdGhlIHByZWZpeCB1c2luZyAyXjMwIGFzIHRoZSBvZmZzZXQgKiovXG4gICAgY29uc3RydWN0b3IocHJlZml4KSB7XG4gICAgICAgIHN1cGVyKHsgcHJlZml4OiBBQ1RJT05BQkxFX01FU1NBR0VfQkFTRSArIHByZWZpeCB9KTtcbiAgICB9XG59XG4vKipcbiAqIENsYXNzIGZvciBjb25zdHJ1Y3RpbmcgcHJlZml4ZXMgb24gbm9uLWFjdGlvbmFibGUgKG9mZi1jaGFpbikgbWVzc2FnZXNcbiAqIEB0b2RvIHVuY29tbWVudCB3aGVuIG9mZi1jaGFpbiBtZXNzYWdlcyBhcmUgc3VwcG9ydGVkXG4gKiAqKi9cbi8vIGFic3RyYWN0IGNsYXNzIE5vbkFjdGlvbmFibGVNZXNzYWdlUHJlZml4IGV4dGVuZHMgTkVQUHJlZml4IHtcbi8vICAgICAvKiogR2l2ZW4gdGhlIE5FUCBudW1iZXIsIHNldCB0aGUgcHJlZml4IHVzaW5nIDJeMzEgYXMgdGhlIG9mZnNldCAqKi9cbi8vICAgICBwcm90ZWN0ZWQgY29uc3RydWN0b3IocHJlZml4OiBudW1iZXIpIHtcbi8vICAgICAgICAgc3VwZXIoeyBwcmVmaXg6IE5PTl9BQ1RJT05BQkxFX01FU1NBR0VfQkFTRSArIHByZWZpeCB9KTtcbi8vICAgICB9XG4vLyB9XG4vKiogUHJlZml4IGZvciBkZWxlZ2F0ZSBhY3Rpb25zIHdob3NlIHNpZ25hdHVyZXMgbXVzdCBhbHdheXMgYmUgZGlzdGluZ3Vpc2hhYmxlIGZyb20gdmFsaWQgdHJhbnNhY3Rpb24gc2lnbmF0dXJlcyAqKi9cbmNsYXNzIERlbGVnYXRlQWN0aW9uUHJlZml4IGV4dGVuZHMgQWN0aW9uYWJsZU1lc3NhZ2VQcmVmaXgge1xuICAgIGNvbnN0cnVjdG9yKCkgeyBzdXBlcihORVAuTWV0YVRyYW5zYWN0aW9ucyk7IH1cbn1cbmV4cG9ydHMuRGVsZWdhdGVBY3Rpb25QcmVmaXggPSBEZWxlZ2F0ZUFjdGlvblByZWZpeDtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIkRlbGVnYXRlQWN0aW9uUHJlZml4IiwidHlwZXNfMSIsInJlcXVpcmUiLCJBQ1RJT05BQkxFX01FU1NBR0VfQkFTRSIsIk1hdGgiLCJwb3ciLCJORVAiLCJNZXRhVHJhbnNhY3Rpb25zIiwiTkVQUHJlZml4IiwiQXNzaWduYWJsZSIsIkFjdGlvbmFibGVNZXNzYWdlUHJlZml4IiwiY29uc3RydWN0b3IiLCJwcmVmaXgiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@near-js/transactions/lib/prefix.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@near-js/transactions/lib/schema.js":
/*!**********************************************************!*\
  !*** ./node_modules/@near-js/transactions/lib/schema.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.SCHEMA = exports.SignedTransaction = exports.Transaction = exports.decodeSignedTransaction = exports.decodeTransaction = exports.encodeTransaction = exports.encodeSignedDelegate = exports.encodeDelegateAction = void 0;\nconst crypto_1 = __webpack_require__(/*! @near-js/crypto */ \"(ssr)/./node_modules/@near-js/crypto/lib/index.js\");\nconst types_1 = __webpack_require__(/*! @near-js/types */ \"(ssr)/./node_modules/@near-js/types/lib/index.js\");\nconst borsh_1 = __webpack_require__(/*! borsh */ \"(ssr)/./node_modules/borsh/lib/index.js\");\nconst actions_1 = __webpack_require__(/*! ./actions */ \"(ssr)/./node_modules/@near-js/transactions/lib/actions.js\");\nconst delegate_1 = __webpack_require__(/*! ./delegate */ \"(ssr)/./node_modules/@near-js/transactions/lib/delegate.js\");\nconst prefix_1 = __webpack_require__(/*! ./prefix */ \"(ssr)/./node_modules/@near-js/transactions/lib/prefix.js\");\nconst signature_1 = __webpack_require__(/*! ./signature */ \"(ssr)/./node_modules/@near-js/transactions/lib/signature.js\");\n/**\n * Borsh-encode a delegate action for inclusion as an action within a meta transaction\n * NB per NEP-461 this requires a Borsh-serialized prefix specific to delegate actions, ensuring\n *  signed delegate actions may never be identical to signed transactions with the same fields\n * @param delegateAction Delegate action to be signed by the meta transaction sender\n */ function encodeDelegateAction(delegateAction) {\n    return new Uint8Array([\n        ...(0, borsh_1.serialize)(exports.SCHEMA, new prefix_1.DelegateActionPrefix()),\n        ...(0, borsh_1.serialize)(exports.SCHEMA, delegateAction)\n    ]);\n}\nexports.encodeDelegateAction = encodeDelegateAction;\n/**\n * Borsh-encode a signed delegate for validation and execution by a relayer\n * @param signedDelegate Signed delegate to be executed in a meta transaction\n */ function encodeSignedDelegate(signedDelegate) {\n    return (0, borsh_1.serialize)(exports.SCHEMA, signedDelegate);\n}\nexports.encodeSignedDelegate = encodeSignedDelegate;\nfunction encodeTransaction(transaction) {\n    return (0, borsh_1.serialize)(exports.SCHEMA, transaction);\n}\nexports.encodeTransaction = encodeTransaction;\n/**\n * Borsh-decode a Transaction instance from a buffer\n * @param bytes Buffer data to be decoded\n */ function decodeTransaction(bytes) {\n    return (0, borsh_1.deserialize)(exports.SCHEMA, Transaction, bytes);\n}\nexports.decodeTransaction = decodeTransaction;\n/**\n * Borsh-decode a SignedTransaction instance from a buffer\n * @param bytes Buffer data to be decoded\n */ function decodeSignedTransaction(bytes) {\n    return (0, borsh_1.deserialize)(exports.SCHEMA, SignedTransaction, bytes);\n}\nexports.decodeSignedTransaction = decodeSignedTransaction;\nclass Transaction extends types_1.Assignable {\n    encode() {\n        return encodeTransaction(this);\n    }\n    static decode(bytes) {\n        return decodeTransaction(bytes);\n    }\n}\nexports.Transaction = Transaction;\nclass SignedTransaction extends types_1.Assignable {\n    encode() {\n        return encodeTransaction(this);\n    }\n    static decode(bytes) {\n        return decodeSignedTransaction(bytes);\n    }\n}\nexports.SignedTransaction = SignedTransaction;\nexports.SCHEMA = new Map([\n    [\n        signature_1.Signature,\n        {\n            kind: \"struct\",\n            fields: [\n                [\n                    \"keyType\",\n                    \"u8\"\n                ],\n                [\n                    \"data\",\n                    [\n                        64\n                    ]\n                ]\n            ]\n        }\n    ],\n    [\n        SignedTransaction,\n        {\n            kind: \"struct\",\n            fields: [\n                [\n                    \"transaction\",\n                    Transaction\n                ],\n                [\n                    \"signature\",\n                    signature_1.Signature\n                ]\n            ]\n        }\n    ],\n    [\n        Transaction,\n        {\n            kind: \"struct\",\n            fields: [\n                [\n                    \"signerId\",\n                    \"string\"\n                ],\n                [\n                    \"publicKey\",\n                    crypto_1.PublicKey\n                ],\n                [\n                    \"nonce\",\n                    \"u64\"\n                ],\n                [\n                    \"receiverId\",\n                    \"string\"\n                ],\n                [\n                    \"blockHash\",\n                    [\n                        32\n                    ]\n                ],\n                [\n                    \"actions\",\n                    [\n                        actions_1.Action\n                    ]\n                ]\n            ]\n        }\n    ],\n    [\n        crypto_1.PublicKey,\n        {\n            kind: \"struct\",\n            fields: [\n                [\n                    \"keyType\",\n                    \"u8\"\n                ],\n                [\n                    \"data\",\n                    [\n                        32\n                    ]\n                ]\n            ]\n        }\n    ],\n    [\n        actions_1.AccessKey,\n        {\n            kind: \"struct\",\n            fields: [\n                [\n                    \"nonce\",\n                    \"u64\"\n                ],\n                [\n                    \"permission\",\n                    actions_1.AccessKeyPermission\n                ]\n            ]\n        }\n    ],\n    [\n        actions_1.AccessKeyPermission,\n        {\n            kind: \"enum\",\n            field: \"enum\",\n            values: [\n                [\n                    \"functionCall\",\n                    actions_1.FunctionCallPermission\n                ],\n                [\n                    \"fullAccess\",\n                    actions_1.FullAccessPermission\n                ]\n            ]\n        }\n    ],\n    [\n        actions_1.FunctionCallPermission,\n        {\n            kind: \"struct\",\n            fields: [\n                [\n                    \"allowance\",\n                    {\n                        kind: \"option\",\n                        type: \"u128\"\n                    }\n                ],\n                [\n                    \"receiverId\",\n                    \"string\"\n                ],\n                [\n                    \"methodNames\",\n                    [\n                        \"string\"\n                    ]\n                ]\n            ]\n        }\n    ],\n    [\n        actions_1.FullAccessPermission,\n        {\n            kind: \"struct\",\n            fields: []\n        }\n    ],\n    [\n        actions_1.Action,\n        {\n            kind: \"enum\",\n            field: \"enum\",\n            values: [\n                [\n                    \"createAccount\",\n                    actions_1.CreateAccount\n                ],\n                [\n                    \"deployContract\",\n                    actions_1.DeployContract\n                ],\n                [\n                    \"functionCall\",\n                    actions_1.FunctionCall\n                ],\n                [\n                    \"transfer\",\n                    actions_1.Transfer\n                ],\n                [\n                    \"stake\",\n                    actions_1.Stake\n                ],\n                [\n                    \"addKey\",\n                    actions_1.AddKey\n                ],\n                [\n                    \"deleteKey\",\n                    actions_1.DeleteKey\n                ],\n                [\n                    \"deleteAccount\",\n                    actions_1.DeleteAccount\n                ],\n                [\n                    \"signedDelegate\",\n                    actions_1.SignedDelegate\n                ]\n            ]\n        }\n    ],\n    [\n        actions_1.CreateAccount,\n        {\n            kind: \"struct\",\n            fields: []\n        }\n    ],\n    [\n        actions_1.DeployContract,\n        {\n            kind: \"struct\",\n            fields: [\n                [\n                    \"code\",\n                    [\n                        \"u8\"\n                    ]\n                ]\n            ]\n        }\n    ],\n    [\n        actions_1.FunctionCall,\n        {\n            kind: \"struct\",\n            fields: [\n                [\n                    \"methodName\",\n                    \"string\"\n                ],\n                [\n                    \"args\",\n                    [\n                        \"u8\"\n                    ]\n                ],\n                [\n                    \"gas\",\n                    \"u64\"\n                ],\n                [\n                    \"deposit\",\n                    \"u128\"\n                ]\n            ]\n        }\n    ],\n    [\n        actions_1.Transfer,\n        {\n            kind: \"struct\",\n            fields: [\n                [\n                    \"deposit\",\n                    \"u128\"\n                ]\n            ]\n        }\n    ],\n    [\n        actions_1.Stake,\n        {\n            kind: \"struct\",\n            fields: [\n                [\n                    \"stake\",\n                    \"u128\"\n                ],\n                [\n                    \"publicKey\",\n                    crypto_1.PublicKey\n                ]\n            ]\n        }\n    ],\n    [\n        actions_1.AddKey,\n        {\n            kind: \"struct\",\n            fields: [\n                [\n                    \"publicKey\",\n                    crypto_1.PublicKey\n                ],\n                [\n                    \"accessKey\",\n                    actions_1.AccessKey\n                ]\n            ]\n        }\n    ],\n    [\n        actions_1.DeleteKey,\n        {\n            kind: \"struct\",\n            fields: [\n                [\n                    \"publicKey\",\n                    crypto_1.PublicKey\n                ]\n            ]\n        }\n    ],\n    [\n        actions_1.DeleteAccount,\n        {\n            kind: \"struct\",\n            fields: [\n                [\n                    \"beneficiaryId\",\n                    \"string\"\n                ]\n            ]\n        }\n    ],\n    [\n        delegate_1.DelegateAction,\n        {\n            kind: \"struct\",\n            fields: [\n                [\n                    \"senderId\",\n                    \"string\"\n                ],\n                [\n                    \"receiverId\",\n                    \"string\"\n                ],\n                [\n                    \"actions\",\n                    [\n                        actions_1.Action\n                    ]\n                ],\n                [\n                    \"nonce\",\n                    \"u64\"\n                ],\n                [\n                    \"maxBlockHeight\",\n                    \"u64\"\n                ],\n                [\n                    \"publicKey\",\n                    crypto_1.PublicKey\n                ]\n            ]\n        }\n    ],\n    [\n        prefix_1.DelegateActionPrefix,\n        {\n            kind: \"struct\",\n            fields: [\n                [\n                    \"prefix\",\n                    \"u32\"\n                ]\n            ]\n        }\n    ],\n    [\n        actions_1.SignedDelegate,\n        {\n            kind: \"struct\",\n            fields: [\n                [\n                    \"delegateAction\",\n                    delegate_1.DelegateAction\n                ],\n                [\n                    \"signature\",\n                    signature_1.Signature\n                ]\n            ]\n        }\n    ]\n]);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@near-js/transactions/lib/schema.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@near-js/transactions/lib/sign.js":
/*!********************************************************!*\
  !*** ./node_modules/@near-js/transactions/lib/sign.js ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n        });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = this && this.__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.signDelegateAction = exports.signTransaction = void 0;\nconst js_sha256_1 = __importDefault(__webpack_require__(/*! js-sha256 */ \"(ssr)/./node_modules/js-sha256/src/sha256.js\"));\nconst actions_1 = __webpack_require__(/*! ./actions */ \"(ssr)/./node_modules/@near-js/transactions/lib/actions.js\");\nconst create_transaction_1 = __webpack_require__(/*! ./create_transaction */ \"(ssr)/./node_modules/@near-js/transactions/lib/create_transaction.js\");\nconst schema_1 = __webpack_require__(/*! ./schema */ \"(ssr)/./node_modules/@near-js/transactions/lib/schema.js\");\nconst signature_1 = __webpack_require__(/*! ./signature */ \"(ssr)/./node_modules/@near-js/transactions/lib/signature.js\");\n/**\n * Signs a given transaction from an account with given keys, applied to the given network\n * @param transaction The Transaction object to sign\n * @param signer The {Signer} object that assists with signing keys\n * @param accountId The human-readable NEAR account name\n * @param networkId The targeted network. (ex. default, betanet, etc…)\n */ function signTransactionObject(transaction, signer, accountId, networkId) {\n    return __awaiter(this, void 0, void 0, function*() {\n        const message = (0, schema_1.encodeTransaction)(transaction);\n        const hash = new Uint8Array(js_sha256_1.default.sha256.array(message));\n        const signature = yield signer.signMessage(message, accountId, networkId);\n        const signedTx = new schema_1.SignedTransaction({\n            transaction,\n            signature: new signature_1.Signature({\n                keyType: transaction.publicKey.keyType,\n                data: signature.signature\n            })\n        });\n        return [\n            hash,\n            signedTx\n        ];\n    });\n}\nfunction signTransaction(...args) {\n    return __awaiter(this, void 0, void 0, function*() {\n        if (args[0].constructor === schema_1.Transaction) {\n            const [transaction, signer, accountId, networkId] = args;\n            return signTransactionObject(transaction, signer, accountId, networkId);\n        } else {\n            const [receiverId, nonce, actions, blockHash, signer, accountId, networkId] = args;\n            const publicKey = yield signer.getPublicKey(accountId, networkId);\n            const transaction = (0, create_transaction_1.createTransaction)(accountId, publicKey, receiverId, nonce, actions, blockHash);\n            return signTransactionObject(transaction, signer, accountId, networkId);\n        }\n    });\n}\nexports.signTransaction = signTransaction;\n/**\n * Sign a delegate action\n * @params.delegateAction Delegate action to be signed by the meta transaction sender\n * @params.signer Signer instance for the meta transaction sender\n */ function signDelegateAction({ delegateAction, signer }) {\n    return __awaiter(this, void 0, void 0, function*() {\n        const message = (0, schema_1.encodeDelegateAction)(delegateAction);\n        const signature = yield signer.sign(message);\n        const signedDelegateAction = new actions_1.SignedDelegate({\n            delegateAction,\n            signature: new signature_1.Signature({\n                keyType: delegateAction.publicKey.keyType,\n                data: signature\n            })\n        });\n        return {\n            hash: new Uint8Array(js_sha256_1.default.sha256.array(message)),\n            signedDelegateAction\n        };\n    });\n}\nexports.signDelegateAction = signDelegateAction;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@near-js/transactions/lib/sign.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@near-js/transactions/lib/signature.js":
/*!*************************************************************!*\
  !*** ./node_modules/@near-js/transactions/lib/signature.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.Signature = void 0;\nconst types_1 = __webpack_require__(/*! @near-js/types */ \"(ssr)/./node_modules/@near-js/types/lib/index.js\");\nclass Signature extends types_1.Assignable {\n}\nexports.Signature = Signature;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG5lYXItanMvdHJhbnNhY3Rpb25zL2xpYi9zaWduYXR1cmUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELGlCQUFpQixHQUFHLEtBQUs7QUFDekIsTUFBTUcsVUFBVUMsbUJBQU9BLENBQUMsd0VBQWdCO0FBQ3hDLE1BQU1GLGtCQUFrQkMsUUFBUUUsVUFBVTtBQUMxQztBQUNBTCxpQkFBaUIsR0FBR0UiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pLWFtLW5lYXJieS8uL25vZGVfbW9kdWxlcy9AbmVhci1qcy90cmFuc2FjdGlvbnMvbGliL3NpZ25hdHVyZS5qcz9hYWYyIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5TaWduYXR1cmUgPSB2b2lkIDA7XG5jb25zdCB0eXBlc18xID0gcmVxdWlyZShcIkBuZWFyLWpzL3R5cGVzXCIpO1xuY2xhc3MgU2lnbmF0dXJlIGV4dGVuZHMgdHlwZXNfMS5Bc3NpZ25hYmxlIHtcbn1cbmV4cG9ydHMuU2lnbmF0dXJlID0gU2lnbmF0dXJlO1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiU2lnbmF0dXJlIiwidHlwZXNfMSIsInJlcXVpcmUiLCJBc3NpZ25hYmxlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@near-js/transactions/lib/signature.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@near-js/types/lib/assignable.js":
/*!*******************************************************!*\
  !*** ./node_modules/@near-js/types/lib/assignable.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.Assignable = void 0;\nclass Assignable {\n    constructor(properties){\n        Object.keys(properties).map((key)=>{\n            this[key] = properties[key];\n        });\n    }\n}\nexports.Assignable = Assignable;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG5lYXItanMvdHlwZXMvbGliL2Fzc2lnbmFibGUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELGtCQUFrQixHQUFHLEtBQUs7QUFDMUIsTUFBTUU7SUFDRkMsWUFBWUMsVUFBVSxDQUFFO1FBQ3BCTixPQUFPTyxJQUFJLENBQUNELFlBQVlFLEdBQUcsQ0FBQyxDQUFDQztZQUN6QixJQUFJLENBQUNBLElBQUksR0FBR0gsVUFBVSxDQUFDRyxJQUFJO1FBQy9CO0lBQ0o7QUFDSjtBQUNBUCxrQkFBa0IsR0FBR0UiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pLWFtLW5lYXJieS8uL25vZGVfbW9kdWxlcy9AbmVhci1qcy90eXBlcy9saWIvYXNzaWduYWJsZS5qcz8yZjgzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Bc3NpZ25hYmxlID0gdm9pZCAwO1xuY2xhc3MgQXNzaWduYWJsZSB7XG4gICAgY29uc3RydWN0b3IocHJvcGVydGllcykge1xuICAgICAgICBPYmplY3Qua2V5cyhwcm9wZXJ0aWVzKS5tYXAoKGtleSkgPT4ge1xuICAgICAgICAgICAgdGhpc1trZXldID0gcHJvcGVydGllc1trZXldO1xuICAgICAgICB9KTtcbiAgICB9XG59XG5leHBvcnRzLkFzc2lnbmFibGUgPSBBc3NpZ25hYmxlO1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiQXNzaWduYWJsZSIsImNvbnN0cnVjdG9yIiwicHJvcGVydGllcyIsImtleXMiLCJtYXAiLCJrZXkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@near-js/types/lib/assignable.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@near-js/types/lib/errors.js":
/*!***************************************************!*\
  !*** ./node_modules/@near-js/types/lib/errors.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.ErrorContext = exports.TypedError = exports.ArgumentTypeError = exports.PositionalArgsError = void 0;\nclass PositionalArgsError extends Error {\n    constructor(){\n        super(\"Contract method calls expect named arguments wrapped in object, e.g. { argName1: argValue1, argName2: argValue2 }\");\n    }\n}\nexports.PositionalArgsError = PositionalArgsError;\nclass ArgumentTypeError extends Error {\n    constructor(argName, argType, argValue){\n        super(`Expected ${argType} for '${argName}' argument, but got '${JSON.stringify(argValue)}'`);\n    }\n}\nexports.ArgumentTypeError = ArgumentTypeError;\nclass TypedError extends Error {\n    constructor(message, type, context){\n        super(message);\n        this.type = type || \"UntypedError\";\n        this.context = context;\n    }\n}\nexports.TypedError = TypedError;\nclass ErrorContext {\n    constructor(transactionHash){\n        this.transactionHash = transactionHash;\n    }\n}\nexports.ErrorContext = ErrorContext;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG5lYXItanMvdHlwZXMvbGliL2Vycm9ycy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsb0JBQW9CLEdBQUdBLGtCQUFrQixHQUFHQSx5QkFBeUIsR0FBR0EsMkJBQTJCLEdBQUcsS0FBSztBQUMzRyxNQUFNSyw0QkFBNEJDO0lBQzlCQyxhQUFjO1FBQ1YsS0FBSyxDQUFDO0lBQ1Y7QUFDSjtBQUNBUCwyQkFBMkIsR0FBR0s7QUFDOUIsTUFBTUQsMEJBQTBCRTtJQUM1QkMsWUFBWUMsT0FBTyxFQUFFQyxPQUFPLEVBQUVDLFFBQVEsQ0FBRTtRQUNwQyxLQUFLLENBQUMsQ0FBQyxTQUFTLEVBQUVELFFBQVEsTUFBTSxFQUFFRCxRQUFRLHFCQUFxQixFQUFFRyxLQUFLQyxTQUFTLENBQUNGLFVBQVUsQ0FBQyxDQUFDO0lBQ2hHO0FBQ0o7QUFDQVYseUJBQXlCLEdBQUdJO0FBQzVCLE1BQU1ELG1CQUFtQkc7SUFDckJDLFlBQVlNLE9BQU8sRUFBRUMsSUFBSSxFQUFFQyxPQUFPLENBQUU7UUFDaEMsS0FBSyxDQUFDRjtRQUNOLElBQUksQ0FBQ0MsSUFBSSxHQUFHQSxRQUFRO1FBQ3BCLElBQUksQ0FBQ0MsT0FBTyxHQUFHQTtJQUNuQjtBQUNKO0FBQ0FmLGtCQUFrQixHQUFHRztBQUNyQixNQUFNRDtJQUNGSyxZQUFZUyxlQUFlLENBQUU7UUFDekIsSUFBSSxDQUFDQSxlQUFlLEdBQUdBO0lBQzNCO0FBQ0o7QUFDQWhCLG9CQUFvQixHQUFHRSIsInNvdXJjZXMiOlsid2VicGFjazovL2ktYW0tbmVhcmJ5Ly4vbm9kZV9tb2R1bGVzL0BuZWFyLWpzL3R5cGVzL2xpYi9lcnJvcnMuanM/Mzg5OCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuRXJyb3JDb250ZXh0ID0gZXhwb3J0cy5UeXBlZEVycm9yID0gZXhwb3J0cy5Bcmd1bWVudFR5cGVFcnJvciA9IGV4cG9ydHMuUG9zaXRpb25hbEFyZ3NFcnJvciA9IHZvaWQgMDtcbmNsYXNzIFBvc2l0aW9uYWxBcmdzRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCdDb250cmFjdCBtZXRob2QgY2FsbHMgZXhwZWN0IG5hbWVkIGFyZ3VtZW50cyB3cmFwcGVkIGluIG9iamVjdCwgZS5nLiB7IGFyZ05hbWUxOiBhcmdWYWx1ZTEsIGFyZ05hbWUyOiBhcmdWYWx1ZTIgfScpO1xuICAgIH1cbn1cbmV4cG9ydHMuUG9zaXRpb25hbEFyZ3NFcnJvciA9IFBvc2l0aW9uYWxBcmdzRXJyb3I7XG5jbGFzcyBBcmd1bWVudFR5cGVFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihhcmdOYW1lLCBhcmdUeXBlLCBhcmdWYWx1ZSkge1xuICAgICAgICBzdXBlcihgRXhwZWN0ZWQgJHthcmdUeXBlfSBmb3IgJyR7YXJnTmFtZX0nIGFyZ3VtZW50LCBidXQgZ290ICcke0pTT04uc3RyaW5naWZ5KGFyZ1ZhbHVlKX0nYCk7XG4gICAgfVxufVxuZXhwb3J0cy5Bcmd1bWVudFR5cGVFcnJvciA9IEFyZ3VtZW50VHlwZUVycm9yO1xuY2xhc3MgVHlwZWRFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlLCB0eXBlLCBjb250ZXh0KSB7XG4gICAgICAgIHN1cGVyKG1lc3NhZ2UpO1xuICAgICAgICB0aGlzLnR5cGUgPSB0eXBlIHx8ICdVbnR5cGVkRXJyb3InO1xuICAgICAgICB0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xuICAgIH1cbn1cbmV4cG9ydHMuVHlwZWRFcnJvciA9IFR5cGVkRXJyb3I7XG5jbGFzcyBFcnJvckNvbnRleHQge1xuICAgIGNvbnN0cnVjdG9yKHRyYW5zYWN0aW9uSGFzaCkge1xuICAgICAgICB0aGlzLnRyYW5zYWN0aW9uSGFzaCA9IHRyYW5zYWN0aW9uSGFzaDtcbiAgICB9XG59XG5leHBvcnRzLkVycm9yQ29udGV4dCA9IEVycm9yQ29udGV4dDtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIkVycm9yQ29udGV4dCIsIlR5cGVkRXJyb3IiLCJBcmd1bWVudFR5cGVFcnJvciIsIlBvc2l0aW9uYWxBcmdzRXJyb3IiLCJFcnJvciIsImNvbnN0cnVjdG9yIiwiYXJnTmFtZSIsImFyZ1R5cGUiLCJhcmdWYWx1ZSIsIkpTT04iLCJzdHJpbmdpZnkiLCJtZXNzYWdlIiwidHlwZSIsImNvbnRleHQiLCJ0cmFuc2FjdGlvbkhhc2giXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@near-js/types/lib/errors.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@near-js/types/lib/index.js":
/*!**************************************************!*\
  !*** ./node_modules/@near-js/types/lib/index.js ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n        desc = {\n            enumerable: true,\n            get: function() {\n                return m[k];\n            }\n        };\n    }\n    Object.defineProperty(o, k2, desc);\n} : function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n});\nvar __exportStar = this && this.__exportStar || function(m, exports1) {\n    for(var p in m)if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n__exportStar(__webpack_require__(/*! ./assignable */ \"(ssr)/./node_modules/@near-js/types/lib/assignable.js\"), exports);\n__exportStar(__webpack_require__(/*! ./errors */ \"(ssr)/./node_modules/@near-js/types/lib/errors.js\"), exports);\n__exportStar(__webpack_require__(/*! ./provider */ \"(ssr)/./node_modules/@near-js/types/lib/provider/index.js\"), exports);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG5lYXItanMvdHlwZXMvbGliL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsSUFBSUEsa0JBQWtCLElBQUssSUFBSSxJQUFJLENBQUNBLGVBQWUsSUFBTUMsQ0FBQUEsT0FBT0MsTUFBTSxHQUFJLFNBQVNDLENBQUMsRUFBRUMsQ0FBQyxFQUFFQyxDQUFDLEVBQUVDLEVBQUU7SUFDMUYsSUFBSUEsT0FBT0MsV0FBV0QsS0FBS0Q7SUFDM0IsSUFBSUcsT0FBT1AsT0FBT1Esd0JBQXdCLENBQUNMLEdBQUdDO0lBQzlDLElBQUksQ0FBQ0csUUFBUyxVQUFTQSxPQUFPLENBQUNKLEVBQUVNLFVBQVUsR0FBR0YsS0FBS0csUUFBUSxJQUFJSCxLQUFLSSxZQUFZLEdBQUc7UUFDakZKLE9BQU87WUFBRUssWUFBWTtZQUFNQyxLQUFLO2dCQUFhLE9BQU9WLENBQUMsQ0FBQ0MsRUFBRTtZQUFFO1FBQUU7SUFDOUQ7SUFDQUosT0FBT2MsY0FBYyxDQUFDWixHQUFHRyxJQUFJRTtBQUNqQyxJQUFNLFNBQVNMLENBQUMsRUFBRUMsQ0FBQyxFQUFFQyxDQUFDLEVBQUVDLEVBQUU7SUFDdEIsSUFBSUEsT0FBT0MsV0FBV0QsS0FBS0Q7SUFDM0JGLENBQUMsQ0FBQ0csR0FBRyxHQUFHRixDQUFDLENBQUNDLEVBQUU7QUFDaEIsQ0FBQztBQUNELElBQUlXLGVBQWUsSUFBSyxJQUFJLElBQUksQ0FBQ0EsWUFBWSxJQUFLLFNBQVNaLENBQUMsRUFBRWEsUUFBTztJQUNqRSxJQUFLLElBQUlDLEtBQUtkLEVBQUcsSUFBSWMsTUFBTSxhQUFhLENBQUNqQixPQUFPa0IsU0FBUyxDQUFDQyxjQUFjLENBQUNDLElBQUksQ0FBQ0osVUFBU0MsSUFBSWxCLGdCQUFnQmlCLFVBQVNiLEdBQUdjO0FBQzNIO0FBQ0FqQiw4Q0FBNkM7SUFBRXFCLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0ROLGFBQWFPLG1CQUFPQSxDQUFDLDJFQUFjLEdBQUdOO0FBQ3RDRCxhQUFhTyxtQkFBT0EsQ0FBQyxtRUFBVSxHQUFHTjtBQUNsQ0QsYUFBYU8sbUJBQU9BLENBQUMsNkVBQVksR0FBR04iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pLWFtLW5lYXJieS8uL25vZGVfbW9kdWxlcy9AbmVhci1qcy90eXBlcy9saWIvaW5kZXguanM/ZTFmMiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihtLCBrKTtcbiAgICBpZiAoIWRlc2MgfHwgKFwiZ2V0XCIgaW4gZGVzYyA/ICFtLl9fZXNNb2R1bGUgOiBkZXNjLndyaXRhYmxlIHx8IGRlc2MuY29uZmlndXJhYmxlKSkge1xuICAgICAgZGVzYyA9IHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCBkZXNjKTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19leHBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2V4cG9ydFN0YXIpIHx8IGZ1bmN0aW9uKG0sIGV4cG9ydHMpIHtcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmIChwICE9PSBcImRlZmF1bHRcIiAmJiAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGV4cG9ydHMsIHApKSBfX2NyZWF0ZUJpbmRpbmcoZXhwb3J0cywgbSwgcCk7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2Fzc2lnbmFibGVcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2Vycm9yc1wiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vcHJvdmlkZXJcIiksIGV4cG9ydHMpO1xuIl0sIm5hbWVzIjpbIl9fY3JlYXRlQmluZGluZyIsIk9iamVjdCIsImNyZWF0ZSIsIm8iLCJtIiwiayIsImsyIiwidW5kZWZpbmVkIiwiZGVzYyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIl9fZXNNb2R1bGUiLCJ3cml0YWJsZSIsImNvbmZpZ3VyYWJsZSIsImVudW1lcmFibGUiLCJnZXQiLCJkZWZpbmVQcm9wZXJ0eSIsIl9fZXhwb3J0U3RhciIsImV4cG9ydHMiLCJwIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwidmFsdWUiLCJyZXF1aXJlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@near-js/types/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@near-js/types/lib/provider/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/@near-js/types/lib/provider/index.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.FinalExecutionStatusBasic = exports.ExecutionStatusBasic = exports.IdType = void 0;\nvar light_client_1 = __webpack_require__(/*! ./light_client */ \"(ssr)/./node_modules/@near-js/types/lib/provider/light_client.js\");\nObject.defineProperty(exports, \"IdType\", ({\n    enumerable: true,\n    get: function() {\n        return light_client_1.IdType;\n    }\n}));\nvar response_1 = __webpack_require__(/*! ./response */ \"(ssr)/./node_modules/@near-js/types/lib/provider/response.js\");\nObject.defineProperty(exports, \"ExecutionStatusBasic\", ({\n    enumerable: true,\n    get: function() {\n        return response_1.ExecutionStatusBasic;\n    }\n}));\nObject.defineProperty(exports, \"FinalExecutionStatusBasic\", ({\n    enumerable: true,\n    get: function() {\n        return response_1.FinalExecutionStatusBasic;\n    }\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG5lYXItanMvdHlwZXMvbGliL3Byb3ZpZGVyL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxpQ0FBaUMsR0FBR0EsNEJBQTRCLEdBQUdBLGNBQWMsR0FBRyxLQUFLO0FBQ3pGLElBQUlLLGlCQUFpQkMsbUJBQU9BLENBQUMsd0ZBQWdCO0FBQzdDUiwwQ0FBeUM7SUFBRVMsWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT0gsZUFBZUQsTUFBTTtJQUFFO0FBQUUsQ0FBQyxFQUFDO0FBQ2xILElBQUlLLGFBQWFILG1CQUFPQSxDQUFDLGdGQUFZO0FBQ3JDUix3REFBdUQ7SUFBRVMsWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT0MsV0FBV04sb0JBQW9CO0lBQUU7QUFBRSxDQUFDLEVBQUM7QUFDMUlMLDZEQUE0RDtJQUFFUyxZQUFZO0lBQU1DLEtBQUs7UUFBYyxPQUFPQyxXQUFXUCx5QkFBeUI7SUFBRTtBQUFFLENBQUMsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2ktYW0tbmVhcmJ5Ly4vbm9kZV9tb2R1bGVzL0BuZWFyLWpzL3R5cGVzL2xpYi9wcm92aWRlci9pbmRleC5qcz82ZmY1Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5GaW5hbEV4ZWN1dGlvblN0YXR1c0Jhc2ljID0gZXhwb3J0cy5FeGVjdXRpb25TdGF0dXNCYXNpYyA9IGV4cG9ydHMuSWRUeXBlID0gdm9pZCAwO1xudmFyIGxpZ2h0X2NsaWVudF8xID0gcmVxdWlyZShcIi4vbGlnaHRfY2xpZW50XCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiSWRUeXBlXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBsaWdodF9jbGllbnRfMS5JZFR5cGU7IH0gfSk7XG52YXIgcmVzcG9uc2VfMSA9IHJlcXVpcmUoXCIuL3Jlc3BvbnNlXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiRXhlY3V0aW9uU3RhdHVzQmFzaWNcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlc3BvbnNlXzEuRXhlY3V0aW9uU3RhdHVzQmFzaWM7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJGaW5hbEV4ZWN1dGlvblN0YXR1c0Jhc2ljXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiByZXNwb25zZV8xLkZpbmFsRXhlY3V0aW9uU3RhdHVzQmFzaWM7IH0gfSk7XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJGaW5hbEV4ZWN1dGlvblN0YXR1c0Jhc2ljIiwiRXhlY3V0aW9uU3RhdHVzQmFzaWMiLCJJZFR5cGUiLCJsaWdodF9jbGllbnRfMSIsInJlcXVpcmUiLCJlbnVtZXJhYmxlIiwiZ2V0IiwicmVzcG9uc2VfMSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@near-js/types/lib/provider/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@near-js/types/lib/provider/light_client.js":
/*!******************************************************************!*\
  !*** ./node_modules/@near-js/types/lib/provider/light_client.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/**\n * NEAR RPC API request types and responses\n * @module\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.IdType = void 0;\nvar IdType;\n(function(IdType) {\n    IdType[\"Transaction\"] = \"transaction\";\n    IdType[\"Receipt\"] = \"receipt\";\n})(IdType = exports.IdType || (exports.IdType = {}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG5lYXItanMvdHlwZXMvbGliL3Byb3ZpZGVyL2xpZ2h0X2NsaWVudC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiOzs7Q0FHQyxHQUNEQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsY0FBYyxHQUFHLEtBQUs7QUFDdEIsSUFBSUU7QUFDSCxVQUFVQSxNQUFNO0lBQ2JBLE1BQU0sQ0FBQyxjQUFjLEdBQUc7SUFDeEJBLE1BQU0sQ0FBQyxVQUFVLEdBQUc7QUFDeEIsR0FBR0EsU0FBU0YsUUFBUUUsTUFBTSxJQUFLRixDQUFBQSxjQUFjLEdBQUcsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2ktYW0tbmVhcmJ5Ly4vbm9kZV9tb2R1bGVzL0BuZWFyLWpzL3R5cGVzL2xpYi9wcm92aWRlci9saWdodF9jbGllbnQuanM/NTJmZiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qKlxuICogTkVBUiBSUEMgQVBJIHJlcXVlc3QgdHlwZXMgYW5kIHJlc3BvbnNlc1xuICogQG1vZHVsZVxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLklkVHlwZSA9IHZvaWQgMDtcbnZhciBJZFR5cGU7XG4oZnVuY3Rpb24gKElkVHlwZSkge1xuICAgIElkVHlwZVtcIlRyYW5zYWN0aW9uXCJdID0gXCJ0cmFuc2FjdGlvblwiO1xuICAgIElkVHlwZVtcIlJlY2VpcHRcIl0gPSBcInJlY2VpcHRcIjtcbn0pKElkVHlwZSA9IGV4cG9ydHMuSWRUeXBlIHx8IChleHBvcnRzLklkVHlwZSA9IHt9KSk7XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJJZFR5cGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@near-js/types/lib/provider/light_client.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@near-js/types/lib/provider/response.js":
/*!**************************************************************!*\
  !*** ./node_modules/@near-js/types/lib/provider/response.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/**\n * NEAR RPC API request types and responses\n * @module\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.FinalExecutionStatusBasic = exports.ExecutionStatusBasic = void 0;\nvar ExecutionStatusBasic;\n(function(ExecutionStatusBasic) {\n    ExecutionStatusBasic[\"Unknown\"] = \"Unknown\";\n    ExecutionStatusBasic[\"Pending\"] = \"Pending\";\n    ExecutionStatusBasic[\"Failure\"] = \"Failure\";\n})(ExecutionStatusBasic = exports.ExecutionStatusBasic || (exports.ExecutionStatusBasic = {}));\nvar FinalExecutionStatusBasic;\n(function(FinalExecutionStatusBasic) {\n    FinalExecutionStatusBasic[\"NotStarted\"] = \"NotStarted\";\n    FinalExecutionStatusBasic[\"Started\"] = \"Started\";\n    FinalExecutionStatusBasic[\"Failure\"] = \"Failure\";\n})(FinalExecutionStatusBasic = exports.FinalExecutionStatusBasic || (exports.FinalExecutionStatusBasic = {}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG5lYXItanMvdHlwZXMvbGliL3Byb3ZpZGVyL3Jlc3BvbnNlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7OztDQUdDLEdBQ0RBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxpQ0FBaUMsR0FBR0EsNEJBQTRCLEdBQUcsS0FBSztBQUN4RSxJQUFJRztBQUNILFVBQVVBLG9CQUFvQjtJQUMzQkEsb0JBQW9CLENBQUMsVUFBVSxHQUFHO0lBQ2xDQSxvQkFBb0IsQ0FBQyxVQUFVLEdBQUc7SUFDbENBLG9CQUFvQixDQUFDLFVBQVUsR0FBRztBQUN0QyxHQUFHQSx1QkFBdUJILFFBQVFHLG9CQUFvQixJQUFLSCxDQUFBQSw0QkFBNEIsR0FBRyxDQUFDO0FBQzNGLElBQUlFO0FBQ0gsVUFBVUEseUJBQXlCO0lBQ2hDQSx5QkFBeUIsQ0FBQyxhQUFhLEdBQUc7SUFDMUNBLHlCQUF5QixDQUFDLFVBQVUsR0FBRztJQUN2Q0EseUJBQXlCLENBQUMsVUFBVSxHQUFHO0FBQzNDLEdBQUdBLDRCQUE0QkYsUUFBUUUseUJBQXlCLElBQUtGLENBQUFBLGlDQUFpQyxHQUFHLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pLWFtLW5lYXJieS8uL25vZGVfbW9kdWxlcy9AbmVhci1qcy90eXBlcy9saWIvcHJvdmlkZXIvcmVzcG9uc2UuanM/NDEzNiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qKlxuICogTkVBUiBSUEMgQVBJIHJlcXVlc3QgdHlwZXMgYW5kIHJlc3BvbnNlc1xuICogQG1vZHVsZVxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkZpbmFsRXhlY3V0aW9uU3RhdHVzQmFzaWMgPSBleHBvcnRzLkV4ZWN1dGlvblN0YXR1c0Jhc2ljID0gdm9pZCAwO1xudmFyIEV4ZWN1dGlvblN0YXR1c0Jhc2ljO1xuKGZ1bmN0aW9uIChFeGVjdXRpb25TdGF0dXNCYXNpYykge1xuICAgIEV4ZWN1dGlvblN0YXR1c0Jhc2ljW1wiVW5rbm93blwiXSA9IFwiVW5rbm93blwiO1xuICAgIEV4ZWN1dGlvblN0YXR1c0Jhc2ljW1wiUGVuZGluZ1wiXSA9IFwiUGVuZGluZ1wiO1xuICAgIEV4ZWN1dGlvblN0YXR1c0Jhc2ljW1wiRmFpbHVyZVwiXSA9IFwiRmFpbHVyZVwiO1xufSkoRXhlY3V0aW9uU3RhdHVzQmFzaWMgPSBleHBvcnRzLkV4ZWN1dGlvblN0YXR1c0Jhc2ljIHx8IChleHBvcnRzLkV4ZWN1dGlvblN0YXR1c0Jhc2ljID0ge30pKTtcbnZhciBGaW5hbEV4ZWN1dGlvblN0YXR1c0Jhc2ljO1xuKGZ1bmN0aW9uIChGaW5hbEV4ZWN1dGlvblN0YXR1c0Jhc2ljKSB7XG4gICAgRmluYWxFeGVjdXRpb25TdGF0dXNCYXNpY1tcIk5vdFN0YXJ0ZWRcIl0gPSBcIk5vdFN0YXJ0ZWRcIjtcbiAgICBGaW5hbEV4ZWN1dGlvblN0YXR1c0Jhc2ljW1wiU3RhcnRlZFwiXSA9IFwiU3RhcnRlZFwiO1xuICAgIEZpbmFsRXhlY3V0aW9uU3RhdHVzQmFzaWNbXCJGYWlsdXJlXCJdID0gXCJGYWlsdXJlXCI7XG59KShGaW5hbEV4ZWN1dGlvblN0YXR1c0Jhc2ljID0gZXhwb3J0cy5GaW5hbEV4ZWN1dGlvblN0YXR1c0Jhc2ljIHx8IChleHBvcnRzLkZpbmFsRXhlY3V0aW9uU3RhdHVzQmFzaWMgPSB7fSkpO1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiRmluYWxFeGVjdXRpb25TdGF0dXNCYXNpYyIsIkV4ZWN1dGlvblN0YXR1c0Jhc2ljIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@near-js/types/lib/provider/response.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@near-js/utils/lib/constants.js":
/*!******************************************************!*\
  !*** ./node_modules/@near-js/utils/lib/constants.js ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = this && this.__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.DEFAULT_FUNCTION_CALL_GAS = void 0;\nconst bn_js_1 = __importDefault(__webpack_require__(/*! bn.js */ \"(ssr)/./node_modules/bn.js/lib/bn.js\"));\n// Default amount of gas to be sent with the function calls. Used to pay for the fees\n// incurred while running the contract execution. The unused amount will be refunded back to\n// the originator.\n// Due to protocol changes that charge upfront for the maximum possible gas price inflation due to\n// full blocks, the price of max_prepaid_gas is decreased to `300 * 10**12`.\n// For discussion see https://github.com/nearprotocol/NEPs/issues/67\nexports.DEFAULT_FUNCTION_CALL_GAS = new bn_js_1.default(\"30000000000000\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG5lYXItanMvdXRpbHMvbGliL2NvbnN0YW50cy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLElBQUlBLGtCQUFrQixJQUFLLElBQUksSUFBSSxDQUFDQSxlQUFlLElBQUssU0FBVUMsR0FBRztJQUNqRSxPQUFPLE9BQVFBLElBQUlDLFVBQVUsR0FBSUQsTUFBTTtRQUFFLFdBQVdBO0lBQUk7QUFDNUQ7QUFDQUUsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELGlDQUFpQyxHQUFHLEtBQUs7QUFDekMsTUFBTUcsVUFBVVIsZ0JBQWdCUyxtQkFBT0EsQ0FBQyxtREFBTztBQUMvQyxxRkFBcUY7QUFDckYsNEZBQTRGO0FBQzVGLGtCQUFrQjtBQUNsQixrR0FBa0c7QUFDbEcsNEVBQTRFO0FBQzVFLG9FQUFvRTtBQUNwRUosaUNBQWlDLEdBQUcsSUFBSUcsUUFBUUUsT0FBTyxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaS1hbS1uZWFyYnkvLi9ub2RlX21vZHVsZXMvQG5lYXItanMvdXRpbHMvbGliL2NvbnN0YW50cy5qcz9iY2E3Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5ERUZBVUxUX0ZVTkNUSU9OX0NBTExfR0FTID0gdm9pZCAwO1xuY29uc3QgYm5fanNfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiYm4uanNcIikpO1xuLy8gRGVmYXVsdCBhbW91bnQgb2YgZ2FzIHRvIGJlIHNlbnQgd2l0aCB0aGUgZnVuY3Rpb24gY2FsbHMuIFVzZWQgdG8gcGF5IGZvciB0aGUgZmVlc1xuLy8gaW5jdXJyZWQgd2hpbGUgcnVubmluZyB0aGUgY29udHJhY3QgZXhlY3V0aW9uLiBUaGUgdW51c2VkIGFtb3VudCB3aWxsIGJlIHJlZnVuZGVkIGJhY2sgdG9cbi8vIHRoZSBvcmlnaW5hdG9yLlxuLy8gRHVlIHRvIHByb3RvY29sIGNoYW5nZXMgdGhhdCBjaGFyZ2UgdXBmcm9udCBmb3IgdGhlIG1heGltdW0gcG9zc2libGUgZ2FzIHByaWNlIGluZmxhdGlvbiBkdWUgdG9cbi8vIGZ1bGwgYmxvY2tzLCB0aGUgcHJpY2Ugb2YgbWF4X3ByZXBhaWRfZ2FzIGlzIGRlY3JlYXNlZCB0byBgMzAwICogMTAqKjEyYC5cbi8vIEZvciBkaXNjdXNzaW9uIHNlZSBodHRwczovL2dpdGh1Yi5jb20vbmVhcnByb3RvY29sL05FUHMvaXNzdWVzLzY3XG5leHBvcnRzLkRFRkFVTFRfRlVOQ1RJT05fQ0FMTF9HQVMgPSBuZXcgYm5fanNfMS5kZWZhdWx0KCczMDAwMDAwMDAwMDAwMCcpO1xuIl0sIm5hbWVzIjpbIl9faW1wb3J0RGVmYXVsdCIsIm1vZCIsIl9fZXNNb2R1bGUiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIkRFRkFVTFRfRlVOQ1RJT05fQ0FMTF9HQVMiLCJibl9qc18xIiwicmVxdWlyZSIsImRlZmF1bHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@near-js/utils/lib/constants.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@near-js/utils/lib/errors/errors.js":
/*!**********************************************************!*\
  !*** ./node_modules/@near-js/utils/lib/errors/errors.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.logWarning = void 0;\nfunction logWarning(...args) {\n    if (!process.env[\"NEAR_NO_LOGS\"]) {\n        console.warn(...args);\n    }\n}\nexports.logWarning = logWarning;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG5lYXItanMvdXRpbHMvbGliL2Vycm9ycy9lcnJvcnMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELGtCQUFrQixHQUFHLEtBQUs7QUFDMUIsU0FBU0UsV0FBVyxHQUFHQyxJQUFJO0lBQ3ZCLElBQUksQ0FBQ0MsUUFBUUMsR0FBRyxDQUFDLGVBQWUsRUFBRTtRQUM5QkMsUUFBUUMsSUFBSSxJQUFJSjtJQUNwQjtBQUNKO0FBQ0FILGtCQUFrQixHQUFHRSIsInNvdXJjZXMiOlsid2VicGFjazovL2ktYW0tbmVhcmJ5Ly4vbm9kZV9tb2R1bGVzL0BuZWFyLWpzL3V0aWxzL2xpYi9lcnJvcnMvZXJyb3JzLmpzPzRmMWMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmxvZ1dhcm5pbmcgPSB2b2lkIDA7XG5mdW5jdGlvbiBsb2dXYXJuaW5nKC4uLmFyZ3MpIHtcbiAgICBpZiAoIXByb2Nlc3MuZW52WydORUFSX05PX0xPR1MnXSkge1xuICAgICAgICBjb25zb2xlLndhcm4oLi4uYXJncyk7XG4gICAgfVxufVxuZXhwb3J0cy5sb2dXYXJuaW5nID0gbG9nV2FybmluZztcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImxvZ1dhcm5pbmciLCJhcmdzIiwicHJvY2VzcyIsImVudiIsImNvbnNvbGUiLCJ3YXJuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@near-js/utils/lib/errors/errors.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@near-js/utils/lib/errors/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/@near-js/utils/lib/errors/index.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.parseRpcError = exports.parseResultError = exports.getErrorTypeFromErrorMessage = exports.formatError = exports.ServerError = exports.logWarning = void 0;\nvar errors_1 = __webpack_require__(/*! ./errors */ \"(ssr)/./node_modules/@near-js/utils/lib/errors/errors.js\");\nObject.defineProperty(exports, \"logWarning\", ({\n    enumerable: true,\n    get: function() {\n        return errors_1.logWarning;\n    }\n}));\nvar rpc_errors_1 = __webpack_require__(/*! ./rpc_errors */ \"(ssr)/./node_modules/@near-js/utils/lib/errors/rpc_errors.js\");\nObject.defineProperty(exports, \"ServerError\", ({\n    enumerable: true,\n    get: function() {\n        return rpc_errors_1.ServerError;\n    }\n}));\nObject.defineProperty(exports, \"formatError\", ({\n    enumerable: true,\n    get: function() {\n        return rpc_errors_1.formatError;\n    }\n}));\nObject.defineProperty(exports, \"getErrorTypeFromErrorMessage\", ({\n    enumerable: true,\n    get: function() {\n        return rpc_errors_1.getErrorTypeFromErrorMessage;\n    }\n}));\nObject.defineProperty(exports, \"parseResultError\", ({\n    enumerable: true,\n    get: function() {\n        return rpc_errors_1.parseResultError;\n    }\n}));\nObject.defineProperty(exports, \"parseRpcError\", ({\n    enumerable: true,\n    get: function() {\n        return rpc_errors_1.parseRpcError;\n    }\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG5lYXItanMvdXRpbHMvbGliL2Vycm9ycy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQscUJBQXFCLEdBQUdBLHdCQUF3QixHQUFHQSxvQ0FBb0MsR0FBR0EsbUJBQW1CLEdBQUdBLG1CQUFtQixHQUFHQSxrQkFBa0IsR0FBRyxLQUFLO0FBQ2hLLElBQUlRLFdBQVdDLG1CQUFPQSxDQUFDLDBFQUFVO0FBQ2pDWCw4Q0FBNkM7SUFBRVksWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT0gsU0FBU0QsVUFBVTtJQUFFO0FBQUUsQ0FBQyxFQUFDO0FBQ3BILElBQUlLLGVBQWVILG1CQUFPQSxDQUFDLGtGQUFjO0FBQ3pDWCwrQ0FBOEM7SUFBRVksWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT0MsYUFBYU4sV0FBVztJQUFFO0FBQUUsQ0FBQyxFQUFDO0FBQzFIUiwrQ0FBOEM7SUFBRVksWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT0MsYUFBYVAsV0FBVztJQUFFO0FBQUUsQ0FBQyxFQUFDO0FBQzFIUCxnRUFBK0Q7SUFBRVksWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT0MsYUFBYVIsNEJBQTRCO0lBQUU7QUFBRSxDQUFDLEVBQUM7QUFDNUpOLG9EQUFtRDtJQUFFWSxZQUFZO0lBQU1DLEtBQUs7UUFBYyxPQUFPQyxhQUFhVCxnQkFBZ0I7SUFBRTtBQUFFLENBQUMsRUFBQztBQUNwSUwsaURBQWdEO0lBQUVZLFlBQVk7SUFBTUMsS0FBSztRQUFjLE9BQU9DLGFBQWFWLGFBQWE7SUFBRTtBQUFFLENBQUMsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2ktYW0tbmVhcmJ5Ly4vbm9kZV9tb2R1bGVzL0BuZWFyLWpzL3V0aWxzL2xpYi9lcnJvcnMvaW5kZXguanM/ZTlhOCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMucGFyc2VScGNFcnJvciA9IGV4cG9ydHMucGFyc2VSZXN1bHRFcnJvciA9IGV4cG9ydHMuZ2V0RXJyb3JUeXBlRnJvbUVycm9yTWVzc2FnZSA9IGV4cG9ydHMuZm9ybWF0RXJyb3IgPSBleHBvcnRzLlNlcnZlckVycm9yID0gZXhwb3J0cy5sb2dXYXJuaW5nID0gdm9pZCAwO1xudmFyIGVycm9yc18xID0gcmVxdWlyZShcIi4vZXJyb3JzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwibG9nV2FybmluZ1wiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZXJyb3JzXzEubG9nV2FybmluZzsgfSB9KTtcbnZhciBycGNfZXJyb3JzXzEgPSByZXF1aXJlKFwiLi9ycGNfZXJyb3JzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiU2VydmVyRXJyb3JcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJwY19lcnJvcnNfMS5TZXJ2ZXJFcnJvcjsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImZvcm1hdEVycm9yXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBycGNfZXJyb3JzXzEuZm9ybWF0RXJyb3I7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJnZXRFcnJvclR5cGVGcm9tRXJyb3JNZXNzYWdlXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBycGNfZXJyb3JzXzEuZ2V0RXJyb3JUeXBlRnJvbUVycm9yTWVzc2FnZTsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInBhcnNlUmVzdWx0RXJyb3JcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJwY19lcnJvcnNfMS5wYXJzZVJlc3VsdEVycm9yOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwicGFyc2VScGNFcnJvclwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcnBjX2Vycm9yc18xLnBhcnNlUnBjRXJyb3I7IH0gfSk7XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJwYXJzZVJwY0Vycm9yIiwicGFyc2VSZXN1bHRFcnJvciIsImdldEVycm9yVHlwZUZyb21FcnJvck1lc3NhZ2UiLCJmb3JtYXRFcnJvciIsIlNlcnZlckVycm9yIiwibG9nV2FybmluZyIsImVycm9yc18xIiwicmVxdWlyZSIsImVudW1lcmFibGUiLCJnZXQiLCJycGNfZXJyb3JzXzEiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@near-js/utils/lib/errors/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@near-js/utils/lib/errors/rpc_errors.js":
/*!**************************************************************!*\
  !*** ./node_modules/@near-js/utils/lib/errors/rpc_errors.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = this && this.__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.getErrorTypeFromErrorMessage = exports.formatError = exports.parseResultError = exports.parseRpcError = exports.ServerError = void 0;\nconst types_1 = __webpack_require__(/*! @near-js/types */ \"(ssr)/./node_modules/@near-js/types/lib/index.js\");\nconst mustache_1 = __importDefault(__webpack_require__(/*! mustache */ \"(ssr)/./node_modules/mustache/mustache.js\"));\nconst format_1 = __webpack_require__(/*! ../format */ \"(ssr)/./node_modules/@near-js/utils/lib/format.js\");\nconst error_messages_json_1 = __importDefault(__webpack_require__(/*! ./error_messages.json */ \"(ssr)/./node_modules/@near-js/utils/lib/errors/error_messages.json\"));\nconst rpc_error_schema_json_1 = __importDefault(__webpack_require__(/*! ./rpc_error_schema.json */ \"(ssr)/./node_modules/@near-js/utils/lib/errors/rpc_error_schema.json\"));\nconst mustacheHelpers = {\n    formatNear: ()=>(n, render)=>(0, format_1.formatNearAmount)(render(n))\n};\nclass ServerError extends types_1.TypedError {\n}\nexports.ServerError = ServerError;\nclass ServerTransactionError extends ServerError {\n}\nfunction parseRpcError(errorObj) {\n    const result = {};\n    const errorClassName = walkSubtype(errorObj, rpc_error_schema_json_1.default.schema, result, \"\");\n    // NOTE: This assumes that all errors extend TypedError\n    const error = new ServerError(formatError(errorClassName, result), errorClassName);\n    Object.assign(error, result);\n    return error;\n}\nexports.parseRpcError = parseRpcError;\nfunction parseResultError(result) {\n    const server_error = parseRpcError(result.status.Failure);\n    const server_tx_error = new ServerTransactionError();\n    Object.assign(server_tx_error, server_error);\n    server_tx_error.type = server_error.type;\n    server_tx_error.message = server_error.message;\n    server_tx_error.transaction_outcome = result.transaction_outcome;\n    return server_tx_error;\n}\nexports.parseResultError = parseResultError;\nfunction formatError(errorClassName, errorData) {\n    if (typeof error_messages_json_1.default[errorClassName] === \"string\") {\n        return mustache_1.default.render(error_messages_json_1.default[errorClassName], Object.assign(Object.assign({}, errorData), mustacheHelpers));\n    }\n    return JSON.stringify(errorData);\n}\nexports.formatError = formatError;\n/**\n * Walks through defined schema returning error(s) recursively\n * @param errorObj The error to be parsed\n * @param schema A defined schema in JSON mapping to the RPC errors\n * @param result An object used in recursion or called directly\n * @param typeName The human-readable error type name as defined in the JSON mapping\n */ function walkSubtype(errorObj, schema, result, typeName) {\n    let error;\n    let type;\n    let errorTypeName;\n    for(const errorName in schema){\n        if (isString(errorObj[errorName])) {\n            // Return early if error type is in a schema\n            return errorObj[errorName];\n        }\n        if (isObject(errorObj[errorName])) {\n            error = errorObj[errorName];\n            type = schema[errorName];\n            errorTypeName = errorName;\n        } else if (isObject(errorObj.kind) && isObject(errorObj.kind[errorName])) {\n            error = errorObj.kind[errorName];\n            type = schema[errorName];\n            errorTypeName = errorName;\n        } else {\n            continue;\n        }\n    }\n    if (error && type) {\n        for (const prop of Object.keys(type.props)){\n            result[prop] = error[prop];\n        }\n        return walkSubtype(error, schema, result, errorTypeName);\n    } else {\n        // TODO: is this the right thing to do?\n        result.kind = errorObj;\n        return typeName;\n    }\n}\nfunction getErrorTypeFromErrorMessage(errorMessage, errorType) {\n    // This function should be removed when JSON RPC starts returning typed errors.\n    switch(true){\n        case /^account .*? does not exist while viewing$/.test(errorMessage):\n            return \"AccountDoesNotExist\";\n        case /^Account .*? doesn't exist$/.test(errorMessage):\n            return \"AccountDoesNotExist\";\n        case /^access key .*? does not exist while viewing$/.test(errorMessage):\n            return \"AccessKeyDoesNotExist\";\n        case /wasm execution failed with error: FunctionCallError\\(CompilationError\\(CodeDoesNotExist/.test(errorMessage):\n            return \"CodeDoesNotExist\";\n        case /Transaction nonce \\d+ must be larger than nonce of the used access key \\d+/.test(errorMessage):\n            return \"InvalidNonce\";\n        default:\n            return errorType;\n    }\n}\nexports.getErrorTypeFromErrorMessage = getErrorTypeFromErrorMessage;\n/**\n * Helper function determining if the argument is an object\n * @param n Value to check\n */ function isObject(n) {\n    return Object.prototype.toString.call(n) === \"[object Object]\";\n}\n/**\n * Helper function determining if the argument is a string\n * @param n Value to check\n */ function isString(n) {\n    return Object.prototype.toString.call(n) === \"[object String]\";\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@near-js/utils/lib/errors/rpc_errors.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@near-js/utils/lib/format.js":
/*!***************************************************!*\
  !*** ./node_modules/@near-js/utils/lib/format.js ***!
  \***************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = this && this.__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.parseNearAmount = exports.formatNearAmount = exports.NEAR_NOMINATION = exports.NEAR_NOMINATION_EXP = void 0;\nconst bn_js_1 = __importDefault(__webpack_require__(/*! bn.js */ \"(ssr)/./node_modules/bn.js/lib/bn.js\"));\n/**\n * Exponent for calculating how many indivisible units are there in one NEAR. See {@link NEAR_NOMINATION}.\n */ exports.NEAR_NOMINATION_EXP = 24;\n/**\n * Number of indivisible units in one NEAR. Derived from {@link NEAR_NOMINATION_EXP}.\n */ exports.NEAR_NOMINATION = new bn_js_1.default(\"10\", 10).pow(new bn_js_1.default(exports.NEAR_NOMINATION_EXP, 10));\n// Pre-calculate offests used for rounding to different number of digits\nconst ROUNDING_OFFSETS = [];\nconst BN10 = new bn_js_1.default(10);\nfor(let i = 0, offset = new bn_js_1.default(5); i < exports.NEAR_NOMINATION_EXP; i++, offset = offset.mul(BN10)){\n    ROUNDING_OFFSETS[i] = offset;\n}\n/**\n * Convert account balance value from internal indivisible units to NEAR. 1 NEAR is defined by {@link NEAR_NOMINATION}.\n * Effectively this divides given amount by {@link NEAR_NOMINATION}.\n *\n * @param balance decimal string representing balance in smallest non-divisible NEAR units (as specified by {@link NEAR_NOMINATION})\n * @param fracDigits number of fractional digits to preserve in formatted string. Balance is rounded to match given number of digits.\n * @returns Value in Ⓝ\n */ function formatNearAmount(balance, fracDigits = exports.NEAR_NOMINATION_EXP) {\n    const balanceBN = new bn_js_1.default(balance, 10);\n    if (fracDigits !== exports.NEAR_NOMINATION_EXP) {\n        // Adjust balance for rounding at given number of digits\n        const roundingExp = exports.NEAR_NOMINATION_EXP - fracDigits - 1;\n        if (roundingExp > 0) {\n            balanceBN.iadd(ROUNDING_OFFSETS[roundingExp]);\n        }\n    }\n    balance = balanceBN.toString();\n    const wholeStr = balance.substring(0, balance.length - exports.NEAR_NOMINATION_EXP) || \"0\";\n    const fractionStr = balance.substring(balance.length - exports.NEAR_NOMINATION_EXP).padStart(exports.NEAR_NOMINATION_EXP, \"0\").substring(0, fracDigits);\n    return trimTrailingZeroes(`${formatWithCommas(wholeStr)}.${fractionStr}`);\n}\nexports.formatNearAmount = formatNearAmount;\n/**\n * Convert human readable NEAR amount to internal indivisible units.\n * Effectively this multiplies given amount by {@link NEAR_NOMINATION}.\n *\n * @param amt decimal string (potentially fractional) denominated in NEAR.\n * @returns The parsed yoctoⓃ amount or null if no amount was passed in\n */ function parseNearAmount(amt) {\n    if (!amt) {\n        return null;\n    }\n    amt = cleanupAmount(amt);\n    const split = amt.split(\".\");\n    const wholePart = split[0];\n    const fracPart = split[1] || \"\";\n    if (split.length > 2 || fracPart.length > exports.NEAR_NOMINATION_EXP) {\n        throw new Error(`Cannot parse '${amt}' as NEAR amount`);\n    }\n    return trimLeadingZeroes(wholePart + fracPart.padEnd(exports.NEAR_NOMINATION_EXP, \"0\"));\n}\nexports.parseNearAmount = parseNearAmount;\n/**\n * Removes commas from the input\n * @param amount A value or amount that may contain commas\n * @returns string The cleaned value\n */ function cleanupAmount(amount) {\n    return amount.replace(/,/g, \"\").trim();\n}\n/**\n * Removes .000… from an input\n * @param value A value that may contain trailing zeroes in the decimals place\n * @returns string The value without the trailing zeros\n */ function trimTrailingZeroes(value) {\n    return value.replace(/\\.?0*$/, \"\");\n}\n/**\n * Removes leading zeroes from an input\n * @param value A value that may contain leading zeroes\n * @returns string The value without the leading zeroes\n */ function trimLeadingZeroes(value) {\n    value = value.replace(/^0+/, \"\");\n    if (value === \"\") {\n        return \"0\";\n    }\n    return value;\n}\n/**\n * Returns a human-readable value with commas\n * @param value A value that may not contain commas\n * @returns string A value with commas\n */ function formatWithCommas(value) {\n    const pattern = /(-?\\d+)(\\d{3})/;\n    while(pattern.test(value)){\n        value = value.replace(pattern, \"$1,$2\");\n    }\n    return value;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@near-js/utils/lib/format.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@near-js/utils/lib/index.js":
/*!**************************************************!*\
  !*** ./node_modules/@near-js/utils/lib/index.js ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n        desc = {\n            enumerable: true,\n            get: function() {\n                return m[k];\n            }\n        };\n    }\n    Object.defineProperty(o, k2, desc);\n} : function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n});\nvar __exportStar = this && this.__exportStar || function(m, exports1) {\n    for(var p in m)if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n__exportStar(__webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/@near-js/utils/lib/constants.js\"), exports);\n__exportStar(__webpack_require__(/*! ./errors */ \"(ssr)/./node_modules/@near-js/utils/lib/errors/index.js\"), exports);\n__exportStar(__webpack_require__(/*! ./format */ \"(ssr)/./node_modules/@near-js/utils/lib/format.js\"), exports);\n__exportStar(__webpack_require__(/*! ./logging */ \"(ssr)/./node_modules/@near-js/utils/lib/logging.js\"), exports);\n__exportStar(__webpack_require__(/*! ./provider */ \"(ssr)/./node_modules/@near-js/utils/lib/provider.js\"), exports);\n__exportStar(__webpack_require__(/*! ./validators */ \"(ssr)/./node_modules/@near-js/utils/lib/validators.js\"), exports);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG5lYXItanMvdXRpbHMvbGliL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsSUFBSUEsa0JBQWtCLElBQUssSUFBSSxJQUFJLENBQUNBLGVBQWUsSUFBTUMsQ0FBQUEsT0FBT0MsTUFBTSxHQUFJLFNBQVNDLENBQUMsRUFBRUMsQ0FBQyxFQUFFQyxDQUFDLEVBQUVDLEVBQUU7SUFDMUYsSUFBSUEsT0FBT0MsV0FBV0QsS0FBS0Q7SUFDM0IsSUFBSUcsT0FBT1AsT0FBT1Esd0JBQXdCLENBQUNMLEdBQUdDO0lBQzlDLElBQUksQ0FBQ0csUUFBUyxVQUFTQSxPQUFPLENBQUNKLEVBQUVNLFVBQVUsR0FBR0YsS0FBS0csUUFBUSxJQUFJSCxLQUFLSSxZQUFZLEdBQUc7UUFDakZKLE9BQU87WUFBRUssWUFBWTtZQUFNQyxLQUFLO2dCQUFhLE9BQU9WLENBQUMsQ0FBQ0MsRUFBRTtZQUFFO1FBQUU7SUFDOUQ7SUFDQUosT0FBT2MsY0FBYyxDQUFDWixHQUFHRyxJQUFJRTtBQUNqQyxJQUFNLFNBQVNMLENBQUMsRUFBRUMsQ0FBQyxFQUFFQyxDQUFDLEVBQUVDLEVBQUU7SUFDdEIsSUFBSUEsT0FBT0MsV0FBV0QsS0FBS0Q7SUFDM0JGLENBQUMsQ0FBQ0csR0FBRyxHQUFHRixDQUFDLENBQUNDLEVBQUU7QUFDaEIsQ0FBQztBQUNELElBQUlXLGVBQWUsSUFBSyxJQUFJLElBQUksQ0FBQ0EsWUFBWSxJQUFLLFNBQVNaLENBQUMsRUFBRWEsUUFBTztJQUNqRSxJQUFLLElBQUlDLEtBQUtkLEVBQUcsSUFBSWMsTUFBTSxhQUFhLENBQUNqQixPQUFPa0IsU0FBUyxDQUFDQyxjQUFjLENBQUNDLElBQUksQ0FBQ0osVUFBU0MsSUFBSWxCLGdCQUFnQmlCLFVBQVNiLEdBQUdjO0FBQzNIO0FBQ0FqQiw4Q0FBNkM7SUFBRXFCLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0ROLGFBQWFPLG1CQUFPQSxDQUFDLHlFQUFhLEdBQUdOO0FBQ3JDRCxhQUFhTyxtQkFBT0EsQ0FBQyx5RUFBVSxHQUFHTjtBQUNsQ0QsYUFBYU8sbUJBQU9BLENBQUMsbUVBQVUsR0FBR047QUFDbENELGFBQWFPLG1CQUFPQSxDQUFDLHFFQUFXLEdBQUdOO0FBQ25DRCxhQUFhTyxtQkFBT0EsQ0FBQyx1RUFBWSxHQUFHTjtBQUNwQ0QsYUFBYU8sbUJBQU9BLENBQUMsMkVBQWMsR0FBR04iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pLWFtLW5lYXJieS8uL25vZGVfbW9kdWxlcy9AbmVhci1qcy91dGlscy9saWIvaW5kZXguanM/NmQyYiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihtLCBrKTtcbiAgICBpZiAoIWRlc2MgfHwgKFwiZ2V0XCIgaW4gZGVzYyA/ICFtLl9fZXNNb2R1bGUgOiBkZXNjLndyaXRhYmxlIHx8IGRlc2MuY29uZmlndXJhYmxlKSkge1xuICAgICAgZGVzYyA9IHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCBkZXNjKTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19leHBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2V4cG9ydFN0YXIpIHx8IGZ1bmN0aW9uKG0sIGV4cG9ydHMpIHtcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmIChwICE9PSBcImRlZmF1bHRcIiAmJiAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGV4cG9ydHMsIHApKSBfX2NyZWF0ZUJpbmRpbmcoZXhwb3J0cywgbSwgcCk7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2NvbnN0YW50c1wiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vZXJyb3JzXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9mb3JtYXRcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2xvZ2dpbmdcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3Byb3ZpZGVyXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi92YWxpZGF0b3JzXCIpLCBleHBvcnRzKTtcbiJdLCJuYW1lcyI6WyJfX2NyZWF0ZUJpbmRpbmciLCJPYmplY3QiLCJjcmVhdGUiLCJvIiwibSIsImsiLCJrMiIsInVuZGVmaW5lZCIsImRlc2MiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJfX2VzTW9kdWxlIiwid3JpdGFibGUiLCJjb25maWd1cmFibGUiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiZGVmaW5lUHJvcGVydHkiLCJfX2V4cG9ydFN0YXIiLCJleHBvcnRzIiwicCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsInZhbHVlIiwicmVxdWlyZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@near-js/utils/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@near-js/utils/lib/logging.js":
/*!****************************************************!*\
  !*** ./node_modules/@near-js/utils/lib/logging.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.printTxOutcomeLogs = exports.printTxOutcomeLogsAndFailures = void 0;\nconst errors_1 = __webpack_require__(/*! ./errors */ \"(ssr)/./node_modules/@near-js/utils/lib/errors/index.js\");\nconst SUPPRESS_LOGGING = !!process.env.NEAR_NO_LOGS;\n/**\n * Parse and print details from a query execution response\n * @param params\n * @param params.contractId ID of the account/contract which made the query\n * @param params.outcome the query execution response\n */ function printTxOutcomeLogsAndFailures({ contractId, outcome }) {\n    if (SUPPRESS_LOGGING) {\n        return;\n    }\n    const flatLogs = [\n        outcome.transaction_outcome,\n        ...outcome.receipts_outcome\n    ].reduce((acc, it)=>{\n        const isFailure = typeof it.outcome.status === \"object\" && typeof it.outcome.status.Failure === \"object\";\n        if (it.outcome.logs.length || isFailure) {\n            return acc.concat({\n                receiptIds: it.outcome.receipt_ids,\n                logs: it.outcome.logs,\n                failure: typeof it.outcome.status === \"object\" && it.outcome.status.Failure !== undefined ? (0, errors_1.parseRpcError)(it.outcome.status.Failure) : null\n            });\n        } else {\n            return acc;\n        }\n    }, []);\n    for (const result of flatLogs){\n        console.log(`Receipt${result.receiptIds.length > 1 ? \"s\" : \"\"}: ${result.receiptIds.join(\", \")}`);\n        printTxOutcomeLogs({\n            contractId,\n            logs: result.logs,\n            prefix: \"\t\"\n        });\n        if (result.failure) {\n            console.warn(`\\tFailure [${contractId}]: ${result.failure}`);\n        }\n    }\n}\nexports.printTxOutcomeLogsAndFailures = printTxOutcomeLogsAndFailures;\n/**\n * Format and print log output from a query execution response\n * @param params\n * @param params.contractId ID of the account/contract which made the query\n * @param params.logs log output from a query execution response\n * @param params.prefix string to append to the beginning of each log\n */ function printTxOutcomeLogs({ contractId, logs, prefix = \"\" }) {\n    if (SUPPRESS_LOGGING) {\n        return;\n    }\n    for (const log of logs){\n        console.log(`${prefix}Log [${contractId}]: ${log}`);\n    }\n}\nexports.printTxOutcomeLogs = printTxOutcomeLogs;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG5lYXItanMvdXRpbHMvbGliL2xvZ2dpbmcuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELDBCQUEwQixHQUFHQSxxQ0FBcUMsR0FBRyxLQUFLO0FBQzFFLE1BQU1JLFdBQVdDLG1CQUFPQSxDQUFDLHlFQUFVO0FBQ25DLE1BQU1DLG1CQUFtQixDQUFDLENBQUNDLFFBQVFDLEdBQUcsQ0FBQ0MsWUFBWTtBQUNuRDs7Ozs7Q0FLQyxHQUNELFNBQVNOLDhCQUE4QixFQUFFTyxVQUFVLEVBQUVDLE9BQU8sRUFBRztJQUMzRCxJQUFJTCxrQkFBa0I7UUFDbEI7SUFDSjtJQUNBLE1BQU1NLFdBQVc7UUFBQ0QsUUFBUUUsbUJBQW1CO1dBQUtGLFFBQVFHLGdCQUFnQjtLQUFDLENBQ3RFQyxNQUFNLENBQUMsQ0FBQ0MsS0FBS0M7UUFDZCxNQUFNQyxZQUFZLE9BQU9ELEdBQUdOLE9BQU8sQ0FBQ1EsTUFBTSxLQUFLLFlBQVksT0FBT0YsR0FBR04sT0FBTyxDQUFDUSxNQUFNLENBQUNDLE9BQU8sS0FBSztRQUNoRyxJQUFJSCxHQUFHTixPQUFPLENBQUNVLElBQUksQ0FBQ0MsTUFBTSxJQUFJSixXQUFXO1lBQ3JDLE9BQU9GLElBQUlPLE1BQU0sQ0FBQztnQkFDZEMsWUFBWVAsR0FBR04sT0FBTyxDQUFDYyxXQUFXO2dCQUNsQ0osTUFBTUosR0FBR04sT0FBTyxDQUFDVSxJQUFJO2dCQUNyQkssU0FBUyxPQUFPVCxHQUFHTixPQUFPLENBQUNRLE1BQU0sS0FBSyxZQUFZRixHQUFHTixPQUFPLENBQUNRLE1BQU0sQ0FBQ0MsT0FBTyxLQUFLTyxZQUMxRSxDQUFDLEdBQUd2QixTQUFTd0IsYUFBYSxFQUFFWCxHQUFHTixPQUFPLENBQUNRLE1BQU0sQ0FBQ0MsT0FBTyxJQUNyRDtZQUNWO1FBQ0osT0FDSztZQUNELE9BQU9KO1FBQ1g7SUFDSixHQUFHLEVBQUU7SUFDTCxLQUFLLE1BQU1hLFVBQVVqQixTQUFVO1FBQzNCa0IsUUFBUUMsR0FBRyxDQUFDLENBQUMsT0FBTyxFQUFFRixPQUFPTCxVQUFVLENBQUNGLE1BQU0sR0FBRyxJQUFJLE1BQU0sR0FBRyxFQUFFLEVBQUVPLE9BQU9MLFVBQVUsQ0FBQ1EsSUFBSSxDQUFDLE1BQU0sQ0FBQztRQUNoRzlCLG1CQUFtQjtZQUNmUTtZQUNBVyxNQUFNUSxPQUFPUixJQUFJO1lBQ2pCWSxRQUFRO1FBQ1o7UUFDQSxJQUFJSixPQUFPSCxPQUFPLEVBQUU7WUFDaEJJLFFBQVFJLElBQUksQ0FBQyxDQUFDLFdBQVcsRUFBRXhCLFdBQVcsR0FBRyxFQUFFbUIsT0FBT0gsT0FBTyxDQUFDLENBQUM7UUFDL0Q7SUFDSjtBQUNKO0FBQ0ExQixxQ0FBcUMsR0FBR0c7QUFDeEM7Ozs7OztDQU1DLEdBQ0QsU0FBU0QsbUJBQW1CLEVBQUVRLFVBQVUsRUFBRVcsSUFBSSxFQUFFWSxTQUFTLEVBQUUsRUFBRztJQUMxRCxJQUFJM0Isa0JBQWtCO1FBQ2xCO0lBQ0o7SUFDQSxLQUFLLE1BQU15QixPQUFPVixLQUFNO1FBQ3BCUyxRQUFRQyxHQUFHLENBQUMsQ0FBQyxFQUFFRSxPQUFPLEtBQUssRUFBRXZCLFdBQVcsR0FBRyxFQUFFcUIsSUFBSSxDQUFDO0lBQ3REO0FBQ0o7QUFDQS9CLDBCQUEwQixHQUFHRSIsInNvdXJjZXMiOlsid2VicGFjazovL2ktYW0tbmVhcmJ5Ly4vbm9kZV9tb2R1bGVzL0BuZWFyLWpzL3V0aWxzL2xpYi9sb2dnaW5nLmpzP2E3ZWUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnByaW50VHhPdXRjb21lTG9ncyA9IGV4cG9ydHMucHJpbnRUeE91dGNvbWVMb2dzQW5kRmFpbHVyZXMgPSB2b2lkIDA7XG5jb25zdCBlcnJvcnNfMSA9IHJlcXVpcmUoXCIuL2Vycm9yc1wiKTtcbmNvbnN0IFNVUFBSRVNTX0xPR0dJTkcgPSAhIXByb2Nlc3MuZW52Lk5FQVJfTk9fTE9HUztcbi8qKlxuICogUGFyc2UgYW5kIHByaW50IGRldGFpbHMgZnJvbSBhIHF1ZXJ5IGV4ZWN1dGlvbiByZXNwb25zZVxuICogQHBhcmFtIHBhcmFtc1xuICogQHBhcmFtIHBhcmFtcy5jb250cmFjdElkIElEIG9mIHRoZSBhY2NvdW50L2NvbnRyYWN0IHdoaWNoIG1hZGUgdGhlIHF1ZXJ5XG4gKiBAcGFyYW0gcGFyYW1zLm91dGNvbWUgdGhlIHF1ZXJ5IGV4ZWN1dGlvbiByZXNwb25zZVxuICovXG5mdW5jdGlvbiBwcmludFR4T3V0Y29tZUxvZ3NBbmRGYWlsdXJlcyh7IGNvbnRyYWN0SWQsIG91dGNvbWUsIH0pIHtcbiAgICBpZiAoU1VQUFJFU1NfTE9HR0lORykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGZsYXRMb2dzID0gW291dGNvbWUudHJhbnNhY3Rpb25fb3V0Y29tZSwgLi4ub3V0Y29tZS5yZWNlaXB0c19vdXRjb21lXVxuICAgICAgICAucmVkdWNlKChhY2MsIGl0KSA9PiB7XG4gICAgICAgIGNvbnN0IGlzRmFpbHVyZSA9IHR5cGVvZiBpdC5vdXRjb21lLnN0YXR1cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIGl0Lm91dGNvbWUuc3RhdHVzLkZhaWx1cmUgPT09ICdvYmplY3QnO1xuICAgICAgICBpZiAoaXQub3V0Y29tZS5sb2dzLmxlbmd0aCB8fCBpc0ZhaWx1cmUpIHtcbiAgICAgICAgICAgIHJldHVybiBhY2MuY29uY2F0KHtcbiAgICAgICAgICAgICAgICByZWNlaXB0SWRzOiBpdC5vdXRjb21lLnJlY2VpcHRfaWRzLFxuICAgICAgICAgICAgICAgIGxvZ3M6IGl0Lm91dGNvbWUubG9ncyxcbiAgICAgICAgICAgICAgICBmYWlsdXJlOiB0eXBlb2YgaXQub3V0Y29tZS5zdGF0dXMgPT09ICdvYmplY3QnICYmIGl0Lm91dGNvbWUuc3RhdHVzLkZhaWx1cmUgIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgICAgICA/ICgwLCBlcnJvcnNfMS5wYXJzZVJwY0Vycm9yKShpdC5vdXRjb21lLnN0YXR1cy5GYWlsdXJlKVxuICAgICAgICAgICAgICAgICAgICA6IG51bGxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGFjYztcbiAgICAgICAgfVxuICAgIH0sIFtdKTtcbiAgICBmb3IgKGNvbnN0IHJlc3VsdCBvZiBmbGF0TG9ncykge1xuICAgICAgICBjb25zb2xlLmxvZyhgUmVjZWlwdCR7cmVzdWx0LnJlY2VpcHRJZHMubGVuZ3RoID4gMSA/ICdzJyA6ICcnfTogJHtyZXN1bHQucmVjZWlwdElkcy5qb2luKCcsICcpfWApO1xuICAgICAgICBwcmludFR4T3V0Y29tZUxvZ3Moe1xuICAgICAgICAgICAgY29udHJhY3RJZCxcbiAgICAgICAgICAgIGxvZ3M6IHJlc3VsdC5sb2dzLFxuICAgICAgICAgICAgcHJlZml4OiAnXFx0JyxcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChyZXN1bHQuZmFpbHVyZSkge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKGBcXHRGYWlsdXJlIFske2NvbnRyYWN0SWR9XTogJHtyZXN1bHQuZmFpbHVyZX1gKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMucHJpbnRUeE91dGNvbWVMb2dzQW5kRmFpbHVyZXMgPSBwcmludFR4T3V0Y29tZUxvZ3NBbmRGYWlsdXJlcztcbi8qKlxuICogRm9ybWF0IGFuZCBwcmludCBsb2cgb3V0cHV0IGZyb20gYSBxdWVyeSBleGVjdXRpb24gcmVzcG9uc2VcbiAqIEBwYXJhbSBwYXJhbXNcbiAqIEBwYXJhbSBwYXJhbXMuY29udHJhY3RJZCBJRCBvZiB0aGUgYWNjb3VudC9jb250cmFjdCB3aGljaCBtYWRlIHRoZSBxdWVyeVxuICogQHBhcmFtIHBhcmFtcy5sb2dzIGxvZyBvdXRwdXQgZnJvbSBhIHF1ZXJ5IGV4ZWN1dGlvbiByZXNwb25zZVxuICogQHBhcmFtIHBhcmFtcy5wcmVmaXggc3RyaW5nIHRvIGFwcGVuZCB0byB0aGUgYmVnaW5uaW5nIG9mIGVhY2ggbG9nXG4gKi9cbmZ1bmN0aW9uIHByaW50VHhPdXRjb21lTG9ncyh7IGNvbnRyYWN0SWQsIGxvZ3MsIHByZWZpeCA9ICcnLCB9KSB7XG4gICAgaWYgKFNVUFBSRVNTX0xPR0dJTkcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBmb3IgKGNvbnN0IGxvZyBvZiBsb2dzKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKGAke3ByZWZpeH1Mb2cgWyR7Y29udHJhY3RJZH1dOiAke2xvZ31gKTtcbiAgICB9XG59XG5leHBvcnRzLnByaW50VHhPdXRjb21lTG9ncyA9IHByaW50VHhPdXRjb21lTG9ncztcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInByaW50VHhPdXRjb21lTG9ncyIsInByaW50VHhPdXRjb21lTG9nc0FuZEZhaWx1cmVzIiwiZXJyb3JzXzEiLCJyZXF1aXJlIiwiU1VQUFJFU1NfTE9HR0lORyIsInByb2Nlc3MiLCJlbnYiLCJORUFSX05PX0xPR1MiLCJjb250cmFjdElkIiwib3V0Y29tZSIsImZsYXRMb2dzIiwidHJhbnNhY3Rpb25fb3V0Y29tZSIsInJlY2VpcHRzX291dGNvbWUiLCJyZWR1Y2UiLCJhY2MiLCJpdCIsImlzRmFpbHVyZSIsInN0YXR1cyIsIkZhaWx1cmUiLCJsb2dzIiwibGVuZ3RoIiwiY29uY2F0IiwicmVjZWlwdElkcyIsInJlY2VpcHRfaWRzIiwiZmFpbHVyZSIsInVuZGVmaW5lZCIsInBhcnNlUnBjRXJyb3IiLCJyZXN1bHQiLCJjb25zb2xlIiwibG9nIiwiam9pbiIsInByZWZpeCIsIndhcm4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@near-js/utils/lib/logging.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@near-js/utils/lib/provider.js":
/*!*****************************************************!*\
  !*** ./node_modules/@near-js/utils/lib/provider.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.getTransactionLastResult = void 0;\n/** @hidden */ function getTransactionLastResult(txResult) {\n    if (typeof txResult.status === \"object\" && typeof txResult.status.SuccessValue === \"string\") {\n        const value = Buffer.from(txResult.status.SuccessValue, \"base64\").toString();\n        try {\n            return JSON.parse(value);\n        } catch (e) {\n            return value;\n        }\n    }\n    return null;\n}\nexports.getTransactionLastResult = getTransactionLastResult;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG5lYXItanMvdXRpbHMvbGliL3Byb3ZpZGVyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxnQ0FBZ0MsR0FBRyxLQUFLO0FBQ3hDLFlBQVksR0FDWixTQUFTRSx5QkFBeUJDLFFBQVE7SUFDdEMsSUFBSSxPQUFPQSxTQUFTQyxNQUFNLEtBQUssWUFBWSxPQUFPRCxTQUFTQyxNQUFNLENBQUNDLFlBQVksS0FBSyxVQUFVO1FBQ3pGLE1BQU1KLFFBQVFLLE9BQU9DLElBQUksQ0FBQ0osU0FBU0MsTUFBTSxDQUFDQyxZQUFZLEVBQUUsVUFBVUcsUUFBUTtRQUMxRSxJQUFJO1lBQ0EsT0FBT0MsS0FBS0MsS0FBSyxDQUFDVDtRQUN0QixFQUNBLE9BQU9VLEdBQUc7WUFDTixPQUFPVjtRQUNYO0lBQ0o7SUFDQSxPQUFPO0FBQ1g7QUFDQUQsZ0NBQWdDLEdBQUdFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaS1hbS1uZWFyYnkvLi9ub2RlX21vZHVsZXMvQG5lYXItanMvdXRpbHMvbGliL3Byb3ZpZGVyLmpzPzY4OGYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmdldFRyYW5zYWN0aW9uTGFzdFJlc3VsdCA9IHZvaWQgMDtcbi8qKiBAaGlkZGVuICovXG5mdW5jdGlvbiBnZXRUcmFuc2FjdGlvbkxhc3RSZXN1bHQodHhSZXN1bHQpIHtcbiAgICBpZiAodHlwZW9mIHR4UmVzdWx0LnN0YXR1cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIHR4UmVzdWx0LnN0YXR1cy5TdWNjZXNzVmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gQnVmZmVyLmZyb20odHhSZXN1bHQuc3RhdHVzLlN1Y2Nlc3NWYWx1ZSwgJ2Jhc2U2NCcpLnRvU3RyaW5nKCk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gSlNPTi5wYXJzZSh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbn1cbmV4cG9ydHMuZ2V0VHJhbnNhY3Rpb25MYXN0UmVzdWx0ID0gZ2V0VHJhbnNhY3Rpb25MYXN0UmVzdWx0O1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZ2V0VHJhbnNhY3Rpb25MYXN0UmVzdWx0IiwidHhSZXN1bHQiLCJzdGF0dXMiLCJTdWNjZXNzVmFsdWUiLCJCdWZmZXIiLCJmcm9tIiwidG9TdHJpbmciLCJKU09OIiwicGFyc2UiLCJlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@near-js/utils/lib/provider.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@near-js/utils/lib/validators.js":
/*!*******************************************************!*\
  !*** ./node_modules/@near-js/utils/lib/validators.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = this && this.__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.diffEpochValidators = exports.findSeatPrice = void 0;\nconst bn_js_1 = __importDefault(__webpack_require__(/*! bn.js */ \"(ssr)/./node_modules/bn.js/lib/bn.js\"));\nconst depd_1 = __importDefault(__webpack_require__(/*! depd */ \"(ssr)/./node_modules/depd/index.js\"));\n/** Finds seat price given validators stakes and number of seats.\n *  Calculation follow the spec: https://nomicon.io/Economics/README.html#validator-selection\n * @params validators: current or next epoch validators.\n * @params maxNumberOfSeats: maximum number of seats in the network.\n * @params minimumStakeRatio: minimum stake ratio\n * @params protocolVersion: version of the protocol from genesis config\n */ function findSeatPrice(validators, maxNumberOfSeats, minimumStakeRatio, protocolVersion) {\n    if (protocolVersion && protocolVersion < 49) {\n        return findSeatPriceForProtocolBefore49(validators, maxNumberOfSeats);\n    }\n    if (!minimumStakeRatio) {\n        const deprecate = (0, depd_1.default)(\"findSeatPrice(validators, maxNumberOfSeats)\");\n        deprecate(\"`use `findSeatPrice(validators, maxNumberOfSeats, minimumStakeRatio)` instead\");\n        minimumStakeRatio = [\n            1,\n            6250\n        ]; // harcoded minimumStakeRation from 12/7/21\n    }\n    return findSeatPriceForProtocolAfter49(validators, maxNumberOfSeats, minimumStakeRatio);\n}\nexports.findSeatPrice = findSeatPrice;\nfunction findSeatPriceForProtocolBefore49(validators, numSeats) {\n    const stakes = validators.map((v)=>new bn_js_1.default(v.stake, 10)).sort((a, b)=>a.cmp(b));\n    const num = new bn_js_1.default(numSeats);\n    const stakesSum = stakes.reduce((a, b)=>a.add(b));\n    if (stakesSum.lt(num)) {\n        throw new Error(\"Stakes are below seats\");\n    }\n    // assert stakesSum >= numSeats\n    let left = new bn_js_1.default(1), right = stakesSum.add(new bn_js_1.default(1));\n    while(!left.eq(right.sub(new bn_js_1.default(1)))){\n        const mid = left.add(right).div(new bn_js_1.default(2));\n        let found = false;\n        let currentSum = new bn_js_1.default(0);\n        for(let i = 0; i < stakes.length; ++i){\n            currentSum = currentSum.add(stakes[i].div(mid));\n            if (currentSum.gte(num)) {\n                left = mid;\n                found = true;\n                break;\n            }\n        }\n        if (!found) {\n            right = mid;\n        }\n    }\n    return left;\n}\n// nearcore reference: https://github.com/near/nearcore/blob/5a8ae263ec07930cd34d0dcf5bcee250c67c02aa/chain/epoch_manager/src/validator_selection.rs#L308;L315\nfunction findSeatPriceForProtocolAfter49(validators, maxNumberOfSeats, minimumStakeRatio) {\n    if (minimumStakeRatio.length != 2) {\n        throw Error(\"minimumStakeRatio should have 2 elements\");\n    }\n    const stakes = validators.map((v)=>new bn_js_1.default(v.stake, 10)).sort((a, b)=>a.cmp(b));\n    const stakesSum = stakes.reduce((a, b)=>a.add(b));\n    if (validators.length < maxNumberOfSeats) {\n        return stakesSum.mul(new bn_js_1.default(minimumStakeRatio[0])).div(new bn_js_1.default(minimumStakeRatio[1]));\n    } else {\n        return stakes[0].add(new bn_js_1.default(1));\n    }\n}\n/** Diff validators between current and next epoch.\n * Returns additions, subtractions and changes to validator set.\n * @params currentValidators: list of current validators.\n * @params nextValidators: list of next validators.\n */ function diffEpochValidators(currentValidators, nextValidators) {\n    const validatorsMap = new Map();\n    currentValidators.forEach((v)=>validatorsMap.set(v.account_id, v));\n    const nextValidatorsSet = new Set(nextValidators.map((v)=>v.account_id));\n    return {\n        newValidators: nextValidators.filter((v)=>!validatorsMap.has(v.account_id)),\n        removedValidators: currentValidators.filter((v)=>!nextValidatorsSet.has(v.account_id)),\n        changedValidators: nextValidators.filter((v)=>validatorsMap.has(v.account_id) && validatorsMap.get(v.account_id).stake != v.stake).map((v)=>({\n                current: validatorsMap.get(v.account_id),\n                next: v\n            }))\n    };\n}\nexports.diffEpochValidators = diffEpochValidators;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG5lYXItanMvdXRpbHMvbGliL3ZhbGlkYXRvcnMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYixJQUFJQSxrQkFBa0IsSUFBSyxJQUFJLElBQUksQ0FBQ0EsZUFBZSxJQUFLLFNBQVVDLEdBQUc7SUFDakUsT0FBTyxPQUFRQSxJQUFJQyxVQUFVLEdBQUlELE1BQU07UUFBRSxXQUFXQTtJQUFJO0FBQzVEO0FBQ0FFLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCwyQkFBMkIsR0FBR0EscUJBQXFCLEdBQUcsS0FBSztBQUMzRCxNQUFNSSxVQUFVVCxnQkFBZ0JVLG1CQUFPQSxDQUFDLG1EQUFPO0FBQy9DLE1BQU1DLFNBQVNYLGdCQUFnQlUsbUJBQU9BLENBQUMsZ0RBQU07QUFDN0M7Ozs7OztDQU1DLEdBQ0QsU0FBU0YsY0FBY0ksVUFBVSxFQUFFQyxnQkFBZ0IsRUFBRUMsaUJBQWlCLEVBQUVDLGVBQWU7SUFDbkYsSUFBSUEsbUJBQW1CQSxrQkFBa0IsSUFBSTtRQUN6QyxPQUFPQyxpQ0FBaUNKLFlBQVlDO0lBQ3hEO0lBQ0EsSUFBSSxDQUFDQyxtQkFBbUI7UUFDcEIsTUFBTUcsWUFBWSxDQUFDLEdBQUdOLE9BQU9PLE9BQU8sRUFBRTtRQUN0Q0QsVUFBVTtRQUNWSCxvQkFBb0I7WUFBQztZQUFHO1NBQUssRUFBRSwyQ0FBMkM7SUFDOUU7SUFDQSxPQUFPSyxnQ0FBZ0NQLFlBQVlDLGtCQUFrQkM7QUFDekU7QUFDQVQscUJBQXFCLEdBQUdHO0FBQ3hCLFNBQVNRLGlDQUFpQ0osVUFBVSxFQUFFUSxRQUFRO0lBQzFELE1BQU1DLFNBQVNULFdBQVdVLEdBQUcsQ0FBQ0MsQ0FBQUEsSUFBSyxJQUFJZCxRQUFRUyxPQUFPLENBQUNLLEVBQUVDLEtBQUssRUFBRSxLQUFLQyxJQUFJLENBQUMsQ0FBQ0MsR0FBR0MsSUFBTUQsRUFBRUUsR0FBRyxDQUFDRDtJQUMxRixNQUFNRSxNQUFNLElBQUlwQixRQUFRUyxPQUFPLENBQUNFO0lBQ2hDLE1BQU1VLFlBQVlULE9BQU9VLE1BQU0sQ0FBQyxDQUFDTCxHQUFHQyxJQUFNRCxFQUFFTSxHQUFHLENBQUNMO0lBQ2hELElBQUlHLFVBQVVHLEVBQUUsQ0FBQ0osTUFBTTtRQUNuQixNQUFNLElBQUlLLE1BQU07SUFDcEI7SUFDQSwrQkFBK0I7SUFDL0IsSUFBSUMsT0FBTyxJQUFJMUIsUUFBUVMsT0FBTyxDQUFDLElBQUlrQixRQUFRTixVQUFVRSxHQUFHLENBQUMsSUFBSXZCLFFBQVFTLE9BQU8sQ0FBQztJQUM3RSxNQUFPLENBQUNpQixLQUFLRSxFQUFFLENBQUNELE1BQU1FLEdBQUcsQ0FBQyxJQUFJN0IsUUFBUVMsT0FBTyxDQUFDLEtBQU07UUFDaEQsTUFBTXFCLE1BQU1KLEtBQUtILEdBQUcsQ0FBQ0ksT0FBT0ksR0FBRyxDQUFDLElBQUkvQixRQUFRUyxPQUFPLENBQUM7UUFDcEQsSUFBSXVCLFFBQVE7UUFDWixJQUFJQyxhQUFhLElBQUlqQyxRQUFRUyxPQUFPLENBQUM7UUFDckMsSUFBSyxJQUFJeUIsSUFBSSxHQUFHQSxJQUFJdEIsT0FBT3VCLE1BQU0sRUFBRSxFQUFFRCxFQUFHO1lBQ3BDRCxhQUFhQSxXQUFXVixHQUFHLENBQUNYLE1BQU0sQ0FBQ3NCLEVBQUUsQ0FBQ0gsR0FBRyxDQUFDRDtZQUMxQyxJQUFJRyxXQUFXRyxHQUFHLENBQUNoQixNQUFNO2dCQUNyQk0sT0FBT0k7Z0JBQ1BFLFFBQVE7Z0JBQ1I7WUFDSjtRQUNKO1FBQ0EsSUFBSSxDQUFDQSxPQUFPO1lBQ1JMLFFBQVFHO1FBQ1o7SUFDSjtJQUNBLE9BQU9KO0FBQ1g7QUFDQSw4SkFBOEo7QUFDOUosU0FBU2hCLGdDQUFnQ1AsVUFBVSxFQUFFQyxnQkFBZ0IsRUFBRUMsaUJBQWlCO0lBQ3BGLElBQUlBLGtCQUFrQjhCLE1BQU0sSUFBSSxHQUFHO1FBQy9CLE1BQU1WLE1BQU07SUFDaEI7SUFDQSxNQUFNYixTQUFTVCxXQUFXVSxHQUFHLENBQUNDLENBQUFBLElBQUssSUFBSWQsUUFBUVMsT0FBTyxDQUFDSyxFQUFFQyxLQUFLLEVBQUUsS0FBS0MsSUFBSSxDQUFDLENBQUNDLEdBQUdDLElBQU1ELEVBQUVFLEdBQUcsQ0FBQ0Q7SUFDMUYsTUFBTUcsWUFBWVQsT0FBT1UsTUFBTSxDQUFDLENBQUNMLEdBQUdDLElBQU1ELEVBQUVNLEdBQUcsQ0FBQ0w7SUFDaEQsSUFBSWYsV0FBV2dDLE1BQU0sR0FBRy9CLGtCQUFrQjtRQUN0QyxPQUFPaUIsVUFBVWdCLEdBQUcsQ0FBQyxJQUFJckMsUUFBUVMsT0FBTyxDQUFDSixpQkFBaUIsQ0FBQyxFQUFFLEdBQUcwQixHQUFHLENBQUMsSUFBSS9CLFFBQVFTLE9BQU8sQ0FBQ0osaUJBQWlCLENBQUMsRUFBRTtJQUNoSCxPQUNLO1FBQ0QsT0FBT08sTUFBTSxDQUFDLEVBQUUsQ0FBQ1csR0FBRyxDQUFDLElBQUl2QixRQUFRUyxPQUFPLENBQUM7SUFDN0M7QUFDSjtBQUNBOzs7O0NBSUMsR0FDRCxTQUFTWCxvQkFBb0J3QyxpQkFBaUIsRUFBRUMsY0FBYztJQUMxRCxNQUFNQyxnQkFBZ0IsSUFBSUM7SUFDMUJILGtCQUFrQkksT0FBTyxDQUFDNUIsQ0FBQUEsSUFBSzBCLGNBQWNHLEdBQUcsQ0FBQzdCLEVBQUU4QixVQUFVLEVBQUU5QjtJQUMvRCxNQUFNK0Isb0JBQW9CLElBQUlDLElBQUlQLGVBQWUxQixHQUFHLENBQUNDLENBQUFBLElBQUtBLEVBQUU4QixVQUFVO0lBQ3RFLE9BQU87UUFDSEcsZUFBZVIsZUFBZVMsTUFBTSxDQUFDbEMsQ0FBQUEsSUFBSyxDQUFDMEIsY0FBY1MsR0FBRyxDQUFDbkMsRUFBRThCLFVBQVU7UUFDekVNLG1CQUFtQlosa0JBQWtCVSxNQUFNLENBQUNsQyxDQUFBQSxJQUFLLENBQUMrQixrQkFBa0JJLEdBQUcsQ0FBQ25DLEVBQUU4QixVQUFVO1FBQ3BGTyxtQkFBbUJaLGVBQWVTLE1BQU0sQ0FBQ2xDLENBQUFBLElBQU0wQixjQUFjUyxHQUFHLENBQUNuQyxFQUFFOEIsVUFBVSxLQUFLSixjQUFjWSxHQUFHLENBQUN0QyxFQUFFOEIsVUFBVSxFQUFFN0IsS0FBSyxJQUFJRCxFQUFFQyxLQUFLLEVBQzdIRixHQUFHLENBQUNDLENBQUFBLElBQU07Z0JBQUV1QyxTQUFTYixjQUFjWSxHQUFHLENBQUN0QyxFQUFFOEIsVUFBVTtnQkFBR1UsTUFBTXhDO1lBQUU7SUFDdkU7QUFDSjtBQUNBbEIsMkJBQTJCLEdBQUdFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaS1hbS1uZWFyYnkvLi9ub2RlX21vZHVsZXMvQG5lYXItanMvdXRpbHMvbGliL3ZhbGlkYXRvcnMuanM/MTVhMiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZGlmZkVwb2NoVmFsaWRhdG9ycyA9IGV4cG9ydHMuZmluZFNlYXRQcmljZSA9IHZvaWQgMDtcbmNvbnN0IGJuX2pzXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcImJuLmpzXCIpKTtcbmNvbnN0IGRlcGRfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiZGVwZFwiKSk7XG4vKiogRmluZHMgc2VhdCBwcmljZSBnaXZlbiB2YWxpZGF0b3JzIHN0YWtlcyBhbmQgbnVtYmVyIG9mIHNlYXRzLlxuICogIENhbGN1bGF0aW9uIGZvbGxvdyB0aGUgc3BlYzogaHR0cHM6Ly9ub21pY29uLmlvL0Vjb25vbWljcy9SRUFETUUuaHRtbCN2YWxpZGF0b3Itc2VsZWN0aW9uXG4gKiBAcGFyYW1zIHZhbGlkYXRvcnM6IGN1cnJlbnQgb3IgbmV4dCBlcG9jaCB2YWxpZGF0b3JzLlxuICogQHBhcmFtcyBtYXhOdW1iZXJPZlNlYXRzOiBtYXhpbXVtIG51bWJlciBvZiBzZWF0cyBpbiB0aGUgbmV0d29yay5cbiAqIEBwYXJhbXMgbWluaW11bVN0YWtlUmF0aW86IG1pbmltdW0gc3Rha2UgcmF0aW9cbiAqIEBwYXJhbXMgcHJvdG9jb2xWZXJzaW9uOiB2ZXJzaW9uIG9mIHRoZSBwcm90b2NvbCBmcm9tIGdlbmVzaXMgY29uZmlnXG4gKi9cbmZ1bmN0aW9uIGZpbmRTZWF0UHJpY2UodmFsaWRhdG9ycywgbWF4TnVtYmVyT2ZTZWF0cywgbWluaW11bVN0YWtlUmF0aW8sIHByb3RvY29sVmVyc2lvbikge1xuICAgIGlmIChwcm90b2NvbFZlcnNpb24gJiYgcHJvdG9jb2xWZXJzaW9uIDwgNDkpIHtcbiAgICAgICAgcmV0dXJuIGZpbmRTZWF0UHJpY2VGb3JQcm90b2NvbEJlZm9yZTQ5KHZhbGlkYXRvcnMsIG1heE51bWJlck9mU2VhdHMpO1xuICAgIH1cbiAgICBpZiAoIW1pbmltdW1TdGFrZVJhdGlvKSB7XG4gICAgICAgIGNvbnN0IGRlcHJlY2F0ZSA9ICgwLCBkZXBkXzEuZGVmYXVsdCkoJ2ZpbmRTZWF0UHJpY2UodmFsaWRhdG9ycywgbWF4TnVtYmVyT2ZTZWF0cyknKTtcbiAgICAgICAgZGVwcmVjYXRlKCdgdXNlIGBmaW5kU2VhdFByaWNlKHZhbGlkYXRvcnMsIG1heE51bWJlck9mU2VhdHMsIG1pbmltdW1TdGFrZVJhdGlvKWAgaW5zdGVhZCcpO1xuICAgICAgICBtaW5pbXVtU3Rha2VSYXRpbyA9IFsxLCA2MjUwXTsgLy8gaGFyY29kZWQgbWluaW11bVN0YWtlUmF0aW9uIGZyb20gMTIvNy8yMVxuICAgIH1cbiAgICByZXR1cm4gZmluZFNlYXRQcmljZUZvclByb3RvY29sQWZ0ZXI0OSh2YWxpZGF0b3JzLCBtYXhOdW1iZXJPZlNlYXRzLCBtaW5pbXVtU3Rha2VSYXRpbyk7XG59XG5leHBvcnRzLmZpbmRTZWF0UHJpY2UgPSBmaW5kU2VhdFByaWNlO1xuZnVuY3Rpb24gZmluZFNlYXRQcmljZUZvclByb3RvY29sQmVmb3JlNDkodmFsaWRhdG9ycywgbnVtU2VhdHMpIHtcbiAgICBjb25zdCBzdGFrZXMgPSB2YWxpZGF0b3JzLm1hcCh2ID0+IG5ldyBibl9qc18xLmRlZmF1bHQodi5zdGFrZSwgMTApKS5zb3J0KChhLCBiKSA9PiBhLmNtcChiKSk7XG4gICAgY29uc3QgbnVtID0gbmV3IGJuX2pzXzEuZGVmYXVsdChudW1TZWF0cyk7XG4gICAgY29uc3Qgc3Rha2VzU3VtID0gc3Rha2VzLnJlZHVjZSgoYSwgYikgPT4gYS5hZGQoYikpO1xuICAgIGlmIChzdGFrZXNTdW0ubHQobnVtKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1N0YWtlcyBhcmUgYmVsb3cgc2VhdHMnKTtcbiAgICB9XG4gICAgLy8gYXNzZXJ0IHN0YWtlc1N1bSA+PSBudW1TZWF0c1xuICAgIGxldCBsZWZ0ID0gbmV3IGJuX2pzXzEuZGVmYXVsdCgxKSwgcmlnaHQgPSBzdGFrZXNTdW0uYWRkKG5ldyBibl9qc18xLmRlZmF1bHQoMSkpO1xuICAgIHdoaWxlICghbGVmdC5lcShyaWdodC5zdWIobmV3IGJuX2pzXzEuZGVmYXVsdCgxKSkpKSB7XG4gICAgICAgIGNvbnN0IG1pZCA9IGxlZnQuYWRkKHJpZ2h0KS5kaXYobmV3IGJuX2pzXzEuZGVmYXVsdCgyKSk7XG4gICAgICAgIGxldCBmb3VuZCA9IGZhbHNlO1xuICAgICAgICBsZXQgY3VycmVudFN1bSA9IG5ldyBibl9qc18xLmRlZmF1bHQoMCk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3Rha2VzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICBjdXJyZW50U3VtID0gY3VycmVudFN1bS5hZGQoc3Rha2VzW2ldLmRpdihtaWQpKTtcbiAgICAgICAgICAgIGlmIChjdXJyZW50U3VtLmd0ZShudW0pKSB7XG4gICAgICAgICAgICAgICAgbGVmdCA9IG1pZDtcbiAgICAgICAgICAgICAgICBmb3VuZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFmb3VuZCkge1xuICAgICAgICAgICAgcmlnaHQgPSBtaWQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGxlZnQ7XG59XG4vLyBuZWFyY29yZSByZWZlcmVuY2U6IGh0dHBzOi8vZ2l0aHViLmNvbS9uZWFyL25lYXJjb3JlL2Jsb2IvNWE4YWUyNjNlYzA3OTMwY2QzNGQwZGNmNWJjZWUyNTBjNjdjMDJhYS9jaGFpbi9lcG9jaF9tYW5hZ2VyL3NyYy92YWxpZGF0b3Jfc2VsZWN0aW9uLnJzI0wzMDg7TDMxNVxuZnVuY3Rpb24gZmluZFNlYXRQcmljZUZvclByb3RvY29sQWZ0ZXI0OSh2YWxpZGF0b3JzLCBtYXhOdW1iZXJPZlNlYXRzLCBtaW5pbXVtU3Rha2VSYXRpbykge1xuICAgIGlmIChtaW5pbXVtU3Rha2VSYXRpby5sZW5ndGggIT0gMikge1xuICAgICAgICB0aHJvdyBFcnJvcignbWluaW11bVN0YWtlUmF0aW8gc2hvdWxkIGhhdmUgMiBlbGVtZW50cycpO1xuICAgIH1cbiAgICBjb25zdCBzdGFrZXMgPSB2YWxpZGF0b3JzLm1hcCh2ID0+IG5ldyBibl9qc18xLmRlZmF1bHQodi5zdGFrZSwgMTApKS5zb3J0KChhLCBiKSA9PiBhLmNtcChiKSk7XG4gICAgY29uc3Qgc3Rha2VzU3VtID0gc3Rha2VzLnJlZHVjZSgoYSwgYikgPT4gYS5hZGQoYikpO1xuICAgIGlmICh2YWxpZGF0b3JzLmxlbmd0aCA8IG1heE51bWJlck9mU2VhdHMpIHtcbiAgICAgICAgcmV0dXJuIHN0YWtlc1N1bS5tdWwobmV3IGJuX2pzXzEuZGVmYXVsdChtaW5pbXVtU3Rha2VSYXRpb1swXSkpLmRpdihuZXcgYm5fanNfMS5kZWZhdWx0KG1pbmltdW1TdGFrZVJhdGlvWzFdKSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gc3Rha2VzWzBdLmFkZChuZXcgYm5fanNfMS5kZWZhdWx0KDEpKTtcbiAgICB9XG59XG4vKiogRGlmZiB2YWxpZGF0b3JzIGJldHdlZW4gY3VycmVudCBhbmQgbmV4dCBlcG9jaC5cbiAqIFJldHVybnMgYWRkaXRpb25zLCBzdWJ0cmFjdGlvbnMgYW5kIGNoYW5nZXMgdG8gdmFsaWRhdG9yIHNldC5cbiAqIEBwYXJhbXMgY3VycmVudFZhbGlkYXRvcnM6IGxpc3Qgb2YgY3VycmVudCB2YWxpZGF0b3JzLlxuICogQHBhcmFtcyBuZXh0VmFsaWRhdG9yczogbGlzdCBvZiBuZXh0IHZhbGlkYXRvcnMuXG4gKi9cbmZ1bmN0aW9uIGRpZmZFcG9jaFZhbGlkYXRvcnMoY3VycmVudFZhbGlkYXRvcnMsIG5leHRWYWxpZGF0b3JzKSB7XG4gICAgY29uc3QgdmFsaWRhdG9yc01hcCA9IG5ldyBNYXAoKTtcbiAgICBjdXJyZW50VmFsaWRhdG9ycy5mb3JFYWNoKHYgPT4gdmFsaWRhdG9yc01hcC5zZXQodi5hY2NvdW50X2lkLCB2KSk7XG4gICAgY29uc3QgbmV4dFZhbGlkYXRvcnNTZXQgPSBuZXcgU2V0KG5leHRWYWxpZGF0b3JzLm1hcCh2ID0+IHYuYWNjb3VudF9pZCkpO1xuICAgIHJldHVybiB7XG4gICAgICAgIG5ld1ZhbGlkYXRvcnM6IG5leHRWYWxpZGF0b3JzLmZpbHRlcih2ID0+ICF2YWxpZGF0b3JzTWFwLmhhcyh2LmFjY291bnRfaWQpKSxcbiAgICAgICAgcmVtb3ZlZFZhbGlkYXRvcnM6IGN1cnJlbnRWYWxpZGF0b3JzLmZpbHRlcih2ID0+ICFuZXh0VmFsaWRhdG9yc1NldC5oYXModi5hY2NvdW50X2lkKSksXG4gICAgICAgIGNoYW5nZWRWYWxpZGF0b3JzOiBuZXh0VmFsaWRhdG9ycy5maWx0ZXIodiA9PiAodmFsaWRhdG9yc01hcC5oYXModi5hY2NvdW50X2lkKSAmJiB2YWxpZGF0b3JzTWFwLmdldCh2LmFjY291bnRfaWQpLnN0YWtlICE9IHYuc3Rha2UpKVxuICAgICAgICAgICAgLm1hcCh2ID0+ICh7IGN1cnJlbnQ6IHZhbGlkYXRvcnNNYXAuZ2V0KHYuYWNjb3VudF9pZCksIG5leHQ6IHYgfSkpXG4gICAgfTtcbn1cbmV4cG9ydHMuZGlmZkVwb2NoVmFsaWRhdG9ycyA9IGRpZmZFcG9jaFZhbGlkYXRvcnM7XG4iXSwibmFtZXMiOlsiX19pbXBvcnREZWZhdWx0IiwibW9kIiwiX19lc01vZHVsZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZGlmZkVwb2NoVmFsaWRhdG9ycyIsImZpbmRTZWF0UHJpY2UiLCJibl9qc18xIiwicmVxdWlyZSIsImRlcGRfMSIsInZhbGlkYXRvcnMiLCJtYXhOdW1iZXJPZlNlYXRzIiwibWluaW11bVN0YWtlUmF0aW8iLCJwcm90b2NvbFZlcnNpb24iLCJmaW5kU2VhdFByaWNlRm9yUHJvdG9jb2xCZWZvcmU0OSIsImRlcHJlY2F0ZSIsImRlZmF1bHQiLCJmaW5kU2VhdFByaWNlRm9yUHJvdG9jb2xBZnRlcjQ5IiwibnVtU2VhdHMiLCJzdGFrZXMiLCJtYXAiLCJ2Iiwic3Rha2UiLCJzb3J0IiwiYSIsImIiLCJjbXAiLCJudW0iLCJzdGFrZXNTdW0iLCJyZWR1Y2UiLCJhZGQiLCJsdCIsIkVycm9yIiwibGVmdCIsInJpZ2h0IiwiZXEiLCJzdWIiLCJtaWQiLCJkaXYiLCJmb3VuZCIsImN1cnJlbnRTdW0iLCJpIiwibGVuZ3RoIiwiZ3RlIiwibXVsIiwiY3VycmVudFZhbGlkYXRvcnMiLCJuZXh0VmFsaWRhdG9ycyIsInZhbGlkYXRvcnNNYXAiLCJNYXAiLCJmb3JFYWNoIiwic2V0IiwiYWNjb3VudF9pZCIsIm5leHRWYWxpZGF0b3JzU2V0IiwiU2V0IiwibmV3VmFsaWRhdG9ycyIsImZpbHRlciIsImhhcyIsInJlbW92ZWRWYWxpZGF0b3JzIiwiY2hhbmdlZFZhbGlkYXRvcnMiLCJnZXQiLCJjdXJyZW50IiwibmV4dCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@near-js/utils/lib/validators.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@near-js/wallet-account/lib/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/@near-js/wallet-account/lib/index.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.WalletConnection = exports.ConnectedWalletAccount = exports.Near = void 0;\nvar near_1 = __webpack_require__(/*! ./near */ \"(ssr)/./node_modules/@near-js/wallet-account/lib/near.js\");\nObject.defineProperty(exports, \"Near\", ({\n    enumerable: true,\n    get: function() {\n        return near_1.Near;\n    }\n}));\nvar wallet_account_1 = __webpack_require__(/*! ./wallet_account */ \"(ssr)/./node_modules/@near-js/wallet-account/lib/wallet_account.js\");\nObject.defineProperty(exports, \"ConnectedWalletAccount\", ({\n    enumerable: true,\n    get: function() {\n        return wallet_account_1.ConnectedWalletAccount;\n    }\n}));\nObject.defineProperty(exports, \"WalletConnection\", ({\n    enumerable: true,\n    get: function() {\n        return wallet_account_1.WalletConnection;\n    }\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG5lYXItanMvd2FsbGV0LWFjY291bnQvbGliL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCx3QkFBd0IsR0FBR0EsOEJBQThCLEdBQUdBLFlBQVksR0FBRyxLQUFLO0FBQ2hGLElBQUlLLFNBQVNDLG1CQUFPQSxDQUFDLHdFQUFRO0FBQzdCUix3Q0FBdUM7SUFBRVMsWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT0gsT0FBT0QsSUFBSTtJQUFFO0FBQUUsQ0FBQyxFQUFDO0FBQ3RHLElBQUlLLG1CQUFtQkgsbUJBQU9BLENBQUMsNEZBQWtCO0FBQ2pEUiwwREFBeUQ7SUFBRVMsWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT0MsaUJBQWlCTixzQkFBc0I7SUFBRTtBQUFFLENBQUMsRUFBQztBQUNwSkwsb0RBQW1EO0lBQUVTLFlBQVk7SUFBTUMsS0FBSztRQUFjLE9BQU9DLGlCQUFpQlAsZ0JBQWdCO0lBQUU7QUFBRSxDQUFDLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pLWFtLW5lYXJieS8uL25vZGVfbW9kdWxlcy9AbmVhci1qcy93YWxsZXQtYWNjb3VudC9saWIvaW5kZXguanM/MjU0ZiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuV2FsbGV0Q29ubmVjdGlvbiA9IGV4cG9ydHMuQ29ubmVjdGVkV2FsbGV0QWNjb3VudCA9IGV4cG9ydHMuTmVhciA9IHZvaWQgMDtcbnZhciBuZWFyXzEgPSByZXF1aXJlKFwiLi9uZWFyXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiTmVhclwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gbmVhcl8xLk5lYXI7IH0gfSk7XG52YXIgd2FsbGV0X2FjY291bnRfMSA9IHJlcXVpcmUoXCIuL3dhbGxldF9hY2NvdW50XCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQ29ubmVjdGVkV2FsbGV0QWNjb3VudFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gd2FsbGV0X2FjY291bnRfMS5Db25uZWN0ZWRXYWxsZXRBY2NvdW50OyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiV2FsbGV0Q29ubmVjdGlvblwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gd2FsbGV0X2FjY291bnRfMS5XYWxsZXRDb25uZWN0aW9uOyB9IH0pO1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiV2FsbGV0Q29ubmVjdGlvbiIsIkNvbm5lY3RlZFdhbGxldEFjY291bnQiLCJOZWFyIiwibmVhcl8xIiwicmVxdWlyZSIsImVudW1lcmFibGUiLCJnZXQiLCJ3YWxsZXRfYWNjb3VudF8xIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@near-js/wallet-account/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@near-js/wallet-account/lib/near.js":
/*!**********************************************************!*\
  !*** ./node_modules/@near-js/wallet-account/lib/near.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n        });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = this && this.__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.Near = void 0;\n/**\n * This module contains the main class developers will use to interact with NEAR.\n * The {@link Near} class is used to interact with {@link account!Account | Accounts} through the {@link providers/json-rpc-provider!JsonRpcProvider}.\n * It is configured via the {@link NearConfig}.\n *\n * @see [https://docs.near.org/tools/near-api-js/quick-reference#account](https://docs.near.org/tools/near-api-js/quick-reference#account)\n *\n * @module near\n */ const accounts_1 = __webpack_require__(/*! @near-js/accounts */ \"(ssr)/./node_modules/@near-js/accounts/lib/index.js\");\nconst bn_js_1 = __importDefault(__webpack_require__(/*! bn.js */ \"(ssr)/./node_modules/bn.js/lib/bn.js\"));\n/**\n * This is the main class developers should use to interact with NEAR.\n * @example\n * ```js\n * const near = new Near(config);\n * ```\n */ class Near {\n    constructor(config){\n        var _a;\n        this.config = config;\n        this.connection = accounts_1.Connection.fromConfig({\n            networkId: config.networkId,\n            provider: {\n                type: \"JsonRpcProvider\",\n                args: {\n                    url: config.nodeUrl,\n                    headers: config.headers\n                }\n            },\n            signer: config.signer || {\n                type: \"InMemorySigner\",\n                keyStore: config.keyStore || ((_a = config.deps) === null || _a === void 0 ? void 0 : _a.keyStore)\n            },\n            jsvmAccountId: config.jsvmAccountId || `jsvm.${config.networkId}`\n        });\n        if (config.masterAccount) {\n            // TODO: figure out better way of specifiying initial balance.\n            // Hardcoded number below must be enough to pay the gas cost to dev-deploy with near-shell for multiple times\n            const initialBalance = config.initialBalance ? new bn_js_1.default(config.initialBalance) : new bn_js_1.default(\"500000000000000000000000000\");\n            this.accountCreator = new accounts_1.LocalAccountCreator(new accounts_1.Account(this.connection, config.masterAccount), initialBalance);\n        } else if (config.helperUrl) {\n            this.accountCreator = new accounts_1.UrlAccountCreator(this.connection, config.helperUrl);\n        } else {\n            this.accountCreator = null;\n        }\n    }\n    /**\n     * @param accountId near accountId used to interact with the network.\n     */ account(accountId) {\n        return __awaiter(this, void 0, void 0, function*() {\n            const account = new accounts_1.Account(this.connection, accountId);\n            return account;\n        });\n    }\n    /**\n     * Create an account using the {@link account_creator!AccountCreator}. Either:\n     * * using a masterAccount with {@link account_creator!LocalAccountCreator}\n     * * using the helperUrl with {@link account_creator!UrlAccountCreator}\n     * @see {@link NearConfig.masterAccount} and {@link NearConfig.helperUrl}\n     *\n     * @param accountId\n     * @param publicKey\n     */ createAccount(accountId, publicKey) {\n        return __awaiter(this, void 0, void 0, function*() {\n            if (!this.accountCreator) {\n                throw new Error(\"Must specify account creator, either via masterAccount or helperUrl configuration settings.\");\n            }\n            yield this.accountCreator.createAccount(accountId, publicKey);\n            return new accounts_1.Account(this.connection, accountId);\n        });\n    }\n}\nexports.Near = Near;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@near-js/wallet-account/lib/near.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@near-js/wallet-account/lib/wallet_account.js":
/*!********************************************************************!*\
  !*** ./node_modules/@near-js/wallet-account/lib/wallet_account.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n        });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = this && this.__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.ConnectedWalletAccount = exports.WalletConnection = void 0;\n/**\n * The classes in this module are used in conjunction with the {@link key_stores/browser_local_storage_key_store!BrowserLocalStorageKeyStore}.\n * This module exposes two classes:\n * * {@link WalletConnection} which redirects users to [NEAR Wallet](https://wallet.near.org/) for key management.\n * * {@link ConnectedWalletAccount} is an {@link account!Account} implementation that uses {@link WalletConnection} to get keys\n *\n * @module walletAccount\n */ const accounts_1 = __webpack_require__(/*! @near-js/accounts */ \"(ssr)/./node_modules/@near-js/accounts/lib/index.js\");\nconst crypto_1 = __webpack_require__(/*! @near-js/crypto */ \"(ssr)/./node_modules/@near-js/crypto/lib/index.js\");\nconst transactions_1 = __webpack_require__(/*! @near-js/transactions */ \"(ssr)/./node_modules/@near-js/transactions/lib/index.js\");\nconst bn_js_1 = __importDefault(__webpack_require__(/*! bn.js */ \"(ssr)/./node_modules/bn.js/lib/bn.js\"));\nconst borsh_1 = __webpack_require__(/*! borsh */ \"(ssr)/./node_modules/borsh/lib/index.js\");\nconst LOGIN_WALLET_URL_SUFFIX = \"/login/\";\nconst MULTISIG_HAS_METHOD = \"add_request_and_confirm\";\nconst LOCAL_STORAGE_KEY_SUFFIX = \"_wallet_auth_key\";\nconst PENDING_ACCESS_KEY_PREFIX = \"pending_key\"; // browser storage key for a pending access key (i.e. key has been generated but we are not sure it was added yet)\n/**\n * This class is used in conjunction with the {@link key_stores/browser_local_storage_key_store!BrowserLocalStorageKeyStore}.\n * It redirects users to [NEAR Wallet](https://wallet.near.org) for key management.\n * This class is not intended for use outside the browser. Without `window` (i.e. in server contexts), it will instantiate but will throw a clear error when used.\n *\n * @see [https://docs.near.org/tools/near-api-js/quick-reference#wallet](https://docs.near.org/tools/near-api-js/quick-reference#wallet)\n * @example\n * ```js\n * // create new WalletConnection instance\n * const wallet = new WalletConnection(near, 'my-app');\n *\n * // If not signed in redirect to the NEAR wallet to sign in\n * // keys will be stored in the BrowserLocalStorageKeyStore\n * if(!wallet.isSignedIn()) return wallet.requestSignIn()\n * ```\n */ class WalletConnection {\n    constructor(near, appKeyPrefix){\n        if (typeof appKeyPrefix !== \"string\") {\n            throw new Error(\"Please define a clear appKeyPrefix for this WalletConnection instance as the second argument to the constructor\");\n        }\n        if (true) {\n            return new Proxy(this, {\n                get (target, property) {\n                    if (property === \"isSignedIn\") {\n                        return ()=>false;\n                    }\n                    if (property === \"getAccountId\") {\n                        return ()=>\"\";\n                    }\n                    if (target[property] && typeof target[property] === \"function\") {\n                        return ()=>{\n                            throw new Error(\"No window found in context, please ensure you are using WalletConnection on the browser\");\n                        };\n                    }\n                    return target[property];\n                }\n            });\n        }\n        this._near = near;\n        const authDataKey = appKeyPrefix + LOCAL_STORAGE_KEY_SUFFIX;\n        const authData = JSON.parse(window.localStorage.getItem(authDataKey));\n        this._networkId = near.config.networkId;\n        this._walletBaseUrl = near.config.walletUrl;\n        appKeyPrefix = appKeyPrefix || near.config.contractName || \"default\";\n        this._keyStore = near.connection.signer.keyStore;\n        this._authData = authData || {\n            allKeys: []\n        };\n        this._authDataKey = authDataKey;\n        if (!this.isSignedIn()) {\n            this._completeSignInPromise = this._completeSignInWithAccessKey();\n        }\n    }\n    /**\n     * Returns true, if this WalletConnection is authorized with the wallet.\n     * @example\n     * ```js\n     * const wallet = new WalletConnection(near, 'my-app');\n     * wallet.isSignedIn();\n     * ```\n     */ isSignedIn() {\n        return !!this._authData.accountId;\n    }\n    /**\n     * Returns promise of completing signing in after redirecting from wallet\n     * @example\n     * ```js\n     * // on login callback page\n     * const wallet = new WalletConnection(near, 'my-app');\n     * wallet.isSignedIn(); // false\n     * await wallet.isSignedInAsync(); // true\n     * ```\n     */ isSignedInAsync() {\n        return __awaiter(this, void 0, void 0, function*() {\n            if (!this._completeSignInPromise) {\n                return this.isSignedIn();\n            }\n            yield this._completeSignInPromise;\n            return this.isSignedIn();\n        });\n    }\n    /**\n     * Returns authorized Account ID.\n     * @example\n     * ```js\n     * const wallet = new WalletConnection(near, 'my-app');\n     * wallet.getAccountId();\n     * ```\n     */ getAccountId() {\n        return this._authData.accountId || \"\";\n    }\n    /**\n     * Redirects current page to the wallet authentication page.\n     * @param options An optional options object\n     * @param options.contractId The NEAR account where the contract is deployed\n     * @param options.successUrl URL to redirect upon success. Default: current url\n     * @param options.failureUrl URL to redirect upon failure. Default: current url\n     *\n     * @example\n     * ```js\n     * const wallet = new WalletConnection(near, 'my-app');\n     * // redirects to the NEAR Wallet\n     * wallet.requestSignIn({ contractId: 'account-with-deploy-contract.near' });\n     * ```\n     */ requestSignIn({ contractId, methodNames, successUrl, failureUrl }) {\n        return __awaiter(this, void 0, void 0, function*() {\n            const currentUrl = new URL(window.location.href);\n            const newUrl = new URL(this._walletBaseUrl + LOGIN_WALLET_URL_SUFFIX);\n            newUrl.searchParams.set(\"success_url\", successUrl || currentUrl.href);\n            newUrl.searchParams.set(\"failure_url\", failureUrl || currentUrl.href);\n            if (contractId) {\n                /* Throws exception if contract account does not exist */ const contractAccount = yield this._near.account(contractId);\n                yield contractAccount.state();\n                newUrl.searchParams.set(\"contract_id\", contractId);\n                const accessKey = crypto_1.KeyPair.fromRandom(\"ed25519\");\n                newUrl.searchParams.set(\"public_key\", accessKey.getPublicKey().toString());\n                yield this._keyStore.setKey(this._networkId, PENDING_ACCESS_KEY_PREFIX + accessKey.getPublicKey(), accessKey);\n            }\n            if (methodNames) {\n                methodNames.forEach((methodName)=>{\n                    newUrl.searchParams.append(\"methodNames\", methodName);\n                });\n            }\n            window.location.assign(newUrl.toString());\n        });\n    }\n    /**\n     * Requests the user to quickly sign for a transaction or batch of transactions by redirecting to the NEAR wallet.\n     */ requestSignTransactions({ transactions, meta, callbackUrl }) {\n        return __awaiter(this, void 0, void 0, function*() {\n            const currentUrl = new URL(window.location.href);\n            const newUrl = new URL(\"sign\", this._walletBaseUrl);\n            newUrl.searchParams.set(\"transactions\", transactions.map((transaction)=>(0, borsh_1.serialize)(transactions_1.SCHEMA, transaction)).map((serialized)=>Buffer.from(serialized).toString(\"base64\")).join(\",\"));\n            newUrl.searchParams.set(\"callbackUrl\", callbackUrl || currentUrl.href);\n            if (meta) newUrl.searchParams.set(\"meta\", meta);\n            window.location.assign(newUrl.toString());\n        });\n    }\n    /**\n     * @hidden\n     * Complete sign in for a given account id and public key. To be invoked by the app when getting a callback from the wallet.\n     */ _completeSignInWithAccessKey() {\n        return __awaiter(this, void 0, void 0, function*() {\n            const currentUrl = new URL(window.location.href);\n            const publicKey = currentUrl.searchParams.get(\"public_key\") || \"\";\n            const allKeys = (currentUrl.searchParams.get(\"all_keys\") || \"\").split(\",\");\n            const accountId = currentUrl.searchParams.get(\"account_id\") || \"\";\n            // TODO: Handle errors during login\n            if (accountId) {\n                const authData = {\n                    accountId,\n                    allKeys\n                };\n                window.localStorage.setItem(this._authDataKey, JSON.stringify(authData));\n                if (publicKey) {\n                    yield this._moveKeyFromTempToPermanent(accountId, publicKey);\n                }\n                this._authData = authData;\n            }\n            currentUrl.searchParams.delete(\"public_key\");\n            currentUrl.searchParams.delete(\"all_keys\");\n            currentUrl.searchParams.delete(\"account_id\");\n            currentUrl.searchParams.delete(\"meta\");\n            currentUrl.searchParams.delete(\"transactionHashes\");\n            window.history.replaceState({}, document.title, currentUrl.toString());\n        });\n    }\n    /**\n     * @hidden\n     * @param accountId The NEAR account owning the given public key\n     * @param publicKey The public key being set to the key store\n     */ _moveKeyFromTempToPermanent(accountId, publicKey) {\n        return __awaiter(this, void 0, void 0, function*() {\n            const keyPair = yield this._keyStore.getKey(this._networkId, PENDING_ACCESS_KEY_PREFIX + publicKey);\n            yield this._keyStore.setKey(this._networkId, accountId, keyPair);\n            yield this._keyStore.removeKey(this._networkId, PENDING_ACCESS_KEY_PREFIX + publicKey);\n        });\n    }\n    /**\n     * Sign out from the current account\n     * @example\n     * walletConnection.signOut();\n     */ signOut() {\n        this._authData = {};\n        window.localStorage.removeItem(this._authDataKey);\n    }\n    /**\n     * Returns the current connected wallet account\n     */ account() {\n        if (!this._connectedAccount) {\n            this._connectedAccount = new ConnectedWalletAccount(this, this._near.connection, this._authData.accountId);\n        }\n        return this._connectedAccount;\n    }\n}\nexports.WalletConnection = WalletConnection;\n/**\n * {@link account!Account} implementation which redirects to wallet using {@link WalletConnection} when no local key is available.\n */ class ConnectedWalletAccount extends accounts_1.Account {\n    constructor(walletConnection, connection, accountId){\n        super(connection, accountId);\n        this.walletConnection = walletConnection;\n    }\n    // Overriding Account methods\n    /**\n     * Sign a transaction by redirecting to the NEAR Wallet\n     * @see {@link WalletConnection.requestSignTransactions}\n     */ signAndSendTransaction({ receiverId, actions, walletMeta, walletCallbackUrl = window.location.href }) {\n        const _super = Object.create(null, {\n            signAndSendTransaction: {\n                get: ()=>super.signAndSendTransaction\n            }\n        });\n        return __awaiter(this, void 0, void 0, function*() {\n            const localKey = yield this.connection.signer.getPublicKey(this.accountId, this.connection.networkId);\n            let accessKey = yield this.accessKeyForTransaction(receiverId, actions, localKey);\n            if (!accessKey) {\n                throw new Error(`Cannot find matching key for transaction sent to ${receiverId}`);\n            }\n            if (localKey && localKey.toString() === accessKey.public_key) {\n                try {\n                    return yield _super.signAndSendTransaction.call(this, {\n                        receiverId,\n                        actions\n                    });\n                } catch (e) {\n                    if (e.type === \"NotEnoughAllowance\") {\n                        accessKey = yield this.accessKeyForTransaction(receiverId, actions);\n                    } else {\n                        throw e;\n                    }\n                }\n            }\n            const block = yield this.connection.provider.block({\n                finality: \"final\"\n            });\n            const blockHash = (0, borsh_1.baseDecode)(block.header.hash);\n            const publicKey = crypto_1.PublicKey.from(accessKey.public_key);\n            // TODO: Cache & listen for nonce updates for given access key\n            const nonce = accessKey.access_key.nonce.add(new bn_js_1.default(1));\n            const transaction = (0, transactions_1.createTransaction)(this.accountId, publicKey, receiverId, nonce, actions, blockHash);\n            yield this.walletConnection.requestSignTransactions({\n                transactions: [\n                    transaction\n                ],\n                meta: walletMeta,\n                callbackUrl: walletCallbackUrl\n            });\n            return new Promise((resolve, reject)=>{\n                setTimeout(()=>{\n                    reject(new Error(\"Failed to redirect to sign transaction\"));\n                }, 1000);\n            });\n        // TODO: Aggregate multiple transaction request with \"debounce\".\n        // TODO: Introduce TrasactionQueue which also can be used to watch for status?\n        });\n    }\n    /**\n     * Check if given access key allows the function call or method attempted in transaction\n     * @param accessKey Array of \\{access_key: AccessKey, public_key: PublicKey\\} items\n     * @param receiverId The NEAR account attempting to have access\n     * @param actions The action(s) needed to be checked for access\n     */ accessKeyMatchesTransaction(accessKey, receiverId, actions) {\n        return __awaiter(this, void 0, void 0, function*() {\n            const { access_key: { permission } } = accessKey;\n            if (permission === \"FullAccess\") {\n                return true;\n            }\n            if (permission.FunctionCall) {\n                const { receiver_id: allowedReceiverId, method_names: allowedMethods } = permission.FunctionCall;\n                /********************************\n                Accept multisig access keys and let wallets attempt to signAndSendTransaction\n                If an access key has itself as receiverId and method permission add_request_and_confirm, then it is being used in a wallet with multisig contract: https://github.com/near/core-contracts/blob/671c05f09abecabe7a7e58efe942550a35fc3292/multisig/src/lib.rs#L149-L153\n                ********************************/ if (allowedReceiverId === this.accountId && allowedMethods.includes(MULTISIG_HAS_METHOD)) {\n                    return true;\n                }\n                if (allowedReceiverId === receiverId) {\n                    if (actions.length !== 1) {\n                        return false;\n                    }\n                    const [{ functionCall }] = actions;\n                    return functionCall && (!functionCall.deposit || functionCall.deposit.toString() === \"0\") && // TODO: Should support charging amount smaller than allowance?\n                    (allowedMethods.length === 0 || allowedMethods.includes(functionCall.methodName));\n                // TODO: Handle cases when allowance doesn't have enough to pay for gas\n                }\n            }\n            // TODO: Support other permissions than FunctionCall\n            return false;\n        });\n    }\n    /**\n     * Helper function returning the access key (if it exists) to the receiver that grants the designated permission\n     * @param receiverId The NEAR account seeking the access key for a transaction\n     * @param actions The action(s) sought to gain access to\n     * @param localKey A local public key provided to check for access\n     */ accessKeyForTransaction(receiverId, actions, localKey) {\n        return __awaiter(this, void 0, void 0, function*() {\n            const accessKeys = yield this.getAccessKeys();\n            if (localKey) {\n                const accessKey = accessKeys.find((key)=>key.public_key.toString() === localKey.toString());\n                if (accessKey && (yield this.accessKeyMatchesTransaction(accessKey, receiverId, actions))) {\n                    return accessKey;\n                }\n            }\n            const walletKeys = this.walletConnection._authData.allKeys;\n            for (const accessKey of accessKeys){\n                if (walletKeys.indexOf(accessKey.public_key) !== -1 && (yield this.accessKeyMatchesTransaction(accessKey, receiverId, actions))) {\n                    return accessKey;\n                }\n            }\n            return null;\n        });\n    }\n}\nexports.ConnectedWalletAccount = ConnectedWalletAccount;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@near-js/wallet-account/lib/wallet_account.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/refs/data.json":
/*!*****************************************************************************!*\
  !*** ./node_modules/@near-js/accounts/node_modules/ajv/dist/refs/data.json ***!
  \*****************************************************************************/
/***/ ((module) => {

module.exports = JSON.parse('{"$id":"https://raw.githubusercontent.com/ajv-validator/ajv/master/lib/refs/data.json#","description":"Meta-schema for $data reference (JSON AnySchema extension proposal)","type":"object","required":["$data"],"properties":{"$data":{"type":"string","anyOf":[{"format":"relative-json-pointer"},{"format":"json-pointer"}]}},"additionalProperties":false}');

/***/ }),

/***/ "(ssr)/./node_modules/@near-js/accounts/node_modules/ajv/dist/refs/json-schema-draft-07.json":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@near-js/accounts/node_modules/ajv/dist/refs/json-schema-draft-07.json ***!
  \*********************************************************************************************/
/***/ ((module) => {

module.exports = JSON.parse('{"$schema":"http://json-schema.org/draft-07/schema#","$id":"http://json-schema.org/draft-07/schema#","title":"Core schema meta-schema","definitions":{"schemaArray":{"type":"array","minItems":1,"items":{"$ref":"#"}},"nonNegativeInteger":{"type":"integer","minimum":0},"nonNegativeIntegerDefault0":{"allOf":[{"$ref":"#/definitions/nonNegativeInteger"},{"default":0}]},"simpleTypes":{"enum":["array","boolean","integer","null","number","object","string"]},"stringArray":{"type":"array","items":{"type":"string"},"uniqueItems":true,"default":[]}},"type":["object","boolean"],"properties":{"$id":{"type":"string","format":"uri-reference"},"$schema":{"type":"string","format":"uri"},"$ref":{"type":"string","format":"uri-reference"},"$comment":{"type":"string"},"title":{"type":"string"},"description":{"type":"string"},"default":true,"readOnly":{"type":"boolean","default":false},"examples":{"type":"array","items":true},"multipleOf":{"type":"number","exclusiveMinimum":0},"maximum":{"type":"number"},"exclusiveMaximum":{"type":"number"},"minimum":{"type":"number"},"exclusiveMinimum":{"type":"number"},"maxLength":{"$ref":"#/definitions/nonNegativeInteger"},"minLength":{"$ref":"#/definitions/nonNegativeIntegerDefault0"},"pattern":{"type":"string","format":"regex"},"additionalItems":{"$ref":"#"},"items":{"anyOf":[{"$ref":"#"},{"$ref":"#/definitions/schemaArray"}],"default":true},"maxItems":{"$ref":"#/definitions/nonNegativeInteger"},"minItems":{"$ref":"#/definitions/nonNegativeIntegerDefault0"},"uniqueItems":{"type":"boolean","default":false},"contains":{"$ref":"#"},"maxProperties":{"$ref":"#/definitions/nonNegativeInteger"},"minProperties":{"$ref":"#/definitions/nonNegativeIntegerDefault0"},"required":{"$ref":"#/definitions/stringArray"},"additionalProperties":{"$ref":"#"},"definitions":{"type":"object","additionalProperties":{"$ref":"#"},"default":{}},"properties":{"type":"object","additionalProperties":{"$ref":"#"},"default":{}},"patternProperties":{"type":"object","additionalProperties":{"$ref":"#"},"propertyNames":{"format":"regex"},"default":{}},"dependencies":{"type":"object","additionalProperties":{"anyOf":[{"$ref":"#"},{"$ref":"#/definitions/stringArray"}]}},"propertyNames":{"$ref":"#"},"const":true,"enum":{"type":"array","items":true,"minItems":1,"uniqueItems":true},"type":{"anyOf":[{"$ref":"#/definitions/simpleTypes"},{"type":"array","items":{"$ref":"#/definitions/simpleTypes"},"minItems":1,"uniqueItems":true}]},"format":{"type":"string"},"contentMediaType":{"type":"string"},"contentEncoding":{"type":"string"},"if":{"$ref":"#"},"then":{"$ref":"#"},"else":{"$ref":"#"},"allOf":{"$ref":"#/definitions/schemaArray"},"anyOf":{"$ref":"#/definitions/schemaArray"},"oneOf":{"$ref":"#/definitions/schemaArray"},"not":{"$ref":"#"}},"default":true}');

/***/ }),

/***/ "(ssr)/./node_modules/@near-js/utils/lib/errors/error_messages.json":
/*!********************************************************************!*\
  !*** ./node_modules/@near-js/utils/lib/errors/error_messages.json ***!
  \********************************************************************/
/***/ ((module) => {

module.exports = JSON.parse('{"GasLimitExceeded":"Exceeded the maximum amount of gas allowed to burn per contract","MethodEmptyName":"Method name is empty","WasmerCompileError":"Wasmer compilation error: {{msg}}","GuestPanic":"Smart contract panicked: {{panic_msg}}","Memory":"Error creating Wasm memory","GasExceeded":"Exceeded the prepaid gas","MethodUTF8Error":"Method name is not valid UTF8 string","BadUTF16":"String encoding is bad UTF-16 sequence","WasmTrap":"WebAssembly trap: {{msg}}","GasInstrumentation":"Gas instrumentation failed or contract has denied instructions.","InvalidPromiseIndex":"{{promise_idx}} does not correspond to existing promises","InvalidPromiseResultIndex":"Accessed invalid promise result index: {{result_idx}}","Deserialization":"Error happened while deserializing the module","MethodNotFound":"Contract method is not found","InvalidRegisterId":"Accessed invalid register id: {{register_id}}","InvalidReceiptIndex":"VM Logic returned an invalid receipt index: {{receipt_index}}","EmptyMethodName":"Method name is empty in contract call","CannotReturnJointPromise":"Returning joint promise is currently prohibited","StackHeightInstrumentation":"Stack instrumentation failed","CodeDoesNotExist":"Cannot find contract code for account {{account_id}}","MethodInvalidSignature":"Invalid method signature","IntegerOverflow":"Integer overflow happened during contract execution","MemoryAccessViolation":"MemoryAccessViolation","InvalidIteratorIndex":"Iterator index {{iterator_index}} does not exist","IteratorWasInvalidated":"Iterator {{iterator_index}} was invalidated after its creation by performing a mutable operation on trie","InvalidAccountId":"VM Logic returned an invalid account id","Serialization":"Error happened while serializing the module","CannotAppendActionToJointPromise":"Actions can only be appended to non-joint promise.","InternalMemoryDeclared":"Internal memory declaration has been found in the module","Instantiate":"Error happened during instantiation","ProhibitedInView":"{{method_name}} is not allowed in view calls","InvalidMethodName":"VM Logic returned an invalid method name","BadUTF8":"String encoding is bad UTF-8 sequence","BalanceExceeded":"Exceeded the account balance","LinkError":"Wasm contract link error: {{msg}}","InvalidPublicKey":"VM Logic provided an invalid public key","ActorNoPermission":"Actor {{actor_id}} doesn\'t have permission to account {{account_id}} to complete the action","LackBalanceForState":"The account {{account_id}} wouldn\'t have enough balance to cover storage, required to have {{amount}} yoctoNEAR more","ReceiverMismatch":"Wrong AccessKey used for transaction: transaction is sent to receiver_id={{tx_receiver}}, but is signed with function call access key that restricted to only use with receiver_id={{ak_receiver}}. Either change receiver_id in your transaction or switch to use a FullAccessKey.","CostOverflow":"Transaction gas or balance cost is too high","InvalidSignature":"Transaction is not signed with the given public key","AccessKeyNotFound":"Signer \\"{{account_id}}\\" doesn\'t have access key with the given public_key {{public_key}}","NotEnoughBalance":"Sender {{signer_id}} does not have enough balance {{#formatNear}}{{balance}}{{/formatNear}} for operation costing {{#formatNear}}{{cost}}{{/formatNear}}","NotEnoughAllowance":"Access Key {account_id}:{public_key} does not have enough balance {{#formatNear}}{{allowance}}{{/formatNear}} for transaction costing {{#formatNear}}{{cost}}{{/formatNear}}","Expired":"Transaction has expired","DeleteAccountStaking":"Account {{account_id}} is staking and can not be deleted","SignerDoesNotExist":"Signer {{signer_id}} does not exist","TriesToStake":"Account {{account_id}} tried to stake {{#formatNear}}{{stake}}{{/formatNear}}, but has staked {{#formatNear}}{{locked}}{{/formatNear}} and only has {{#formatNear}}{{balance}}{{/formatNear}}","AddKeyAlreadyExists":"The public key {{public_key}} is already used for an existing access key","InvalidSigner":"Invalid signer account ID {{signer_id}} according to requirements","CreateAccountNotAllowed":"The new account_id {{account_id}} can\'t be created by {{predecessor_id}}","RequiresFullAccess":"The transaction contains more then one action, but it was signed with an access key which allows transaction to apply only one specific action. To apply more then one actions TX must be signed with a full access key","TriesToUnstake":"Account {{account_id}} is not yet staked, but tried to unstake","InvalidNonce":"Transaction nonce {{tx_nonce}} must be larger than nonce of the used access key {{ak_nonce}}","AccountAlreadyExists":"Can\'t create a new account {{account_id}}, because it already exists","InvalidChain":"Transaction parent block hash doesn\'t belong to the current chain","AccountDoesNotExist":"Can\'t complete the action because account {{account_id}} doesn\'t exist","MethodNameMismatch":"Transaction method name {{method_name}} isn\'t allowed by the access key","DeleteAccountHasRent":"Account {{account_id}} can\'t be deleted. It has {{#formatNear}}{{balance}}{{/formatNear}}, which is enough to cover the rent","DeleteAccountHasEnoughBalance":"Account {{account_id}} can\'t be deleted. It has {{#formatNear}}{{balance}}{{/formatNear}}, which is enough to cover it\'s storage","InvalidReceiver":"Invalid receiver account ID {{receiver_id}} according to requirements","DeleteKeyDoesNotExist":"Account {{account_id}} tries to remove an access key that doesn\'t exist","Timeout":"Timeout exceeded","Closed":"Connection closed"}');

/***/ }),

/***/ "(ssr)/./node_modules/@near-js/utils/lib/errors/rpc_error_schema.json":
/*!**********************************************************************!*\
  !*** ./node_modules/@near-js/utils/lib/errors/rpc_error_schema.json ***!
  \**********************************************************************/
/***/ ((module) => {

module.exports = JSON.parse('{"schema":{"BadUTF16":{"name":"BadUTF16","subtypes":[],"props":{}},"BadUTF8":{"name":"BadUTF8","subtypes":[],"props":{}},"BalanceExceeded":{"name":"BalanceExceeded","subtypes":[],"props":{}},"BreakpointTrap":{"name":"BreakpointTrap","subtypes":[],"props":{}},"CacheError":{"name":"CacheError","subtypes":["ReadError","WriteError","DeserializationError","SerializationError"],"props":{}},"CallIndirectOOB":{"name":"CallIndirectOOB","subtypes":[],"props":{}},"CannotAppendActionToJointPromise":{"name":"CannotAppendActionToJointPromise","subtypes":[],"props":{}},"CannotReturnJointPromise":{"name":"CannotReturnJointPromise","subtypes":[],"props":{}},"CodeDoesNotExist":{"name":"CodeDoesNotExist","subtypes":[],"props":{"account_id":""}},"CompilationError":{"name":"CompilationError","subtypes":["CodeDoesNotExist","PrepareError","WasmerCompileError"],"props":{}},"ContractSizeExceeded":{"name":"ContractSizeExceeded","subtypes":[],"props":{"limit":"","size":""}},"Deprecated":{"name":"Deprecated","subtypes":[],"props":{"method_name":""}},"Deserialization":{"name":"Deserialization","subtypes":[],"props":{}},"DeserializationError":{"name":"DeserializationError","subtypes":[],"props":{}},"EmptyMethodName":{"name":"EmptyMethodName","subtypes":[],"props":{}},"FunctionCallError":{"name":"FunctionCallError","subtypes":["CompilationError","LinkError","MethodResolveError","WasmTrap","WasmUnknownError","HostError","EvmError"],"props":{}},"GasExceeded":{"name":"GasExceeded","subtypes":[],"props":{}},"GasInstrumentation":{"name":"GasInstrumentation","subtypes":[],"props":{}},"GasLimitExceeded":{"name":"GasLimitExceeded","subtypes":[],"props":{}},"GenericTrap":{"name":"GenericTrap","subtypes":[],"props":{}},"GuestPanic":{"name":"GuestPanic","subtypes":[],"props":{"panic_msg":""}},"HostError":{"name":"HostError","subtypes":["BadUTF16","BadUTF8","GasExceeded","GasLimitExceeded","BalanceExceeded","EmptyMethodName","GuestPanic","IntegerOverflow","InvalidPromiseIndex","CannotAppendActionToJointPromise","CannotReturnJointPromise","InvalidPromiseResultIndex","InvalidRegisterId","IteratorWasInvalidated","MemoryAccessViolation","InvalidReceiptIndex","InvalidIteratorIndex","InvalidAccountId","InvalidMethodName","InvalidPublicKey","ProhibitedInView","NumberOfLogsExceeded","KeyLengthExceeded","ValueLengthExceeded","TotalLogLengthExceeded","NumberPromisesExceeded","NumberInputDataDependenciesExceeded","ReturnedValueLengthExceeded","ContractSizeExceeded","Deprecated"],"props":{}},"IllegalArithmetic":{"name":"IllegalArithmetic","subtypes":[],"props":{}},"IncorrectCallIndirectSignature":{"name":"IncorrectCallIndirectSignature","subtypes":[],"props":{}},"Instantiate":{"name":"Instantiate","subtypes":[],"props":{}},"IntegerOverflow":{"name":"IntegerOverflow","subtypes":[],"props":{}},"InternalMemoryDeclared":{"name":"InternalMemoryDeclared","subtypes":[],"props":{}},"InvalidAccountId":{"name":"InvalidAccountId","subtypes":[],"props":{"account_id":""}},"InvalidIteratorIndex":{"name":"InvalidIteratorIndex","subtypes":[],"props":{"iterator_index":""}},"InvalidMethodName":{"name":"InvalidMethodName","subtypes":[],"props":{}},"InvalidPromiseIndex":{"name":"InvalidPromiseIndex","subtypes":[],"props":{"promise_idx":""}},"InvalidPromiseResultIndex":{"name":"InvalidPromiseResultIndex","subtypes":[],"props":{"result_idx":""}},"InvalidPublicKey":{"name":"InvalidPublicKey","subtypes":[],"props":{}},"InvalidReceiptIndex":{"name":"InvalidReceiptIndex","subtypes":[],"props":{"receipt_index":""}},"InvalidRegisterId":{"name":"InvalidRegisterId","subtypes":[],"props":{"register_id":""}},"IteratorWasInvalidated":{"name":"IteratorWasInvalidated","subtypes":[],"props":{"iterator_index":""}},"KeyLengthExceeded":{"name":"KeyLengthExceeded","subtypes":[],"props":{"length":"","limit":""}},"LinkError":{"name":"LinkError","subtypes":[],"props":{"msg":""}},"Memory":{"name":"Memory","subtypes":[],"props":{}},"MemoryAccessViolation":{"name":"MemoryAccessViolation","subtypes":[],"props":{}},"MemoryOutOfBounds":{"name":"MemoryOutOfBounds","subtypes":[],"props":{}},"MethodEmptyName":{"name":"MethodEmptyName","subtypes":[],"props":{}},"MethodInvalidSignature":{"name":"MethodInvalidSignature","subtypes":[],"props":{}},"MethodNotFound":{"name":"MethodNotFound","subtypes":[],"props":{}},"MethodResolveError":{"name":"MethodResolveError","subtypes":["MethodEmptyName","MethodUTF8Error","MethodNotFound","MethodInvalidSignature"],"props":{}},"MethodUTF8Error":{"name":"MethodUTF8Error","subtypes":[],"props":{}},"MisalignedAtomicAccess":{"name":"MisalignedAtomicAccess","subtypes":[],"props":{}},"NumberInputDataDependenciesExceeded":{"name":"NumberInputDataDependenciesExceeded","subtypes":[],"props":{"limit":"","number_of_input_data_dependencies":""}},"NumberOfLogsExceeded":{"name":"NumberOfLogsExceeded","subtypes":[],"props":{"limit":""}},"NumberPromisesExceeded":{"name":"NumberPromisesExceeded","subtypes":[],"props":{"limit":"","number_of_promises":""}},"PrepareError":{"name":"PrepareError","subtypes":["Serialization","Deserialization","InternalMemoryDeclared","GasInstrumentation","StackHeightInstrumentation","Instantiate","Memory"],"props":{}},"ProhibitedInView":{"name":"ProhibitedInView","subtypes":[],"props":{"method_name":""}},"ReadError":{"name":"ReadError","subtypes":[],"props":{}},"ReturnedValueLengthExceeded":{"name":"ReturnedValueLengthExceeded","subtypes":[],"props":{"length":"","limit":""}},"Serialization":{"name":"Serialization","subtypes":[],"props":{}},"SerializationError":{"name":"SerializationError","subtypes":[],"props":{"hash":""}},"StackHeightInstrumentation":{"name":"StackHeightInstrumentation","subtypes":[],"props":{}},"StackOverflow":{"name":"StackOverflow","subtypes":[],"props":{}},"TotalLogLengthExceeded":{"name":"TotalLogLengthExceeded","subtypes":[],"props":{"length":"","limit":""}},"Unreachable":{"name":"Unreachable","subtypes":[],"props":{}},"ValueLengthExceeded":{"name":"ValueLengthExceeded","subtypes":[],"props":{"length":"","limit":""}},"WasmTrap":{"name":"WasmTrap","subtypes":["Unreachable","IncorrectCallIndirectSignature","MemoryOutOfBounds","CallIndirectOOB","IllegalArithmetic","MisalignedAtomicAccess","BreakpointTrap","StackOverflow","GenericTrap"],"props":{}},"WasmUnknownError":{"name":"WasmUnknownError","subtypes":[],"props":{}},"WasmerCompileError":{"name":"WasmerCompileError","subtypes":[],"props":{"msg":""}},"WriteError":{"name":"WriteError","subtypes":[],"props":{}},"AccessKeyNotFound":{"name":"AccessKeyNotFound","subtypes":[],"props":{"account_id":"","public_key":""}},"AccountAlreadyExists":{"name":"AccountAlreadyExists","subtypes":[],"props":{"account_id":""}},"AccountDoesNotExist":{"name":"AccountDoesNotExist","subtypes":[],"props":{"account_id":""}},"ActionError":{"name":"ActionError","subtypes":["AccountAlreadyExists","AccountDoesNotExist","CreateAccountOnlyByRegistrar","CreateAccountNotAllowed","ActorNoPermission","DeleteKeyDoesNotExist","AddKeyAlreadyExists","DeleteAccountStaking","LackBalanceForState","TriesToUnstake","TriesToStake","InsufficientStake","FunctionCallError","NewReceiptValidationError","OnlyImplicitAccountCreationAllowed"],"props":{"index":""}},"ActionsValidationError":{"name":"ActionsValidationError","subtypes":["DeleteActionMustBeFinal","TotalPrepaidGasExceeded","TotalNumberOfActionsExceeded","AddKeyMethodNamesNumberOfBytesExceeded","AddKeyMethodNameLengthExceeded","IntegerOverflow","InvalidAccountId","ContractSizeExceeded","FunctionCallMethodNameLengthExceeded","FunctionCallArgumentsLengthExceeded","UnsuitableStakingKey","FunctionCallZeroAttachedGas"],"props":{}},"ActorNoPermission":{"name":"ActorNoPermission","subtypes":[],"props":{"account_id":"","actor_id":""}},"AddKeyAlreadyExists":{"name":"AddKeyAlreadyExists","subtypes":[],"props":{"account_id":"","public_key":""}},"AddKeyMethodNameLengthExceeded":{"name":"AddKeyMethodNameLengthExceeded","subtypes":[],"props":{"length":"","limit":""}},"AddKeyMethodNamesNumberOfBytesExceeded":{"name":"AddKeyMethodNamesNumberOfBytesExceeded","subtypes":[],"props":{"limit":"","total_number_of_bytes":""}},"BalanceMismatchError":{"name":"BalanceMismatchError","subtypes":[],"props":{"final_accounts_balance":"","final_postponed_receipts_balance":"","incoming_receipts_balance":"","incoming_validator_rewards":"","initial_accounts_balance":"","initial_postponed_receipts_balance":"","new_delayed_receipts_balance":"","other_burnt_amount":"","outgoing_receipts_balance":"","processed_delayed_receipts_balance":"","slashed_burnt_amount":"","tx_burnt_amount":""}},"CostOverflow":{"name":"CostOverflow","subtypes":[],"props":{}},"CreateAccountNotAllowed":{"name":"CreateAccountNotAllowed","subtypes":[],"props":{"account_id":"","predecessor_id":""}},"CreateAccountOnlyByRegistrar":{"name":"CreateAccountOnlyByRegistrar","subtypes":[],"props":{"account_id":"","predecessor_id":"","registrar_account_id":""}},"DeleteAccountStaking":{"name":"DeleteAccountStaking","subtypes":[],"props":{"account_id":""}},"DeleteActionMustBeFinal":{"name":"DeleteActionMustBeFinal","subtypes":[],"props":{}},"DeleteKeyDoesNotExist":{"name":"DeleteKeyDoesNotExist","subtypes":[],"props":{"account_id":"","public_key":""}},"DepositWithFunctionCall":{"name":"DepositWithFunctionCall","subtypes":[],"props":{}},"Expired":{"name":"Expired","subtypes":[],"props":{}},"FunctionCallArgumentsLengthExceeded":{"name":"FunctionCallArgumentsLengthExceeded","subtypes":[],"props":{"length":"","limit":""}},"FunctionCallMethodNameLengthExceeded":{"name":"FunctionCallMethodNameLengthExceeded","subtypes":[],"props":{"length":"","limit":""}},"FunctionCallZeroAttachedGas":{"name":"FunctionCallZeroAttachedGas","subtypes":[],"props":{}},"InsufficientStake":{"name":"InsufficientStake","subtypes":[],"props":{"account_id":"","minimum_stake":"","stake":""}},"InvalidAccessKeyError":{"name":"InvalidAccessKeyError","subtypes":["AccessKeyNotFound","ReceiverMismatch","MethodNameMismatch","RequiresFullAccess","NotEnoughAllowance","DepositWithFunctionCall"],"props":{}},"InvalidChain":{"name":"InvalidChain","subtypes":[],"props":{}},"InvalidDataReceiverId":{"name":"InvalidDataReceiverId","subtypes":[],"props":{"account_id":""}},"InvalidNonce":{"name":"InvalidNonce","subtypes":[],"props":{"ak_nonce":"","tx_nonce":""}},"InvalidPredecessorId":{"name":"InvalidPredecessorId","subtypes":[],"props":{"account_id":""}},"InvalidReceiverId":{"name":"InvalidReceiverId","subtypes":[],"props":{"account_id":""}},"InvalidSignature":{"name":"InvalidSignature","subtypes":[],"props":{}},"InvalidSignerId":{"name":"InvalidSignerId","subtypes":[],"props":{"account_id":""}},"InvalidTxError":{"name":"InvalidTxError","subtypes":["InvalidAccessKeyError","InvalidSignerId","SignerDoesNotExist","InvalidNonce","InvalidReceiverId","InvalidSignature","NotEnoughBalance","LackBalanceForState","CostOverflow","InvalidChain","Expired","ActionsValidation"],"props":{}},"LackBalanceForState":{"name":"LackBalanceForState","subtypes":[],"props":{"account_id":"","amount":""}},"MethodNameMismatch":{"name":"MethodNameMismatch","subtypes":[],"props":{"method_name":""}},"NotEnoughAllowance":{"name":"NotEnoughAllowance","subtypes":[],"props":{"account_id":"","allowance":"","cost":"","public_key":""}},"NotEnoughBalance":{"name":"NotEnoughBalance","subtypes":[],"props":{"balance":"","cost":"","signer_id":""}},"OnlyImplicitAccountCreationAllowed":{"name":"OnlyImplicitAccountCreationAllowed","subtypes":[],"props":{"account_id":""}},"ReceiptValidationError":{"name":"ReceiptValidationError","subtypes":["InvalidPredecessorId","InvalidReceiverId","InvalidSignerId","InvalidDataReceiverId","ReturnedValueLengthExceeded","NumberInputDataDependenciesExceeded","ActionsValidation"],"props":{}},"ReceiverMismatch":{"name":"ReceiverMismatch","subtypes":[],"props":{"ak_receiver":"","tx_receiver":""}},"RequiresFullAccess":{"name":"RequiresFullAccess","subtypes":[],"props":{}},"SignerDoesNotExist":{"name":"SignerDoesNotExist","subtypes":[],"props":{"signer_id":""}},"TotalNumberOfActionsExceeded":{"name":"TotalNumberOfActionsExceeded","subtypes":[],"props":{"limit":"","total_number_of_actions":""}},"TotalPrepaidGasExceeded":{"name":"TotalPrepaidGasExceeded","subtypes":[],"props":{"limit":"","total_prepaid_gas":""}},"TriesToStake":{"name":"TriesToStake","subtypes":[],"props":{"account_id":"","balance":"","locked":"","stake":""}},"TriesToUnstake":{"name":"TriesToUnstake","subtypes":[],"props":{"account_id":""}},"TxExecutionError":{"name":"TxExecutionError","subtypes":["ActionError","InvalidTxError"],"props":{}},"UnsuitableStakingKey":{"name":"UnsuitableStakingKey","subtypes":[],"props":{"public_key":""}},"Closed":{"name":"Closed","subtypes":[],"props":{}},"InternalError":{"name":"InternalError","subtypes":[],"props":{}},"ServerError":{"name":"ServerError","subtypes":["TxExecutionError","Timeout","Closed","InternalError"],"props":{}},"Timeout":{"name":"Timeout","subtypes":[],"props":{}}}}');

/***/ })

};
;